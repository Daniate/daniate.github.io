<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Qt Errors &amp; Warnings</title>
    <link href="/2023/08/09/Qt-Errors-Warnings/"/>
    <url>/2023/08/09/Qt-Errors-Warnings/</url>
    
    <content type="html"><![CDATA[<h1 id="Failed-to-find-“gl-h”"><a href="#Failed-to-find-“gl-h”" class="headerlink" title="Failed to find “gl.h”"></a>Failed to find “gl.h”</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>macOS Ventura 13.3.1</li><li>Qt 5.15.2</li></ul><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>出现以下错误：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/Applications/Qt/5.15.2/clang_64/lib/cmake/Qt5Gui/Qt5GuiConfigExtras.cmake:9: error: Failed to find &quot;gl.h&quot; in &quot;/System/Library/Frameworks/OpenGL.framework/Headers;/System/Library/Frameworks/AGL.framework/Headers&quot;. /Applications/Qt/5.15.2/clang_64/lib/cmake/Qt5Gui/Qt5GuiConfig.cmake:227 (include) /Applications/Qt/5.15.2/clang_64/lib/cmake/Qt5Widgets/Qt5WidgetsConfig.cmake:93 (find_package) /Applications/Qt/5.15.2/clang_64/lib/cmake/Qt5/Qt5Config.cmake:28 (find_package) CMakeLists.txt:15 (find_package)<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改<code>/Applications/Qt/5.15.2/clang_64/lib/cmake/Qt5Gui/Qt5GuiConfigExtras.cmake</code>文件内容。</p><p>将其中的</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(_GL_INCDIRS <br>    <span class="hljs-string">&quot;/System/Library/Frameworks/OpenGL.framework/Headers&quot;</span> <br>    <span class="hljs-string">&quot;/System/Library/Frameworks/AGL.framework/Headers&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(_GL_INCDIRS <br>    <span class="hljs-string">&quot;/System/Library/Frameworks/OpenGL.framework/Headers&quot;</span> <br>    <span class="hljs-string">&quot;/System/Library/Frameworks/AGL.framework/Headers&quot;</span> <br>    <span class="hljs-string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers&quot;</span> <br>    <span class="hljs-string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AGL.framework/Versions/Current/Headers&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>也就是多添加两个目录：</p><ul><li><code>&quot;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers&quot;</code> </li><li><code>&quot;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AGL.framework/Versions/Current/Headers&quot;</code></li></ul><p>将其中的</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">_qt5gui_find_extra_libs</span>(<span class="hljs-variable">OPENGL</span> <span class="hljs-string">&quot;OpenGL;AGL&quot;</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;/System/Library/Frameworks/OpenGL.framework/Headers;/System/Library/Frameworks/AGL.framework/Headers&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">_qt5gui_find_extra_libs</span>(<span class="hljs-variable">OPENGL</span> <span class="hljs-string">&quot;OpenGL;AGL&quot;</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;/System/Library/Frameworks/OpenGL.framework/Headers;/System/Library/Frameworks/AGL.framework/Headers;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AGL.framework/Versions/Current/Headers&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>也就是多加入了以下内容：</p><p><code>;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AGL.framework/Versions/Current/Headers</code></p><h1 id="Could-not-find-any-valid-SDKs"><a href="#Could-not-find-any-valid-SDKs" class="headerlink" title="Could not find any valid SDKs"></a>Could not find any valid SDKs</h1><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ul><li>macOS Ventura 13.3.1</li><li>CMake 3.22</li><li>Qt Creator 7.0.2</li></ul><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p><code>Qt Creator</code>编译项目时出现以下警告：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/Applications/CMake.app/Contents/share/cmake-3.22/Modules/Platform/Darwin-Initialize.cmake:112: warning: Could not find any valid SDKs in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs /Applications/CMake.app/Contents/share/cmake-3.22/Modules/CMakeSystemSpecificInitialize.cmake:21 (include) CMakeLists.txt:3 (project)<br></code></pre></td></tr></table></figure><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p><code>macOS</code>系统中的<code>.sdk</code>目录名中不再包含版本号。</p><h1 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h1><p>修改<code>/Applications/CMake.app/Contents/share/cmake-3.22/Modules/Platform/Darwin-Initialize.cmake</code>文件中的内容。</p><p>找到以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># Find the latest SDK as recommended by Apple (Technical Q&amp;A QA1806)</span><br><span class="hljs-keyword">set</span>(_CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-string">&quot;0.0&quot;</span>)<br><span class="hljs-keyword">file</span>(GLOB _CMAKE_OSX_SDKS RELATIVE <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;&quot;</span> <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;/MacOSX*.sdk&quot;</span>)<br><span class="hljs-keyword">foreach</span>(_SDK <span class="hljs-variable">$&#123;_CMAKE_OSX_SDKS&#125;</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">IS_DIRECTORY</span> <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;/$&#123;_SDK&#125;&quot;</span> <span class="hljs-keyword">AND</span> _SDK <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;MacOSX([0-9]+\\.[0-9]+)[^/]*\\.sdk&quot;</span> <span class="hljs-keyword">AND</span> CMAKE_MATCH_1 <span class="hljs-keyword">VERSION_GREATER</span> <span class="hljs-variable">$&#123;_CMAKE_OSX_LATEST_SDK_VERSION&#125;</span>)<br>        <span class="hljs-keyword">set</span>(_CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-string">&quot;$&#123;CMAKE_MATCH_1&#125;&quot;</span>)<br>    <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">endforeach</span>()<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> _CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;0.0&quot;</span>)<br>    <span class="hljs-keyword">set</span>(_CMAKE_OSX_SYSROOT_DEFAULT <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;/MacOSX$&#123;_CMAKE_OSX_LATEST_SDK_VERSION&#125;.sdk&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(WARNING <span class="hljs-string">&quot;Could not find any valid SDKs in $&#123;_CMAKE_OSX_SDKS_DIR&#125;&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># Find the latest SDK as recommended by Apple (Technical Q&amp;A QA1806)</span><br><span class="hljs-keyword">set</span>(_CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-string">&quot;0.0&quot;</span>)<br><span class="hljs-keyword">file</span>(GLOB _CMAKE_OSX_SDKS RELATIVE <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;&quot;</span> <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;/MacOSX*.sdk&quot;</span>)<br><span class="hljs-keyword">foreach</span>(_SDK <span class="hljs-variable">$&#123;_CMAKE_OSX_SDKS&#125;</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">IS_DIRECTORY</span> <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;/$&#123;_SDK&#125;&quot;</span>)<br>        <span class="hljs-keyword">if</span>(_SDK <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;MacOSX([0-9]+\\.[0-9]+)[^/]*\\.sdk&quot;</span> <span class="hljs-keyword">AND</span> CMAKE_MATCH_1 <span class="hljs-keyword">VERSION_GREATER</span> <span class="hljs-variable">$&#123;_CMAKE_OSX_LATEST_SDK_VERSION&#125;</span>)<br>            <span class="hljs-keyword">set</span>(_CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-string">&quot;$&#123;CMAKE_MATCH_1&#125;&quot;</span>)<br>        <span class="hljs-keyword">elseif</span>(_SDK <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;MacOSX.sdk&quot;</span>)<br>            <span class="hljs-keyword">set</span>(_CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">endif</span>()<br>    <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">endforeach</span>()<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> _CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;0.0&quot;</span> <span class="hljs-keyword">OR</span> _CMAKE_OSX_LATEST_SDK_VERSION <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">set</span>(_CMAKE_OSX_SYSROOT_DEFAULT <span class="hljs-string">&quot;$&#123;_CMAKE_OSX_SDKS_DIR&#125;/MacOSX$&#123;_CMAKE_OSX_LATEST_SDK_VERSION&#125;.sdk&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(WARNING <span class="hljs-string">&quot;Could not find any valid SDKs in $&#123;_CMAKE_OSX_SDKS_DIR&#125;&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><p>主要修改的地方如下图：<br><img src="/images/media/Qt-Could-not-find-any-valid-SDKs.png" alt="Qt Could not find any valid SDKs"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt设置应用程序图标</title>
    <link href="/2023/08/09/Qt%E8%AE%BE%E7%BD%AE%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87/"/>
    <url>/2023/08/09/Qt%E8%AE%BE%E7%BD%AE%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>@[TOC]</p><h1 id="设置程序图标"><a href="#设置程序图标" class="headerlink" title="设置程序图标"></a>设置程序图标</h1><blockquote><p>参考资料：</p><ul><li>Qt帮助文档中的《Setting the Application Icon》</li></ul></blockquote><h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><blockquote><p>可在以下网站将<code>JPG</code>、<code>GIF</code>、<code>PNG</code>格式的图片转换为<code>ICO</code>格式的图片：</p><ul><li><a href="https://www.bitbug.net/">https://www.bitbug.net/</a></li><li><a href="https://ico.nyaasu.top/">https://ico.nyaasu.top/</a></li><li><a href="http://www.ico51.cn/">http://www.ico51.cn/</a></li></ul></blockquote><p>提供一个<code>ICO</code>格式的图片。假定其文件名为<code>dog.ico</code>。</p><p>创建<code>.rc</code>文本文件。假定其文件名为<code>res.rc</code>。<br>将该文件的内容设置为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">IDI_ICON1 ICON <span class="hljs-string">&quot;dog.ico&quot;</span><br></code></pre></td></tr></table></figure><p>使用<code>CMake</code>时，在<code>CMakeLists.txt</code>中添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">set(app_icon_windows &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/res.rc&quot;)<br>qt_add_executable(APP main.cpp $&#123;app_icon_windows&#125;)<br></code></pre></td></tr></table></figure><p>使用<code>QMake</code>时，在<code>.pro</code>文件中添加以下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">RC_FILE = res.rc<br></code></pre></td></tr></table></figure><h2 id="macOS平台"><a href="#macOS平台" class="headerlink" title="macOS平台"></a>macOS平台</h2><p>使用<code>macOS</code>提供的<code>iconutil</code>将<code>.iconset</code>目录及该目录下的图标转换成<code>.icns</code>文件。</p><p>如何使用<code>iconutil</code>，可参见<a href="https://developer.apple.com/library/archive/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Optimizing/Optimizing.html">https://developer.apple.com/library/archive/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Optimizing/Optimizing.html</a>中的<code>Create a Set of Icons That Includes High-Resolution Versions</code>该小节内容。</p><p>假定有一个名为<code>dog.iconset</code>的目录，且该目录下包含了必要分辨率的图标：<br><img src="/images/media/dog.iconset.png" alt="dog.iconset"><br>可以使用如下命令得到<code>.icns</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iconutil -c icns dog.iconset<br></code></pre></td></tr></table></figure><p><img src="/images/media/dog.icns.png" alt="dog.icns"><br>使用<code>CMake</code>时，在<code>CMakeLists.txt</code>中添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将 MACOSX_BUNDLE_ICON_FILE 变量添加到 CMake 生成的 Info.plist 文件中。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">该变量的值是 .icns 文件名（不包含路径）</span><br>set(MACOSX_BUNDLE_ICON_FILE dog.icns)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">告诉 CMake 在哪里可以找到 .icns 文件，以及将其安装到哪里</span><br>set(app_icon_macos &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/resources/dog.icns&quot;)<br><span class="hljs-meta prompt_">set_source_files_properties($</span><span class="language-bash">&#123;app_icon_macos&#125; PROPERTIES MACOSX_PACKAGE_LOCATION <span class="hljs-string">&quot;Resources&quot;</span>)</span><br><br>qt_add_executable(APP MACOSX_BUNDLE main.cpp $&#123;app_icon_macos&#125;)<br></code></pre></td></tr></table></figure><p>使用<code>QMake</code>时，在<code>.pro</code>文件中添加以下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ICON = dog.icns<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt信号与槽</title>
    <link href="/2023/08/09/Qt%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD/"/>
    <url>/2023/08/09/Qt%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料：</p><ul><li>Qt帮助文档中的《Signals &amp; Slots》</li></ul></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>用于在对象之间建立通信。</p><p>当发生某个事件时，信号会被发出，槽函数会被调用，以响应某个信号。</p><p>信号和槽机制是类型安全的：信号的签名必须与槽的签名匹配（实际上，一个槽的签名可能比它接收到的信号的签名要短，它可以忽略信号传递过来的额外的参数)。</p><p>信号和槽是松耦合的：发出信号的类既不知道也不关心哪个槽会接收信号。</p><p>所有从<code>QObject</code>或其子类（例如，QWidget）继承的类都可以包含信号和槽。</p><p>槽可以用来接收信号，但也是普通的成员函数。</p><p>信号与槽之间的连接可以是<strong>多对一</strong>的，也可以是<strong>一对多</strong>的。</p><p>信号与信号之间也可以建立连接。</p><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p><strong>信号是公共访问函数，且必须没有返回值</strong>，可以从任何地方发出，但我们建议只从定义信号及其子类的类发出信号。</p><p>当发出信号时，连接到它的槽<strong>通常</strong>立即执行，就像普通的函数调用一样，当这种情况发生时，信号和槽机制完全独立于任何<code>GUI</code>事件循环，一旦所有槽都返回，<code>emit</code>语句之后的代码就会执行。</p><p>当使用队列连接时，情况略有不同，在这种情况下，emit关键字后面的代码将立即继续执行，而槽将稍后执行。</p><p>如果多个槽连接到一个信号，则在信号发出时，这些槽将按照它们连接的顺序依次执行。</p><p>信号是由<code>moc</code>自动生成的，不能在<code>.cpp</code>文件中实现。它们不能有返回类型(即必须使用<code>void</code>)。</p><p>语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">signals:<br>    <span class="hljs-type">void</span> 信号名称(参数);<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">signals:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">xxSig</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">double</span> d)</span>;<br></code></pre></td></tr></table></figure><h2 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h2><p>当一个连接到槽的信号发出时，就会调用这个槽。</p><p>槽是普通的<code>C++</code>函数，可以正常调用，与其他函数不同的是，信号可以与它们建立连接。</p><p>与回调相比，信号和槽稍微慢一些，原因在于需要定位连接对象、安全地遍历所有连接以及处理参数所需的开销。</p><p>注意，在与基于<code>Qt</code>的应用程序一起编译时，定义称为信号或槽的变量的其他库可能会导致编译器警告和错误。要解决这个问题，需要使用#undef屏蔽掉有问题的预处理器符号。</p><p>所有包含信号或槽的类必须在声明的顶部提到<code>Q_OBJECT</code>。这些类还**必须(直接或间接)**派生自<code>QObject</code>。</p><p>槽函数需要有实现。</p><p>可以通过一个<code>disconnect()</code>中断所有连接。如果使用了<code>Qt::UniqueConnection</code>，则只有在不重复的情况下才会进行连接；如果已经有一个重复的信号(相同对象上相同槽的相同信号)，连接将会失败，<code>connect()</code>会返回<code>false</code>。</p><p>语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">slots:<br>    [public|protected|private] <span class="hljs-type">void</span> 槽名称(参数);<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">public slots:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">xxSigHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br></code></pre></td></tr></table></figure><h2 id="信号与槽的连接"><a href="#信号与槽的连接" class="headerlink" title="信号与槽的连接"></a>信号与槽的连接</h2><p>使用<code>connect()</code>函数进行连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> QMetaObject::Connection <span class="hljs-title function_">connect</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">const</span> QObject *sender, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *signal, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> QObject *receiver, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *member, </span><br><span class="hljs-params">    Qt::ConnectionType = Qt::AutoConnection</span><br><span class="hljs-params">)</span>;<br><br><span class="hljs-type">static</span> QMetaObject::Connection <span class="hljs-title function_">connect</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">const</span> QObject *sender, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> QMetaMethod &amp;signal, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> QObject *receiver, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> QMetaMethod &amp;method, </span><br><span class="hljs-params">    Qt::ConnectionType type = Qt::AutoConnection</span><br><span class="hljs-params">)</span>;<br><br><span class="hljs-keyword">inline</span> QMetaObject::Connection <span class="hljs-title function_">connect</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">const</span> QObject *sender, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *signal, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *member, </span><br><span class="hljs-params">    Qt::ConnectionType type = Qt::AutoConnection</span><br><span class="hljs-params">)</span> <span class="hljs-type">const</span>;<br><br>template &lt;typename Func1, typename Func2&gt;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> QMetaObject::Connection <span class="hljs-title function_">connect</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">const</span> typename QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, </span><br><span class="hljs-params">    Func1 signal, </span><br><span class="hljs-params">    <span class="hljs-type">const</span> typename QtPrivate::FunctionPointer&lt;Func2&gt;::Object *receiver, </span><br><span class="hljs-params">    Func2 slot, </span><br><span class="hljs-params">    Qt::ConnectionType type = Qt::AutoConnection</span><br><span class="hljs-params">)</span>;<br><br>template &lt;typename Func1, typename Func2&gt;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> typename <span class="hljs-built_in">std</span>::enable_if&lt;<span class="hljs-type">int</span>(QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount) &gt;= <span class="hljs-number">0</span>, QMetaObject::Connection&gt;::type <br>connect(<br>    <span class="hljs-type">const</span> typename QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, <br>    Func1 signal, <br>    Func2 slot<br>);<br></code></pre></td></tr></table></figure><h3 id="信号槽连接的几种方式"><a href="#信号槽连接的几种方式" class="headerlink" title="信号槽连接的几种方式"></a>信号槽连接的几种方式</h3><p>可以通过以下3种方式进行连接：</p><ol><li><code>SIGNAL</code>和<code>SLOT</code>宏（字符串形式）</li><li>函数指针</li><li><code>C++11</code>的<code>lambda</code>表达式</li></ol><h4 id="SIGNAL和SLOT宏"><a href="#SIGNAL和SLOT宏" class="headerlink" title="SIGNAL和SLOT宏"></a><code>SIGNAL</code>和<code>SLOT</code>宏</h4><p>这两个宏，会把传入的内容转换为字符串，它们的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGNAL(arg) #arg</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SLOT(arg) #arg</span><br></code></pre></td></tr></table></figure><p>传入<code>SIGNAL</code>宏的函数签名的参数个数不能比传入<code>SLOT</code>宏的函数签名的参数个数少。</p><p>也就是说，信号的参数个数需要<strong>大于或等于</strong>槽的参数个数，且信号中的前<code>N</code>个参数必须要与对应的槽参数的<strong>类型相同</strong>（<code>N</code>为槽函数中参数的个数），否则在<code>Qt Creator</code>中会出现：</p><p><code>QObject::connect: Incompatible sender/receiver arguments</code></p><p>传入<code>SLOT</code>宏的可以是成员函数、静态函数、<code>lambda</code>表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">connect(sender, SIGNAL(destroyed(QObject*)), this, SLOT(objectDestroyed(Qbject*)));<br>connect(sender, SIGNAL(destroyed(QObject*)), this, SLOT(objectDestroyed()));<br>connect(sender, SIGNAL(destroyed()), this, SLOT(objectDestroyed()));<br></code></pre></td></tr></table></figure><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><p>此时，槽函数必须是一个普通成员函数或静态函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">connect(sender, &amp;QObject::destroyed, this, &amp;MyObject::objectDestroyed);<br></code></pre></td></tr></table></figure><p>信号或槽有重载时，如果直接传入函数指针，则无法判断到底要使用哪个信号、哪个槽，此时，需要通过<code>QOverload</code>或<strong>显式创建指针变量</strong>进行处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">signals:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">brake</span><span class="hljs-params">(<span class="hljs-type">int</span> force)</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">brake</span><span class="hljs-params">(<span class="hljs-type">int</span> force, <span class="hljs-type">int</span> a)</span>;<br>public slots:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">stopRunning</span><span class="hljs-params">(<span class="hljs-type">double</span> force)</span>;<br><br><span class="hljs-comment">// 使用QOverload</span><br>connect(&amp;car, qOverload&lt;<span class="hljs-type">int</span>&gt;(&amp;Car::brake), &amp;car, &amp;Car::stopRunning);<br>connect(&amp;car, qOverload&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(&amp;Car::brake), &amp;car, &amp;Car::stopRunning);<br><span class="hljs-comment">// 使用指针变量</span><br><span class="hljs-type">void</span> (Car::*ptr1)(<span class="hljs-type">int</span>) = &amp;Car::brake;<br><span class="hljs-type">void</span> (Car::*ptr2)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) = &amp;Car::brake;<br>connect(&amp;car, ptr1, &amp;car, &amp;Car::stopRunning);<br>connect(&amp;car, ptr2, &amp;car, &amp;Car::stopRunning);<br></code></pre></td></tr></table></figure><p>使用函数指针进行信号与槽的连接，有以下优势：</p><ol><li>编译器可以检查信号参数与槽参数是否兼容（编译期检测）</li><li>如有必要，编译器会对参数进行转换（比如，double转int，int转double）</li></ol><h4 id="C-11的lambda表达式"><a href="#C-11的lambda表达式" class="headerlink" title="C++11的lambda表达式"></a><code>C++11</code>的<code>lambda</code>表达式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">connect(sender, &amp;QObject::destroyed, this, [=]()&#123;<br>    this-&gt;m_objects.remove(sender);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Qt-ConnectionType"><a href="#Qt-ConnectionType" class="headerlink" title="Qt::ConnectionType"></a>Qt::ConnectionType</h3><table><thead><tr><th>序号</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td>1</td><td align="left">Qt::AutoConnection</td><td align="left">默认。如果接收者与发送的信号在同一个线程中，则使用Qt::DirectConnection；否则，则使用Qt::QueuedConnection。具体使用哪个，是在信号发送时才确定的。</td></tr><tr><td>2</td><td align="left">Qt::DirectConnection</td><td align="left">信号发送时，槽函数立刻执行。槽函数在信号发送线程中执行。</td></tr><tr><td>3</td><td align="left">Qt::QueuedConnection</td><td align="left">槽函数在控制权交还给接收线程的运行循环时执行。槽函数在接收线程中执行。</td></tr><tr><td>4</td><td align="left">Qt::BlockingQueuedConnection</td><td align="left">与Qt::QueuedConnection一样，但信号线程会一直阻塞，直到槽函数返回，因此信号线程与接收线程不能是同一个，否则会发生死锁。</td></tr><tr><td>5</td><td align="left">Qt::UniqueConnection</td><td align="left">可以与上述几种类型结合使用（使用按位或“|”），如果连接已经存在，那么新的连接将会失败。Qt 4.6引入。</td></tr><tr><td>6</td><td align="left">Qt::SingleShotConnection</td><td align="left">可以与上述几种类型结合使用（使用按位或“|”），槽函数只会执行一次，当信号发送时，连接会自动断开。Qt 6.0引入。</td></tr></tbody></table><h3 id="在信号、槽中使用自定义类型的参数"><a href="#在信号、槽中使用自定义类型的参数" class="headerlink" title="在信号、槽中使用自定义类型的参数"></a>在信号、槽中使用自定义类型的参数</h3><p>如果调用<code>connect</code>函数时，<code>Qt::ConnectionType</code>设置的是<code>Qt::QueuedConnection</code>，那么，自定义类型必须是<code>Qt</code>元对象系统所知道的类型，否则在连接时会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYOBJECT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYOBJECT_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MyCustomType.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyObject</span> :</span> public QObject<br>&#123;<br>    Q_OBJECT<br>public:<br>    explicit <span class="hljs-title function_">MyObject</span><span class="hljs-params">(QObject *parent = nullptr)</span>;<br><br>private:<br><br>signals:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">customTypeSig</span><span class="hljs-params">(MyCustomType val)</span>;<br><br>public slots:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">handlerCustomType</span><span class="hljs-params">(MyCustomType val)</span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MYOBJECT_H</span></span><br></code></pre></td></tr></table></figure><p>注意，最后一个参数是<code>Qt::QueuedConnection</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">connect(&amp;obj, &amp;MyObject::customTypeSig, &amp;obj, &amp;MyObject::handlerCustomType, Qt::QueuedConnection);<br></code></pre></td></tr></table></figure><p>错误信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">QObject::connect: Cannot <span class="hljs-built_in">queue</span> arguments of type <span class="hljs-string">&#x27;MyCustomType&#x27;</span><br>(Make sure <span class="hljs-string">&#x27;MyCustomType&#x27;</span> is registered using qRegisterMetaType().)<br></code></pre></td></tr></table></figure><p>需要在连接前，加入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">Q_DECLARE_METATYPE(MyCustomType)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alpine Linux: unable to select packages</title>
    <link href="/2023/05/08/Alpine-Linux-unable-to-select-packages/"/>
    <url>/2023/05/08/Alpine-Linux-unable-to-select-packages/</url>
    
    <content type="html"><![CDATA[<p>执行<code>apk add npm</code>出现错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ERROR: unable to select packages:<br>  npm (no such package):<br>    required by: world[npm]<br></code></pre></td></tr></table></figure><p>解决方式：编辑<code>/etc/apk/repositories</code>，删除链接前面存在的<code>#</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Alpine</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenGL成果展示</title>
    <link href="/2022/10/29/OpenGL%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
    <url>/2022/10/29/OpenGL%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="macOS-神奇效果"><a href="#macOS-神奇效果" class="headerlink" title="macOS 神奇效果"></a>macOS 神奇效果</h3><p><img src="/images/media/2022/10/1404727066.mp4"></p><h3 id="冯氏光照模型"><a href="#冯氏光照模型" class="headerlink" title="冯氏光照模型"></a>冯氏光照模型</h3><p><img src="/images/media/2022/10/1085972121.mp4"></p><h3 id="光照模型合集"><a href="#光照模型合集" class="headerlink" title="光照模型合集"></a>光照模型合集</h3><p><img src="/images/media/2022/10/278323864.mp4"></p><h3 id="阴影贴图"><a href="#阴影贴图" class="headerlink" title="阴影贴图"></a>阴影贴图</h3><p><img src="/images/media/2022/10/2397803233.mp4"></p><h3 id="水波涟漪"><a href="#水波涟漪" class="headerlink" title="水波涟漪"></a>水波涟漪</h3><p><img src="/images/media/2022/10/853068194.mp4"></p><h3 id="视频滤镜"><a href="#视频滤镜" class="headerlink" title="视频滤镜"></a>视频滤镜</h3><p><img src="/images/media/2022/10/2199858142.mp4"></p>]]></content>
    
    
    
    <tags>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter - 使用Texture展示宿主平台中的纹理</title>
    <link href="/2022/09/19/Flutter%20-%20%E4%BD%BF%E7%94%A8Texture%E5%B1%95%E7%A4%BA%E5%AE%BF%E4%B8%BB%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E7%BA%B9%E7%90%86/"/>
    <url>/2022/09/19/Flutter%20-%20%E4%BD%BF%E7%94%A8Texture%E5%B1%95%E7%A4%BA%E5%AE%BF%E4%B8%BB%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E7%BA%B9%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter-使用Texture展示宿主平台中的纹理"><a href="#Flutter-使用Texture展示宿主平台中的纹理" class="headerlink" title="Flutter - 使用Texture展示宿主平台中的纹理"></a>Flutter - 使用Texture展示宿主平台中的纹理</h1><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ol><li>获取<code>Texture Registry</code></li><li>创建<code>SurfaceTextureEntry</code></li><li>返回<code>纹理id</code>给<code>Flutter</code>，供<code>Texture Widget</code>使用 </li><li>返回<code>SurfaceTexture</code>给宿主平台，并在宿主平台实现绘制</li></ol><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ol><li>获取<code>Texture Registry</code></li><li>在宿主平台中自定义一个实现绘制的类（需要实现<code>FlutterTexture</code>协议），并注册其实例</li><li>返回<code>纹理id</code>给<code>Flutter</code>，供<code>Texture Widget</code>使用</li><li>每完成一次绘制，就给<code>Texture Registry</code>发送一次通知</li></ol><p>示例代码：<a href="https://github.com/Daniate/flutter_opengl_es">https://github.com/Daniate/flutter_opengl_es</a></p><blockquote><p>参考：<br><a href="https://api.flutter.dev/flutter/widgets/Texture-class.html">https://api.flutter.dev/flutter/widgets/Texture-class.html</a><br><a href="https://api.flutter.dev/javadoc/io/flutter/view/TextureRegistry.html">https://api.flutter.dev/javadoc/io/flutter/view/TextureRegistry.html</a><br><a href="https://api.flutter.dev/objcdoc/Protocols/FlutterTextureRegistry.html">https://api.flutter.dev/objcdoc/Protocols/FlutterTextureRegistry.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>OpenGL ES</tag>
      
      <tag>Flutter</tag>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RTMP推流详解</title>
    <link href="/2022/08/14/RTMP%E6%8E%A8%E6%B5%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/08/14/RTMP%E6%8E%A8%E6%B5%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料：</p><ul><li>Adobe Flash Video File Format Specification Version 10.1</li><li>ISO&#x2F;IEC 14496-3 Second edition 2001（Information technology — Coding of audio-visual objects — Part 3: Audio）</li><li>ISO&#x2F;IEC 14496-15 Second edition 2010（Information technology — Coding of audio-visual objects — Part 15: Advanced Video Coding (AVC) file format）</li><li>ITU-T H.264(01&#x2F;2012)（Advanced video coding for generic audiovisual services）</li></ul></blockquote><p>RTMP推流，需要以<code>FLV Tag</code>发送数据。</p><h2 id="发送-script-data"><a href="#发送-script-data" class="headerlink" title="发送 script data"></a>发送 script data</h2><p>如果要发送，必须在发送音视频数据之前进行发送；但也可以完全不发送。</p><p><img src="/images/media/2022/08/975925965.jpg" alt="16501185018892.jpg"></p><p><code>script data</code>里面必须有<code>onMetadata</code>，但并不是所有的属性都需要发送，可以选择性地发送其中的几个，比如，只发送<code>audiocodecid</code>、<code>videocodecid</code>、<code>height</code>、<code>width</code>。</p><h2 id="发送音频数据"><a href="#发送音频数据" class="headerlink" title="发送音频数据"></a>发送音频数据</h2><h3 id="发送-AAC-sequence-header"><a href="#发送-AAC-sequence-header" class="headerlink" title="发送 AAC sequence header"></a>发送 AAC sequence header</h3><p>必须在发送<code>AAC raw</code>之前进行发送。</p><h4 id="AudioTagHeader"><a href="#AudioTagHeader" class="headerlink" title="AudioTagHeader"></a>AudioTagHeader</h4><p>其结构如下：</p><p>4位的<code>SoundFormat</code>，用<code>10</code>代表AAC<br>2位的<code>SoundRate</code>，用<code>3</code>代表44100Hz<br>1位的<code>SoundSize</code>，对于压缩格式（AAC属于压缩格式），用<code>1</code>代表16位的采样大小<br>1位的<code>SoundType</code>，<code>0</code>代表单声道；<code>1</code>代表立体声；<br>8位的<code>AACPacketType</code>，用<code>0</code>代表<code>AAC sequence header</code></p><p><img src="/images/media/2022/08/2671682635.jpg" alt="16501197162416.jpg"></p><p>另，根据上图中的文字信息，可以得出，这2个字节固定为：</p><p><code>0xAF</code>和<code>0x00</code></p><p>解析如下：</p><p><img src="/images/media/2022/08/1723977446.jpg" alt="16501204254395.jpg"></p><p>4位的<code>SoundFormat</code>，取10，二进制就是<code>1010</code><br>2位的<code>SoundRate</code>，取3，二进制就是<code>11</code><br>1位的<code>SoundSize</code>，取1，二进制就是<code>1</code><br>1位的<code>SoundType</code>，取1，二进制就是<code>1</code></p><p>它们正好是1字节，也就是0xAF。</p><p>后面的1字节<code>AACPacketType</code>，是0x00。</p><h4 id="AudioTagBody"><a href="#AudioTagBody" class="headerlink" title="AudioTagBody"></a>AudioTagBody</h4><p>对于<code>AAC sequence header</code>，其<code>AudioTagBody</code>就是<code>AudioSpecificConfig</code>：</p><p><img src="/images/media/2022/08/513668254.jpg" alt="16501195591550.jpg"></p><h4 id="AudioSpecificConfig"><a href="#AudioSpecificConfig" class="headerlink" title="AudioSpecificConfig"></a>AudioSpecificConfig</h4><h5 id="audioObjectType"><a href="#audioObjectType" class="headerlink" title="audioObjectType"></a>audioObjectType</h5><p><img src="/images/media/2022/08/2900475490.jpg" alt="16501208896938.jpg"></p><h5 id="samplingFrequencyIndex"><a href="#samplingFrequencyIndex" class="headerlink" title="samplingFrequencyIndex"></a>samplingFrequencyIndex</h5><p><img src="/images/media/2022/08/3647168084.jpg" alt="16501210272235.jpg"></p><p>因为发送的是<code>AAC</code>，<code>samplingFrequencyIndex</code>不会取<code>0xf</code>，因此，忽略占24位的<code>samplingFrequency</code>。</p><h5 id="channelConfiguration"><a href="#channelConfiguration" class="headerlink" title="channelConfiguration"></a>channelConfiguration</h5><p><img src="/images/media/2022/08/2467303849.jpg" alt="16501214007515.jpg"></p><h5 id="GASpecificConfig"><a href="#GASpecificConfig" class="headerlink" title="GASpecificConfig"></a>GASpecificConfig</h5><p><img src="/images/media/2022/08/2546042146.jpg" alt="16501224239765.jpg"></p><p><img src="/images/media/2022/08/3187914705.jpg" alt="16501223707348.jpg"></p><p>上图中标记为红色的字段，都取0。</p><h5 id="计算AudioSpecificConfig"><a href="#计算AudioSpecificConfig" class="headerlink" title="计算AudioSpecificConfig"></a>计算AudioSpecificConfig</h5><p>5位audioObjectType，<br>4位samplingFrequencyIndex，<br>4位channelConfiguration，<br>3位GASpecificConfig</p><p><img src="/images/media/2022/08/1726443056.jpg" alt="16501239290327.jpg"></p><p>总共2个字节，计算公式如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bytes</span>[<span class="hljs-number">0</span>] = ((audioObjectType &amp; <span class="hljs-number">0</span>x1F) &lt;&lt; <span class="hljs-number">3</span>) | ((samplingFrequencyIndex &amp; <span class="hljs-number">0</span>x0F) &gt;&gt; <span class="hljs-number">1</span>))<br><span class="hljs-attribute">bytes</span>[<span class="hljs-number">1</span>] = ((samplingFrequencyIndex &amp; <span class="hljs-number">0</span>x01) &lt;&lt; <span class="hljs-number">7</span>) | ((channelConfiguration &amp; <span class="hljs-number">0</span>x0F) &lt;&lt; <span class="hljs-number">3</span>) | GASpecificConfig<br></code></pre></td></tr></table></figure><p>因为<code>GASpecificConfig</code>都是0，因此：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bytes</span>[<span class="hljs-number">0</span>] = ((audioObjectType &amp; <span class="hljs-number">0</span>x1F) &lt;&lt; <span class="hljs-number">3</span>) | ((samplingFrequencyIndex &amp; <span class="hljs-number">0</span>x0F) &gt;&gt; <span class="hljs-number">1</span>))<br><span class="hljs-attribute">bytes</span>[<span class="hljs-number">1</span>] = ((samplingFrequencyIndex &amp; <span class="hljs-number">0</span>x01) &lt;&lt; <span class="hljs-number">7</span>) | ((channelConfiguration &amp; <span class="hljs-number">0</span>x0F) &lt;&lt; <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="发送-AAC-raw"><a href="#发送-AAC-raw" class="headerlink" title="发送 AAC raw"></a>发送 AAC raw</h3><h4 id="AudioTagHeader-1"><a href="#AudioTagHeader-1" class="headerlink" title="AudioTagHeader"></a>AudioTagHeader</h4><p>其结构如下：</p><p>4位的<code>SoundFormat</code>，用<code>10</code>代表AAC<br>2位的<code>SoundRate</code>，用<code>3</code>代表44100Hz<br>1位的<code>SoundSize</code>，对于压缩格式（AAC属于压缩格式），用<code>1</code>代表16位的采样大小<br>1位的<code>SoundType</code>，<code>0</code>代表单声道；<code>1</code>代表立体声；<br>8位的<code>AACPacketType</code>，用<code>1</code>代表<code>AAC raw</code></p><p><img src="/images/media/2022/08/2695081963.jpg" alt="16501197162416.jpg"></p><p>另，根据上图中的文字信息，可以得出，这2个字节的数据，固定为：</p><p><code>0xAF</code>和<code>0x01</code></p><h4 id="AudioTagBody-1"><a href="#AudioTagBody-1" class="headerlink" title="AudioTagBody"></a>AudioTagBody</h4><p>也即<code>Raw AAC frame data</code></p><h2 id="发送视频数据"><a href="#发送视频数据" class="headerlink" title="发送视频数据"></a>发送视频数据</h2><h3 id="发送-AVC-sequence-header"><a href="#发送-AVC-sequence-header" class="headerlink" title="发送 AVC sequence header"></a>发送 AVC sequence header</h3><h4 id="VideoTagHeader"><a href="#VideoTagHeader" class="headerlink" title="VideoTagHeader"></a>VideoTagHeader</h4><p>4位的<code>Frame Type</code>，用1代表关键帧(针对的是AVC，也就是H.264)<br>4位的<code>CodecID</code>，用7代表<code>AVC</code><br>8位的<code>AVCPacketType</code>，用0代表<code>AVC sequence header</code><br>24位的<code>CompositionTime</code>，取0</p><p>因此，这5个字节固定如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>x17<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>x00;<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>x00;<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>x00;<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>x00;<br></code></pre></td></tr></table></figure><h4 id="VideoTagBody"><a href="#VideoTagBody" class="headerlink" title="VideoTagBody"></a>VideoTagBody</h4><p>对于<code>AVC sequence header</code>，其<code>VideoTagBody</code>就是<code>AVCDecoderConfigurationRecord</code>：</p><h4 id="AVCDecoderConfigurationRecord"><a href="#AVCDecoderConfigurationRecord" class="headerlink" title="AVCDecoderConfigurationRecord"></a>AVCDecoderConfigurationRecord</h4><p><img src="/images/media/2022/08/993656170.jpg" alt="16501671529588.jpg"></p><p><img src="/images/media/2022/08/736797064.jpg" alt="16501841859406.jpg"></p><p><img src="/images/media/2022/08/1608131731.jpg" alt="16501844303302.jpg"></p><h5 id="计算AVCDecoderConfigurationRecord"><a href="#计算AVCDecoderConfigurationRecord" class="headerlink" title="计算AVCDecoderConfigurationRecord"></a>计算AVCDecoderConfigurationRecord</h5><p><img src="/images/media/2022/08/1662889856.jpg" alt="16501826380761.jpg"></p><h3 id="发送-AVC-NALU"><a href="#发送-AVC-NALU" class="headerlink" title="发送 AVC NALU"></a>发送 AVC NALU</h3><h4 id="VideoTagHeader-1"><a href="#VideoTagHeader-1" class="headerlink" title="VideoTagHeader"></a>VideoTagHeader</h4><p>4位的<code>Frame Type</code>，用1代表关键帧，用2代表非关键帧(这两个值，针对的是AVC，也就是H.264)<br>4位的<code>CodecID</code>，用7代表<code>AVC</code><br>8位的<code>AVCPacketType</code>，用1代表<code>AVC NALU</code><br>24位的<code>CompositionTime</code>，取0</p><p>因此，这5个字节的计算公式如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span>[<span class="hljs-number">0</span>] = ((FrameType &amp; <span class="hljs-number">0</span>x0F) &lt;&lt; <span class="hljs-number">4</span>) | (CodecID &amp; <span class="hljs-number">0</span>x0F)<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>x01;<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>x00;<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>x00;<br><span class="hljs-attribute">byte</span>[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>x00;<br></code></pre></td></tr></table></figure><p>byte[0]要么是<code>0x17</code>，要么是<code>0x27</code></p><h4 id="VideoTagBody-1"><a href="#VideoTagBody-1" class="headerlink" title="VideoTagBody"></a>VideoTagBody</h4><p>对于<code>AVC NALU</code>，其<code>VideoTagBody</code>就是<code>One or more NALUs (Full frames are required)</code>，每个<code>NALU</code>的最前面，不需要<code>Start Code</code>，但需要加上<code>NumBytesInNALunit</code>（也就是<code>NALU</code>的长度）</p>]]></content>
    
    
    
    <tags>
      
      <tag>流媒体</tag>
      
      <tag>RTMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>慎用UILabel的preferredMaxLayoutWidth</title>
    <link href="/2022/08/01/%E6%85%8E%E7%94%A8UILabel%E7%9A%84preferredMaxLayoutWidth/"/>
    <url>/2022/08/01/%E6%85%8E%E7%94%A8UILabel%E7%9A%84preferredMaxLayoutWidth/</url>
    
    <content type="html"><![CDATA[<p>慎用<code>preferredMaxLayoutWidth</code>。建议使用宽度约束。</p><p>原因：使用<code>preferredMaxLayoutWidth</code>会导致<code>UILabel</code>的文字与其边缘没有间隙，导致其宽度并不与<code>preferredMaxLayoutWidth</code>一致，有可能导致其父视图的宽度与预想的不一致。</p><p><img src="/images/media/2022/08/1624598632.png" alt="qwerqwerasdfasdf.png"></p><p><img src="/images/media/2022/08/3805711405.png" alt="asdfhajsdkfljasdf.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift - 利用Codable进行JSON解析</title>
    <link href="/2022/05/07/Swift%20-%20%E5%88%A9%E7%94%A8Codable%E8%BF%9B%E8%A1%8CJSON%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/05/07/Swift%20-%20%E5%88%A9%E7%94%A8Codable%E8%BF%9B%E8%A1%8CJSON%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>针对常见的几种情况，进行总结。</p><h2 id="层次结构嵌套"><a href="#层次结构嵌套" class="headerlink" title="层次结构嵌套"></a>层次结构嵌套</h2><h4 id="模型与JSON层次结构对应时"><a href="#模型与JSON层次结构对应时" class="headerlink" title="模型与JSON层次结构对应时"></a>模型与JSON层次结构对应时</h4><p><code>JSON</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geometry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Point&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;coordinates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-number">-97.089200000000005</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-number">39.745600000000003</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span>: <span class="hljs-title class_">Codable</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Geometry</span>: <span class="hljs-title class_">Codable</span> &#123;<br>        <span class="hljs-keyword">var</span> type: <span class="hljs-type">String</span><br>        <span class="hljs-keyword">var</span> coordinates: [<span class="hljs-type">Double</span>]<br>    &#125;<br>    <span class="hljs-keyword">var</span> geometry: <span class="hljs-type">Geometry</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解析：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> jsonText.data(using: .utf8)<span class="hljs-operator">!</span><br>        <br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> entity <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">Entity</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>&#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="模型与JSON层次结构不对应时"><a href="#模型与JSON层次结构不对应时" class="headerlink" title="模型与JSON层次结构不对应时"></a>模型与JSON层次结构不对应时</h4><p><code>JSON</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geometry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Point&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;coordinates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-number">-97.089200000000005</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-number">39.745600000000003</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span>: <span class="hljs-title class_">Codable</span> &#123;<br>    <span class="hljs-keyword">var</span> type: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> coords: [<span class="hljs-type">Double</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>添加新的模型及相关的<code>extension</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">EntityWrapper</span>: <span class="hljs-title class_">Codable</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Geometry</span>: <span class="hljs-title class_">Codable</span> &#123;<br>        <span class="hljs-keyword">var</span> type: <span class="hljs-type">String</span><br>        <span class="hljs-keyword">var</span> coordinates: [<span class="hljs-type">Double</span>]<br>    &#125;<br>    <span class="hljs-keyword">var</span> geometry: <span class="hljs-type">Geometry</span><br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">EntityWrapper</span> &#123;<br>    <span class="hljs-keyword">var</span> entity: <span class="hljs-type">Entity</span> &#123;<br>        <span class="hljs-type">Entity</span>(<br>            type: geometry.type,<br>            coords: geometry.coordinates<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> jsonText.data(using: .utf8)<span class="hljs-operator">!</span><br>        <br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> wrapper <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">EntityWrapper</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-keyword">let</span> entity <span class="hljs-operator">=</span> wrapper.entity<br>    <span class="hljs-built_in">print</span>(entity)<br>&#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="不同格式的日期"><a href="#不同格式的日期" class="headerlink" title="不同格式的日期"></a>不同格式的日期</h2><p><code>JSON</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;birthday&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1908-07-16&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deathday&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1993/10/23&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span>: <span class="hljs-title class_">Codable</span> &#123;<br>    <span class="hljs-keyword">var</span> birthday: <span class="hljs-type">Date</span><br>    <span class="hljs-keyword">var</span> deathday: <span class="hljs-type">Date</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解析：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> jsonText.data(using: .utf8)<span class="hljs-operator">!</span><br><br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><span class="hljs-comment">// 自定义日期解码策略</span><br>decoder.dateDecodingStrategy <span class="hljs-operator">=</span> .custom(&#123; dec <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> container <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> dec.singleValueContainer()<br>    <span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> container.decode(<span class="hljs-type">String</span>.<span class="hljs-keyword">self</span>)<br>    <br>    <span class="hljs-keyword">let</span> df <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()<br>    <br>    df.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> date <span class="hljs-operator">=</span> df.date(from: text) &#123;<br>        <span class="hljs-keyword">return</span> date<br>    &#125;<br>    <br>    df.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy/MM/dd&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> date <span class="hljs-operator">=</span> df.date(from: text) &#123;<br>        <span class="hljs-keyword">return</span> date<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-type">Date</span>()<br>&#125;)<br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> entity <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">Entity</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-built_in">print</span>(entity)<br>&#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="Key、property使用不同的命名规则"><a href="#Key、property使用不同的命名规则" class="headerlink" title="Key、property使用不同的命名规则"></a>Key、property使用不同的命名规则</h2><p>指的是<code>JSON</code>与模型，一个使用<code>下划线命名法</code>，另一个使用<code>驼峰命名法</code></p><p><code>JSON</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;full_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bill Gates&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;USA&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span>: <span class="hljs-title class_">Codable</span> &#123;<br>    <span class="hljs-keyword">var</span> fullName: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> country: <span class="hljs-type">String</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解析：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> jsonText.data(using: .utf8)<span class="hljs-operator">!</span><br><br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><span class="hljs-comment">// 下划线命名法 ----&gt; 驼峰命名法</span><br>decoder.keyDecodingStrategy <span class="hljs-operator">=</span> .convertFromSnakeCase<br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> entity <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">Entity</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-built_in">print</span>(entity)<br>&#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="映射不同的Key和property"><a href="#映射不同的Key和property" class="headerlink" title="映射不同的Key和property"></a>映射不同的Key和property</h2><p><code>JSON</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Point&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;coordinates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>         <span class="hljs-number">-97.089200000000005</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">39.745600000000003</span><br>     <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Entity</span>: <span class="hljs-title class_">Codable</span> &#123;<br>    <span class="hljs-keyword">var</span> type: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> coords: [<span class="hljs-type">Double</span>]<br>    <br>    <span class="hljs-comment">// 建立映射关系</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> &#123;<br>        <span class="hljs-keyword">case</span> type<br>        <span class="hljs-keyword">case</span> coords <span class="hljs-operator">=</span> <span class="hljs-string">&quot;coordinates&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> jsonText.data(using: .utf8)<span class="hljs-operator">!</span><br><br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> entity <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">Entity</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-built_in">print</span>(entity)<br>&#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发中遇到的一些问题</title>
    <link href="/2022/04/10/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/10/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="UILabel使用attribute-string时，显示单行文字时，计算出的高度不太正常，底部会多出行间距（lineSpacing）；多行时，就是正常的。"><a href="#UILabel使用attribute-string时，显示单行文字时，计算出的高度不太正常，底部会多出行间距（lineSpacing）；多行时，就是正常的。" class="headerlink" title="UILabel使用attribute string时，显示单行文字时，计算出的高度不太正常，底部会多出行间距（lineSpacing）；多行时，就是正常的。"></a>UILabel使用attribute string时，显示单行文字时，计算出的高度不太正常，底部会多出行间距（<code>lineSpacing</code>）；多行时，就是正常的。</h2><p><strong>解决方法：</strong> 在attributes字典中，只在文字<strong>展示为多行</strong>的情况下设置<code>NSParagraphStyleAttributeName</code>。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSString</span> *text = <span class="hljs-string">@&quot;&lt;#…………#&gt;&quot;</span>;<br><br><span class="hljs-built_in">CGFloat</span> labelMaxWidth = DGScreenWidth - <span class="hljs-number">16</span> - <span class="hljs-number">16</span>;<br><span class="hljs-built_in">CGSize</span> maxSize = <span class="hljs-built_in">CGSizeMake</span>(labelMaxWidth, <span class="hljs-built_in">CGFLOAT_MAX</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 当文字展示为一行时，如果使用了NSParagraphStyle，底部会出现高度为lineSpacing的空白!!!</span><br><span class="hljs-comment"> 为了避免出现这种情况，不使用NSParagraphStyle就可以了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">NSMutableDictionary</span> *attrs = @&#123;<br>                               <span class="hljs-built_in">NSForegroundColorAttributeName</span>: kColor3D3D3D,<br>                               <span class="hljs-built_in">NSFontAttributeName</span>: [<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">16</span> weight:<span class="hljs-built_in">UIFontWeightMedium</span>],<br>                               &#125;.mutableCopy;<br><span class="hljs-built_in">CGFloat</span> singleLineHeight = [<span class="hljs-string">@&quot;中&quot;</span> boundingRectWithSize:maxSize options:<span class="hljs-built_in">NSStringDrawingUsesLineFragmentOrigin</span> attributes:attrs context:<span class="hljs-literal">nil</span>].size.height;<br><span class="hljs-built_in">CGFloat</span> totalLineHeight = [text boundingRectWithSize:maxSize options:<span class="hljs-built_in">NSStringDrawingUsesLineFragmentOrigin</span> attributes:attrs context:<span class="hljs-literal">nil</span>].size.height;<br><span class="hljs-type">BOOL</span> isSingleLine = ABS(totalLineHeight - singleLineHeight) &lt;= DBL_EPSILON;<br><span class="hljs-keyword">if</span> (!isSingleLine) &#123;<br>    <span class="hljs-built_in">NSMutableParagraphStyle</span> *paragraphStyle = [<span class="hljs-built_in">NSParagraphStyle</span> defaultParagraphStyle].mutableCopy;<br>    paragraphStyle.lineSpacing = <span class="hljs-number">10</span>;<br>    attrs[<span class="hljs-built_in">NSParagraphStyleAttributeName</span>] = paragraphStyle;<br>&#125;<br><span class="hljs-keyword">self</span>.textLabel.attributedText = [[<span class="hljs-built_in">NSAttributedString</span> alloc] initWithString:text attributes:attrs];<br></code></pre></td></tr></table></figure><h2 id="在Storyboard中使用了静态cell，cell包含auto-layout约束，关联了IBOutlet，然后设置其accessoryView，导致CPU使用率飚升，界面卡死"><a href="#在Storyboard中使用了静态cell，cell包含auto-layout约束，关联了IBOutlet，然后设置其accessoryView，导致CPU使用率飚升，界面卡死" class="headerlink" title="在Storyboard中使用了静态cell，cell包含auto layout约束，关联了IBOutlet，然后设置其accessoryView，导致CPU使用率飚升，界面卡死"></a>在Storyboard中使用了静态cell，cell包含auto layout约束，关联了IBOutlet，然后设置其<code>accessoryView</code>，导致CPU使用率飚升，界面卡死</h2><p><strong>解决方法：</strong> 不使用<code>accessoryView</code>，直接将对应的视图放在静态cell中，并添加相关的约束</p><h2 id="Terminating-app-due-to-uncaught-exception-39-NSInternalInconsistencyException-39-reason-39-UIViewController-loadViewFromNibNamed-bundle-loaded-the-quot-XXX-quot-nib-but-the-view-outlet-was-not-set-39"><a href="#Terminating-app-due-to-uncaught-exception-39-NSInternalInconsistencyException-39-reason-39-UIViewController-loadViewFromNibNamed-bundle-loaded-the-quot-XXX-quot-nib-but-the-view-outlet-was-not-set-39" class="headerlink" title="Terminating app due to uncaught exception &#39;NSInternalInconsistencyException&#39;, reason: &#39;-[UIViewController _loadViewFromNibNamed:bundle:] loaded the &quot;XXX&quot; nib but the view outlet was not set.&#39;"></a><code>Terminating app due to uncaught exception &#39;NSInternalInconsistencyException&#39;, reason: &#39;-[UIViewController _loadViewFromNibNamed:bundle:] loaded the &quot;XXX&quot; nib but the view outlet was not set.&#39;</code></h2><p><strong>解决方法：</strong> 在<code>xib</code>文件中添加一个<code>View</code>，而不是一个<code>ViewController</code>。<code>File&#39;s Owner</code>对应的<code>Class</code>应为<code>自定义视图控制器的Class</code></p><h2 id="控制台警告Setting-the-background-color-on-UITableViewHeaderFooterView-has-been-deprecated-Please-use-contentView-backgroundColor-instead"><a href="#控制台警告Setting-the-background-color-on-UITableViewHeaderFooterView-has-been-deprecated-Please-use-contentView-backgroundColor-instead" class="headerlink" title="控制台警告Setting the background color on UITableViewHeaderFooterView has been deprecated. Please use contentView.backgroundColor instead."></a>控制台警告<code>Setting the background color on UITableViewHeaderFooterView has been deprecated. Please use contentView.backgroundColor instead.</code></h2><p><strong>解决方法：</strong> 如果使用的是xib或storyboard，把<code>backgroudColor</code>设置为<code>default</code>就行了。<br>如果使用的是代码，将设置其<code>backgroundColor</code>的代码删掉。<br>如果必须设置<code>backgroundColor</code>，需要创建一个view，设置该view的<code>backgroundColor</code>，并将其赋给<code>backgroundView</code>属性。</p><h2 id="UITableView的tableHeaderView或tableFooterView位置不正确（与cell重叠）"><a href="#UITableView的tableHeaderView或tableFooterView位置不正确（与cell重叠）" class="headerlink" title="UITableView的tableHeaderView或tableFooterView位置不正确（与cell重叠）"></a><code>UITableView</code>的<code>tableHeaderView</code>或<code>tableFooterView</code>位置不正确（与<code>cell</code>重叠）</h2><p><strong>解决方法：</strong> 必须在给这两个属性赋值之前设置<code>frame</code>（设置<code>bounds</code>是不行的）。</p><p>如果是从<code>xib</code>创建视图，对象假定为<code>xibView</code>，必须<code>init</code>另一个视图，对象假定为<code>wrapView</code>，然后将<code>xibView</code>添加到<code>wrapView</code>上，再将<code>wrapView</code>赋给<code>tableHeaderView</code>或<code>tableFooterView</code>。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">XXXView *xibView = ViewFromNib(XXXView);<br><span class="hljs-built_in">CGSize</span> size = [xibView systemLayoutSizeFittingSize:<span class="hljs-built_in">CGSizeMake</span>(screenWidth, <span class="hljs-built_in">CGFLOAT_MAX</span>)];<br>xibView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, size.width, size.height);<br><span class="hljs-built_in">UIView</span> *wrapView = [[<span class="hljs-built_in">UIView</span> alloc] initWithFrame:xibView.bounds];<br>[wrapView addSubview:xibView];<br><span class="hljs-keyword">self</span>.tableView.tableHeaderView = wrapView;<br></code></pre></td></tr></table></figure><h2 id="自定义UITableViewHeaderFooterView背景色问题"><a href="#自定义UITableViewHeaderFooterView背景色问题" class="headerlink" title="自定义UITableViewHeaderFooterView背景色问题"></a>自定义UITableViewHeaderFooterView背景色问题</h2><p>自定义<code>UITableViewHeaderFooterView</code>，设置了其<code>contentView</code>的背景色，在不低于<code>iOS 10</code>的系统上是有效的，但在<code>iOS 8</code>、<code>iOS 9</code>上是透明的。</p><p>解决方案：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)awakeFromNib &#123;<br>    [<span class="hljs-variable language_">super</span> awakeFromNib];<br>    <br>    <span class="hljs-keyword">self</span>.contentView.backgroundColor = DGHexColor(<span class="hljs-number">0xf9f9f9</span>);<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     对于iOS 8、iOS 9，contentView会为nil，</span><br><span class="hljs-comment">     设置其背景色，会没有效果，但由于其 contentView 属性是 readonly 的，</span><br><span class="hljs-comment">     所以新建 backgroundView，并设置其背景色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (DGIOS8_0_0OrLater &amp;&amp; !DGIOS10_0_0OrLater) &#123;<br>        <span class="hljs-keyword">self</span>.backgroundView = [<span class="hljs-built_in">UIView</span> new];<br>        <span class="hljs-keyword">self</span>.backgroundView.backgroundColor = DGHexColor(<span class="hljs-number">0xf9f9f9</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用位逻辑运算实现位向量</title>
    <link href="/2022/03/12/%E4%BD%BF%E7%94%A8%E4%BD%8D%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E4%BD%8D%E5%90%91%E9%87%8F/"/>
    <url>/2022/03/12/%E4%BD%BF%E7%94%A8%E4%BD%8D%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E4%BD%8D%E5%90%91%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="使用位逻辑运算实现位向量"><a href="#使用位逻辑运算实现位向量" class="headerlink" title="使用位逻辑运算实现位向量"></a>使用位逻辑运算实现位向量</h1><blockquote><p>解答《编程珠玑》中相关习题时的一些思考。</p></blockquote><p>假定，我们需要使用<code>X</code>个类型为<code>type</code>的整数来创建一个至少包含<code>N</code>个比特位的位向量，那么，计算出的<code>X</code>就是：</p><p><code>int X = (int)ceil(N * 1.0 / (sizeof(type) * 8))</code></p><p>通过这些整数，形成一个数组，就能构建出了我们需要的位向量：</p><p><code>type bit_vector[X]</code></p><p>如果要对索引位置为<code>i</code>的比特位进行操作，就需要知道该比特位是哪个整数中的哪个比特位，因此需要处理两个小任务：</p><ol><li>查找整数</li><li>查找整数中的比特位</li></ol><p><img src="/images/media/2022/03/3196070986.jpg"></p><h2 id="查找整数"><a href="#查找整数" class="headerlink" title="查找整数"></a>查找整数</h2><p>查找整数，也即定位到该比特位所在的整数。</p><p>很明显，该整数在<code>bit_vector</code>中的索引<code>N</code>为：<code>i / st</code>，也即<code>i &gt;&gt; log2(st)</code></p><p>这里，我们将<code>log2(st)</code>记为<code>shift</code>：</p><p><code>shift = log2(st)</code></p><p>因此，<code>N = i &gt;&gt; shift</code>。</p><p>使用不同的整数类型时，所对应的<code>shift</code>如下：</p><table><thead><tr><th>整数类型</th><th>shift</th></tr></thead><tbody><tr><td>uint8_t</td><td>3</td></tr><tr><td>uint16_t</td><td>4</td></tr><tr><td>uint32_t</td><td>5</td></tr><tr><td>uint64_t</td><td>6</td></tr></tbody></table><h2 id="查找整数中的比特位"><a href="#查找整数中的比特位" class="headerlink" title="查找整数中的比特位"></a>查找整数中的比特位</h2><p>该比特位在整数<code>bit_vector[N]</code>中的索引是<code>i % st</code>，也即<code>i - (i / st * st)</code>，使用位逻辑运算就是<code>i - ((i &gt;&gt; log2(st)) &lt;&lt; log2(st))</code>，也即<code>i - ((i &gt;&gt; shift) &lt;&lt; shift)</code>。</p><p>其中的<code>(i &gt;&gt; shift) &lt;&lt; shift</code>，也就是将<code>i</code>的低<code>shift</code>位，置为<code>0</code>。示例：</p><p><img src="/images/media/2022/03/3156416306.gif"></p><p>所以，<code>i - ((i &gt;&gt; shift) &lt;&lt; shift)</code>就表示保留<code>i</code>的低<code>shift</code>位的值。示例：</p><p><img src="/images/media/2022/03/1462087019.jpg"></p><p>使用位逻辑运算实现低<code>shift</code>位的保留时，我们需要用到一个低<code>shift</code>位均为<code>1</code>而其他位均为<code>0</code>的整数，让其与<code>i</code>进行<code>&amp;</code>运算。</p><p>低<code>shift</code>位均为<code>1</code>而其他位均为<code>0</code>的整数，也即<code>((1 &lt;&lt; shift) - 1)</code>，我们将其记为<code>mask</code>：</p><p><code>mask = ((1 &lt;&lt; shift) - 1)</code></p><p><img src="/images/media/2022/03/1041208359.jpg"></p><p>使用<code>mask</code>实现低位保留：</p><p><img src="/images/media/2022/03/407013170.jpg"></p><p>前面提到<code>shift = log2(st)</code>，因此<code>((1 &lt;&lt; shift) - 1)</code>就是<code>st - 1</code>。</p><p>使用不同的整数类型时，所对应的<code>mask</code>如下：</p><table><thead><tr><th>整数类型</th><th>mask</th></tr></thead><tbody><tr><td>uint8_t</td><td>7（0x07）</td></tr><tr><td>uint16_t</td><td>15（0x0F）</td></tr><tr><td>uint32_t</td><td>31（0x1F）</td></tr><tr><td>uint64_t</td><td>63（0x3F）</td></tr></tbody></table><p>最终，该比特位在整数<code>bit_vector[i &gt;&gt; shift]</code>中的索引<code>i - ((i &gt;&gt; shift) &lt;&lt; shift)</code>可以用<code>i &amp; mask</code>表示：</p><p><img src="/images/media/2022/03/817914870.jpg"></p><p>当对位向量中索引为<code>i</code>的比特位进行设置、清除、测试时，就可以用<code>bit_vector[i &gt;&gt; shift]</code>与<code>(1 &lt;&lt; (i &amp; mask))</code>进行位逻辑运算实现这些操作。</p><p>设置：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bit_vector[i </span>&gt;&gt; <span class="hljs-keyword">shift] </span><span class="hljs-title">|= (1 &lt;&lt; (i &amp; mask))</span><br></code></pre></td></tr></table></figure><p>清除：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bit_vector<span class="hljs-selector-attr">[i &gt;&gt; shift]</span> &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-selector-tag">i</span> &amp; <span class="hljs-attribute">mask</span>))<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">bit_vector<span class="hljs-selector-attr">[i &gt;&gt; shift]</span> &amp; (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-selector-tag">i</span> &amp; <span class="hljs-attribute">mask</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第23章-图像处理</title>
    <link href="/2021/11/27/ffmpeg-cli/%E7%AC%AC23%E7%AB%A0-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2021/11/27/ffmpeg-cli/%E7%AC%AC23%E7%AB%A0-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>也即保存视频中某帧的画面。</p><h2 id="生成视频帧画面序列"><a href="#生成视频帧画面序列" class="headerlink" title="生成视频帧画面序列"></a>生成视频帧画面序列</h2><p><code>ffmpeg -i clip.avi frame%4d.jpg</code></p><h3 id="只导出特定类型的视频帧画面序列"><a href="#只导出特定类型的视频帧画面序列" class="headerlink" title="只导出特定类型的视频帧画面序列"></a>只导出特定类型的视频帧画面序列</h3><p>在<code>ffmpeg -h full</code>中，可以找到<code>-skip_frame</code>选项：</p><p><img src="/images/media/16751258504297.jpg"></p><p>只导出<code>关键帧</code>：</p><p><code>ffmpeg -skip_frame nokey -i clip.avi frame%4d.jpg</code></p><h2 id="生成-GIF"><a href="#生成-GIF" class="headerlink" title="生成 GIF"></a>生成 GIF</h2><p>实际上就是转码，给生成的文件加上<code>gif</code>后缀就可以了：</p><p><code>ffmpeg -i clip.avi clip.gif</code></p><h2 id="使用多张图片创建视频"><a href="#使用多张图片创建视频" class="headerlink" title="使用多张图片创建视频"></a>使用多张图片创建视频</h2><p>图片文件名格式一致且连续时：</p><p><code>ffmpeg -i frame%4d.jpg clip.avi</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第22章-改变播放速度</title>
    <link href="/2021/11/26/ffmpeg-cli/%E7%AC%AC22%E7%AB%A0-%E6%94%B9%E5%8F%98%E6%92%AD%E6%94%BE%E9%80%9F%E5%BA%A6/"/>
    <url>/2021/11/26/ffmpeg-cli/%E7%AC%AC22%E7%AB%A0-%E6%94%B9%E5%8F%98%E6%92%AD%E6%94%BE%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="改变播放速度"><a href="#改变播放速度" class="headerlink" title="改变播放速度"></a>改变播放速度</h1><p>改变视频帧播放速度，需要使用<code>setpts</code>滤镜</p><p>改变音频帧播放速度，需要使用<code>atempo</code>滤镜</p><p>如，修改为2倍速：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -filter_complex <span class="hljs-string">&quot;[0:v]setpts=expr=1.0/2*PTS;[0:a]atempo=tempo=2&quot;</span> output.mp4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第21章-截取特定部分</title>
    <link href="/2021/11/25/ffmpeg-cli/%E7%AC%AC21%E7%AB%A0-%E6%88%AA%E5%8F%96%E7%89%B9%E5%AE%9A%E9%83%A8%E5%88%86/"/>
    <url>/2021/11/25/ffmpeg-cli/%E7%AC%AC21%E7%AB%A0-%E6%88%AA%E5%8F%96%E7%89%B9%E5%AE%9A%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="截取特定部分"><a href="#截取特定部分" class="headerlink" title="截取特定部分"></a>截取特定部分</h1><p>根据第18章、第20章中介绍的内容，将<code>-ss</code>和<code>-t</code>选项结合在一起使用，就可以截取出特定的部分</p><p><code>ffmpeg -i input.mp4 -ss 3 -t 5 output.mp4</code></p><p><img src="/images/media/ffmpeg-ss-t.png" alt="ffmpeg-ss-t"></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第20章-设置起始时间</title>
    <link href="/2021/11/24/ffmpeg-cli/%E7%AC%AC20%E7%AB%A0-%E8%AE%BE%E7%BD%AE%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4/"/>
    <url>/2021/11/24/ffmpeg-cli/%E7%AC%AC20%E7%AB%A0-%E8%AE%BE%E7%BD%AE%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="设置起始时间"><a href="#设置起始时间" class="headerlink" title="设置起始时间"></a>设置起始时间</h1><p>假如有一个视频文件<code>input.mp4</code>，此时如果要得到另外一个视频文件<code>output.mp4</code>，但要求<code>output.mp4</code>中的画面是<code>input.mp4</code>中第<code>3</code>秒之后的画面，针对这种情况，需要使用<code>-ss</code>选项。</p><p><code>ffmpeg -i input.mp4 -ss 3 output.mp4</code></p><p><img src="/images/media/ffmpeg-ss.png" alt="ffmpeg-ss"></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第19章-设置帧数</title>
    <link href="/2021/11/23/ffmpeg-cli/%E7%AC%AC19%E7%AB%A0-%E8%AE%BE%E7%BD%AE%E5%B8%A7%E6%95%B0/"/>
    <url>/2021/11/23/ffmpeg-cli/%E7%AC%AC19%E7%AB%A0-%E8%AE%BE%E7%BD%AE%E5%B8%A7%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="设置帧数"><a href="#设置帧数" class="headerlink" title="设置帧数"></a>设置帧数</h1><p>针对音频帧，需要使用<code>-aframes</code>或<code>-frames:a</code>选项</p><p>针对音频帧，需要使用<code>-vframes</code>或<code>-frames:v</code>选项</p><p><code>ffmpeg -i input.mp4 -vframes 100 output.mp4</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第18章-设置时长</title>
    <link href="/2021/11/22/ffmpeg-cli/%E7%AC%AC18%E7%AB%A0-%E8%AE%BE%E7%BD%AE%E6%97%B6%E9%95%BF/"/>
    <url>/2021/11/22/ffmpeg-cli/%E7%AC%AC18%E7%AB%A0-%E8%AE%BE%E7%BD%AE%E6%97%B6%E9%95%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="设置时长"><a href="#设置时长" class="headerlink" title="设置时长"></a>设置时长</h1><p>将时长设置为指定的值，需要使用<code>-t</code>选项，后面的值，可以是一个十进制数字（单位为秒）也可以是<code>HH:MM:SS.m</code>或<code>S.m</code>格式的值（<code>HH</code>代表时，<code>MM</code>代表分，<code>SS</code>和<code>S</code>代表秒，<code>m</code>代表毫秒）</p><p><code>ffmpeg -i mandelbrot.mp4 -t 10.300 mandelbrot-10_3-seconds.mp4</code></p><p><img src="/images/media/ffmpeg-t.png" alt="ffmpeg-t"></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第17章-转码</title>
    <link href="/2021/11/21/ffmpeg-cli/%E7%AC%AC17%E7%AB%A0-%E8%BD%AC%E7%A0%81/"/>
    <url>/2021/11/21/ffmpeg-cli/%E7%AC%AC17%E7%AB%A0-%E8%BD%AC%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h1><p>对输入文件进行处理，并生成输出文件的过程，称为<strong>转码</strong>。</p><p>转码可以是这样：</p><ul><li>格式转换</li><li>只修改某些数据，同时保持文件格式不变</li></ul><p>转码过程可以被分成以下部分：</p><ol><li>解复用：使用<code>libavformat</code>中的解复用器，对输入文件进行处理，生成已编码的数据包</li><li>解码：使用解码器，将已编码的数据包进行解码，生成未压缩的帧</li><li>滤镜（可选）：使用滤镜对解码后的帧进行处理</li><li>编码：使用编码器，将未压缩的帧，编码为数据包</li><li>复用：使用复用器，将数据包封装为所选择的媒体格式</li></ol><blockquote><p>解复用器，会基于输入文件的扩展名进行自动选择<br>如果没有指定所使用的编码器、复用器，则会基于输出文件的扩展名进行自动选择</p></blockquote><p><strong>编解码器</strong>(<code>codec</code>)这个名字，源自<strong>编码器</strong>(取<code>coder</code>中的<code>co</code>)和<strong>解码器</strong>(取<code>decoder</code>中的<code>dec</code>)。</p><p>在命令行中指定编解码器，需要使用<code>-c</code>或<code>-codec</code>选项，其语法如下：</p><p><code>-c 编解码器名称</code>或<code>-codec 编解码器名称</code></p><p>转码时，如果要保持编解码器不变，可以使用<code>-c copy</code>、<code>-codec copy</code>。</p><p>如果要保持音频编解码器不变，可以使用<code>-c:a copy</code>、<code>-codec:a copy</code>。</p><p>如果要保持视频编解码器不变，可以使用<code>-c:v copy</code>、<code>-codec:v copy</code>。</p><p><code>ffmpeg -i input.mp4 -c copy output.flv</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第16章-采集</title>
    <link href="/2021/11/20/ffmpeg-cli/%E7%AC%AC16%E7%AB%A0-%E9%87%87%E9%9B%86/"/>
    <url>/2021/11/20/ffmpeg-cli/%E7%AC%AC16%E7%AB%A0-%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h1><p>采集包括录屏、录音、使用摄像头捕获画面。</p><h2 id="列出有哪些设备"><a href="#列出有哪些设备" class="headerlink" title="列出有哪些设备"></a>列出有哪些设备</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><code>ffmpeg -devices</code></p><p><img src="/images/media/16360762135795.jpg" alt="-w478"></p><p>列出<code>V4L2</code>可用的像素格式</p><p><code>ffmpeg -list_formats all -f v4l2 -i /dev/video0</code></p><p><img src="/images/media/16360760845257.jpg" alt="-w1179"><br><img src="/images/media/16360768819620.jpg" alt="-w789"></p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p><code>ffmpeg -devices</code></p><p><img src="/images/media/16360758692577.jpg" alt="-w531"></p><p>列出<code>avfoundation</code>可用的设备：</p><p><code>ffmpeg -list_devices true -f avfoundation -i &#39;&#39;</code></p><p><img src="/images/media/16360758004569.jpg" alt="-w739"><br><img src="/images/media/16360763022159.jpg" alt="-w673"></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><code>ffmpeg -devices</code></p><p><img src="/images/media/16360764417783.jpg" alt="-w478"></p><p><code>ffmpeg -list_devices true -f dshow -i &#39;&#39;</code></p><p><img src="/images/media/16360766865227.jpg" alt="-w1324"><br><img src="/images/media/16360767852515.jpg" alt="-w1401"></p><h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -f x11grab \<br>       -i :0.0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f x11grab \<br>       -i :0.0 \<br>       out.mp4<br></code></pre></td></tr></table></figure><h3 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -f avfoundation \<br>       -pixel_format nv12 \<br>       -probesize 10M \<br>       -i <span class="hljs-string">&#x27;Capture screen 0&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f avfoundation \<br>       -pixel_format nv12 \<br>       -probesize 10M \<br>       -i <span class="hljs-string">&#x27;Capture screen 0&#x27;</span> \<br>       out.mp4<br></code></pre></td></tr></table></figure><blockquote><p>不加入<code>-probesize</code>选项，会出现警告：<code>not enough frames to estimate rate; consider increasing probesize</code></p></blockquote><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -f gdigrab \<br>       -probesize 10M \<br>       -i desktop<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f gdigrab \<br>       -probesize 10M \<br>       -i desktop \<br>       out.mp4<br></code></pre></td></tr></table></figure><h2 id="采集摄像头画面-amp-采集声音"><a href="#采集摄像头画面-amp-采集声音" class="headerlink" title="采集摄像头画面 &amp; 采集声音"></a>采集摄像头画面 &amp; 采集声音</h2><h3 id="Linux-2"><a href="#Linux-2" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -f v4l2 \<br>       -framerate 24 \<br>       -video_size 640x480 \<br>       -i /dev/video0 \<br>       -f alsa \<br>       -i default<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f v4l2 \<br>       -framerate 24 \<br>       -video_size 640x480 \<br>       -i /dev/video0 \<br>       -f alsa \<br>       -i default \<br>       out.mp4<br></code></pre></td></tr></table></figure><h3 id="macOS-2"><a href="#macOS-2" class="headerlink" title="macOS"></a>macOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -f avfoundation \<br>       -video_size 640x480 \<br>       -framerate 30 \<br>       -pixel_format nv12 \<br>       -i <span class="hljs-string">&#x27;FaceTime高清摄像头（内建）:外置麦克风&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f avfoundation \<br>       -video_size 640x480 \<br>       -framerate 30 \<br>       -pixel_format nv12 \<br>       -i <span class="hljs-string">&#x27;FaceTime高清摄像头（内建）:外置麦克风&#x27;</span> \<br>       out.mp4<br></code></pre></td></tr></table></figure><h3 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -rtbufsize 256M \<br>       -f dshow \<br>       -i <span class="hljs-string">&quot;video=VMware Virtual USB Video Device:audio=Microphone (High Definition Audio Device)&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -rtbufsize 256M \<br>       -f dshow \<br>       -i <span class="hljs-string">&quot;video=VMware Virtual USB Video Device:audio=Microphone (High Definition Audio Device)&quot;</span> \<br>       out.mp4<br></code></pre></td></tr></table></figure><blockquote><p>不加入<code>-rtbufsize</code>选项，可能会出现这样的警告信息：<code>real-time buffer [XXX XXX XXX] [video input] too full or near too full (80% of size: 3041280 [rtbufsize parameter])! frame dropped!</code>，将其设置为较大的值就可以解决</p></blockquote><h2 id="实战：采集视频，添加旋转的水印（徽标），并播放"><a href="#实战：采集视频，添加旋转的水印（徽标），并播放" class="headerlink" title="实战：采集视频，添加旋转的水印（徽标），并播放"></a>实战：采集视频，添加旋转的水印（徽标），并播放</h2><h3 id="Linux-3"><a href="#Linux-3" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f v4l2 \<br>       -framerate 24 \<br>       -video_size 640x480 \<br>       -i /dev/video0 \<br>       -loop <span class="hljs-literal">true</span> \<br>       -i linux-logo-64.png \<br>       -filter_complex <span class="hljs-string">&quot;[1:v]format=pix_fmts=rgba,rotate=PI/6*t:ow=hypot(iw\,ih):oh=ow:c=0x00000000[logo];[0:v][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot;</span> \<br>       -pix_fmt yuv420p \<br>       -f sdl \<br>       <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f lavfi \<br>       -i testsrc \<br>       -loop <span class="hljs-literal">true</span> \<br>       -i linux-logo-64.png \<br>       -filter_complex <span class="hljs-string">&quot;[1:v]format=pix_fmts=rgba,rotate=PI/6*t:ow=hypot(iw\,ih):oh=ow:c=0x00000000[logo];[0:v][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot;</span> \<br>       -pix_fmt yuv420p \<br>       -f sdl \<br>       <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="macOS-3"><a href="#macOS-3" class="headerlink" title="macOS"></a>macOS</h3><h4 id="loop-选项"><a href="#loop-选项" class="headerlink" title="-loop 选项"></a>-loop 选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f avfoundation \<br>       -video_size 640x480 \<br>       -framerate 30 \<br>       -pixel_format nv12 \<br>       -i 1 \<br>       -loop <span class="hljs-literal">true</span> \<br>       -i linux-logo-64.png \<br>       -filter_complex <span class="hljs-string">&quot;[1:v]format=pix_fmts=rgba,rotate=PI/6*t:ow=hypot(iw\,ih):oh=ow:c=0x00000000[logo];[0:v][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot;</span> \<br>       -pix_fmt yuv420p \<br>       -f sdl \<br>       <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="loop-滤镜"><a href="#loop-滤镜" class="headerlink" title="loop 滤镜"></a>loop 滤镜</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -f avfoundation \<br>       -video_size 640x480 \<br>       -framerate 30 \<br>       -pixel_format nv12 \<br>       -i 1 \<br>       -vf <span class="hljs-string">&quot;movie=filename=linux-logo-64.png,loop=loop=-1:size=1,format=pix_fmts=rgba,rotate=a=PI/6*t:ow=hypot(iw\,ih):oh=ow:c=0x00000000[logo],[in][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot;</span> \<br>       -pix_fmt yuv420p \<br>       -f sdl \<br>       <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Windows-3"><a href="#Windows-3" class="headerlink" title="Windows"></a>Windows</h3><h4 id="loop-滤镜-1"><a href="#loop-滤镜-1" class="headerlink" title="loop 滤镜"></a>loop 滤镜</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -rtbufsize 1024M \<br>       -f dshow \<br>       -i <span class="hljs-string">&quot;video=VMware Virtual USB Video Device&quot;</span> \<br>       -vf <span class="hljs-string">&quot;movie=filename=linux-logo-64.png,loop=loop=-1:size=1,format=rgba,rotate=a=PI/6*t:ow=hypot(iw\,ih):oh=ow:c=0x00000000[logo],[in][logo]overlay&quot;</span> \<br>       -pix_fmt yuv420p \<br>       -f sdl \<br>       <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>还记得在<code>第03章</code>提到的内容吗？在<code>Windows</code>中，输出文件名不能是空字符串，但可以是空白字符串：<code>-f sdl</code>后面的<code>&#39; &#39;</code>。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第15章-绘制文本</title>
    <link href="/2021/11/19/ffmpeg-cli/%E7%AC%AC15%E7%AB%A0-%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC/"/>
    <url>/2021/11/19/ffmpeg-cli/%E7%AC%AC15%E7%AB%A0-%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h1><h2 id="drawtext-滤镜"><a href="#drawtext-滤镜" class="headerlink" title="drawtext 滤镜"></a>drawtext 滤镜</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffplay -f lavfi \<br>       -i testsrc \<br>       -vf <span class="hljs-string">&quot;drawtext=fontfile=站酷庆科黄油体.ttf:text=&#x27;Hello world!&#x27;:fontsize=32:fontcolor=red:bordercolor=green:borderw=5:x=(sin(t)+1)*w/2:y=(cos(t)+1)*h/2&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i mandelbrot.mp4 \<br>       -vf <span class="hljs-string">&quot;drawtext=fontfile=站酷庆科黄油体.ttf:text=&#x27;Hello world!&#x27;:fontsize=64:fontcolor=red:bordercolor=green:borderw=5&quot;</span> \<br>       mandelbrot-drawtext.mp4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第14章-叠加</title>
    <link href="/2021/11/18/ffmpeg-cli/%E7%AC%AC14%E7%AB%A0-%E5%8F%A0%E5%8A%A0/"/>
    <url>/2021/11/18/ffmpeg-cli/%E7%AC%AC14%E7%AB%A0-%E5%8F%A0%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="叠加"><a href="#叠加" class="headerlink" title="叠加"></a>叠加</h1><p>叠加可实现的效果：</p><ul><li>画中画</li><li>图片水印</li></ul><h2 id="overlay-滤镜"><a href="#overlay-滤镜" class="headerlink" title="overlay 滤镜"></a>overlay 滤镜</h2><p>为视频添加旋转的水印（徽标），并生成新文件：</p><p><code>ffmpeg -i mandelbrot.mp4 -loop true -i linux-logo-64.png -filter_complex &quot;[1:v]format=pix_fmts=rgba,rotate=PI/6*t:c=0x00000000:ow=hypot(iw\,ih):oh=ow[logo];[0:v][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot; -t 10 mandelbrot-overlay.mp4</code></p><p><strong>注意！！！使用<code>testsrc</code>滤镜时，如果使用<code>ffmpeg</code>命令进行播放，则画面中的时间，不会一秒更新一次，很可能会很快就变化了。使用<code>ffplay</code>，就会严格按一秒一秒进行更新。</strong></p><p>添加静止的图片水印（徽标）：</p><p><code>ffplay -f lavfi -i testsrc -vf &quot;movie=filename=linux-logo-64.png[logo],[in][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot;</code></p><p>为测试视频添加旋转的水印（徽标）：</p><p><code>ffplay -f lavfi -i testsrc -vf &quot;movie=filename=linux-logo-64.png,loop=loop=-1:size=1,format=pix_fmts=rgba,rotate=a=PI/6*t:ow=hypot(iw\,ih):oh=ow:c=0x00000000[logo],[in][logo]overlay=x=(W-w)/2:y=(H-h)/2&quot;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第13章-降噪</title>
    <link href="/2021/11/17/ffmpeg-cli/%E7%AC%AC13%E7%AB%A0-%E9%99%8D%E5%99%AA/"/>
    <url>/2021/11/17/ffmpeg-cli/%E7%AC%AC13%E7%AB%A0-%E9%99%8D%E5%99%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h1><p>让对画面进行降噪，可以使用以下滤镜：</p><ul><li><code>atadenoise</code></li><li><code>bm3d</code></li><li><code>chromanr</code></li><li><code>dctdnoiz</code></li><li><code>fftdnoiz</code></li><li><code>hqdn3d</code></li><li><code>nlmeans</code></li><li><code>owdenoise</code></li><li><code>vaguedenoiser</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第12章-锐化</title>
    <link href="/2021/11/16/ffmpeg-cli/%E7%AC%AC12%E7%AB%A0-%E9%94%90%E5%8C%96/"/>
    <url>/2021/11/16/ffmpeg-cli/%E7%AC%AC12%E7%AB%A0-%E9%94%90%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="锐化"><a href="#锐化" class="headerlink" title="锐化"></a>锐化</h1><p>让画面锐化，需要使用<code>unsharp</code>滤镜。</p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第11章-模糊</title>
    <link href="/2021/11/15/ffmpeg-cli/%E7%AC%AC11%E7%AB%A0-%E6%A8%A1%E7%B3%8A/"/>
    <url>/2021/11/15/ffmpeg-cli/%E7%AC%AC11%E7%AB%A0-%E6%A8%A1%E7%B3%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h1><p>让画面模糊，可以使用以下滤镜：</p><ul><li><code>avgblur</code></li><li><code>boxblur</code></li><li><code>dblur</code></li><li><code>gblur</code></li><li><code>sab</code></li><li><code>smartblur</code></li><li><code>unsharp</code></li><li><code>yaepblur</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第10章-旋转画面</title>
    <link href="/2021/11/14/ffmpeg-cli/%E7%AC%AC10%E7%AB%A0-%E6%97%8B%E8%BD%AC%E7%94%BB%E9%9D%A2/"/>
    <url>/2021/11/14/ffmpeg-cli/%E7%AC%AC10%E7%AB%A0-%E6%97%8B%E8%BD%AC%E7%94%BB%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="旋转画面"><a href="#旋转画面" class="headerlink" title="旋转画面"></a>旋转画面</h1><p>旋转画面，可以使用以下滤镜：</p><ul><li>rotate</li><li>transpose</li></ul><h2 id="rotate-滤镜"><a href="#rotate-滤镜" class="headerlink" title="rotate 滤镜"></a>rotate 滤镜</h2><p>关于该滤镜的具体选项，可以通过<code>ffmpeg -h filter=rotate</code>进行查看。</p><p>顺时针旋转六分之一π弧度（30度）：</p><p><code>ffmpeg -i mandelbrot.mp4 -vf &quot;rotate=a=PI/6&quot; mandelbrot-rotate-30.mp4</code></p><table><thead><tr><th>原始</th><th>顺时针旋转30度</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-rotate-30.png" alt="mandelbrot-rotate-30-w320"></td></tr></tbody></table><p>顺时针旋转三分之一π弧度（60度）：</p><p><code>ffmpeg -i mandelbrot.mp4 -vf &quot;rotate=a=PI/3&quot; mandelbrot-rotate-60.mp4</code></p><table><thead><tr><th>原始</th><th>顺时针旋转60度</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-rotate-60.png" alt="mandelbrot-rotate-60-w320"></td></tr></tbody></table><h2 id="transpose-滤镜"><a href="#transpose-滤镜" class="headerlink" title="transpose 滤镜"></a>transpose 滤镜</h2><p>关于该滤镜的具体选项，可以通过<code>ffmpeg -h filter=transpose</code>进行查看。</p><p>顺时针旋转90度：</p><p><code>ffmpeg -i mandelbrot.mp4 -vf transpose=dir=clock mandelbrot-transpose-clock.mp4</code></p><table><thead><tr><th>原始</th><th>顺时针旋转90度</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-transpose-clock.png" alt="mandelbrot-transpose-clock-w240"></td></tr></tbody></table><p>顺时针旋转90度并垂直翻转：</p><p><code>ffmpeg -i mandelbrot.mp4 -vf transpose=dir=clock_flip mandelbrot-transpose-clock_flip.mp4</code></p><table><thead><tr><th>原始</th><th>顺时针旋转90度并垂直翻转</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-transpose-clock_flip.png" alt="mandelbrot-transpose-clock_flip-w240"></td></tr></tbody></table><p>逆时针旋转90度：</p><p><code>ffmpeg -i mandelbrot.mp4 -vf transpose=dir=cclock mandelbrot-transpose-cclock.mp4</code></p><table><thead><tr><th>原始</th><th>逆时针旋转90度</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-transpose-cclock.png" alt="mandelbrot-transpose-cclock-w240"></td></tr></tbody></table><p>逆时针旋转90度并垂直翻转：</p><p><code>ffmpeg -i mandelbrot.mp4 -vf transpose=dir=cclock_flip mandelbrot-transpose-cclock_flip.mp4</code></p><table><thead><tr><th>原始</th><th>逆时针旋转90度并垂直翻转</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-transpose-cclock_flip.png" alt="mandelbrot-transpose-cclock_flip-w240"></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第09章-翻转画面</title>
    <link href="/2021/11/13/ffmpeg-cli/%E7%AC%AC09%E7%AB%A0-%E7%BF%BB%E8%BD%AC%E7%94%BB%E9%9D%A2/"/>
    <url>/2021/11/13/ffmpeg-cli/%E7%AC%AC09%E7%AB%A0-%E7%BF%BB%E8%BD%AC%E7%94%BB%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="翻转画面"><a href="#翻转画面" class="headerlink" title="翻转画面"></a>翻转画面</h1><p>翻转画面，可以使用以下滤镜：</p><ul><li>hflip</li><li>vflip</li></ul><h2 id="hflip-滤镜"><a href="#hflip-滤镜" class="headerlink" title="hflip 滤镜"></a>hflip 滤镜</h2><p>水平翻转画面，需要使用<code>hflip</code>滤镜。</p><p><code>ffmpeg -i mandelbrot.mp4 -vf hflip mandelbrot-hflip.mp4</code></p><table><thead><tr><th>原始</th><th>水平翻转</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-hflip.png" alt="mandelbrot-hflip-w320"></td></tr></tbody></table><h2 id="vflip-滤镜"><a href="#vflip-滤镜" class="headerlink" title="vflip 滤镜"></a>vflip 滤镜</h2><p>垂直翻转画面，需要使用<code>vflip</code>滤镜。</p><p><code>ffmpeg -i mandelbrot.mp4 -vf vflip mandelbrot-vflip.mp4</code></p><table><thead><tr><th>原始</th><th>垂直翻转</th></tr></thead><tbody><tr><td><img src="/images/media/mandelbrot.png" alt="mandelbrot-w320"></td><td><img src="/images/media/mandelbrot-vflip.png" alt="mandelbrot-vflip-w320"></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第08章-裁剪画面</title>
    <link href="/2021/11/12/ffmpeg-cli/%E7%AC%AC08%E7%AB%A0-%E8%A3%81%E5%89%AA%E7%94%BB%E9%9D%A2/"/>
    <url>/2021/11/12/ffmpeg-cli/%E7%AC%AC08%E7%AB%A0-%E8%A3%81%E5%89%AA%E7%94%BB%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="裁剪画面"><a href="#裁剪画面" class="headerlink" title="裁剪画面"></a>裁剪画面</h1><p>裁剪画面，可以使用以下滤镜：</p><ul><li>crop</li><li>cropdetect</li></ul><h2 id="crop-滤镜"><a href="#crop-滤镜" class="headerlink" title="crop 滤镜"></a>crop 滤镜</h2><p>裁剪画面需要使用<code>crop</code>滤镜，关于该滤镜的具体选项，可以通过<code>ffmpeg -h filter=crop</code>进行查看。</p><p>比如，裁剪画面中心区域（这里，我们把裁剪后的宽高设置为原来的三分之一）：</p><p><code>ffmpeg -i 1.mp4 -vf crop=w=iw/3:h=ih/3 2.mp4</code></p><h2 id="cropdetect-滤镜"><a href="#cropdetect-滤镜" class="headerlink" title="cropdetect 滤镜"></a>cropdetect 滤镜</h2><p>关于该滤镜的具体选项，可以通过<code>ffmpeg -h filter=cropdetect</code>进行查看。</p><p><img src="/images/media/16346133104916.png" alt="16346133104916"></p><p>例如上面的画面，边缘有黑色区域，我们想要把黑色区域裁剪掉，就需要用到<code>cropdetect</code>滤镜，当然，边缘区域有可能并不是纯黑的，通常需要使用该滤镜的<code>limit</code>选项，用它指定一个阈值，低于该阈值的像素，就会被认定为黑色。</p><p><strong>使用<code>cropdetect</code>滤镜时，它会输出裁剪区域，随后我们可以使用输出的裁剪区域，把画面边缘的黑色区域裁剪掉。</strong></p><p>首先使用<code>cropdetect</code>滤镜，获取到裁剪区域：</p><p><code>ffmpeg -i 1.mp4 -vf cropdetect=limit=255 -vframes 10 2.mp4</code></p><p>运行命令后，输出信息中会有类似这样的信息</p><p><img src="/images/media/16346133104917.png" alt="-w1268"></p><p>当输出的<code>crop=?:?:?:?</code>稳定时（如，上图中的圈红部分），我们就可以用这个裁剪区域裁剪掉黑色区域了（注意，虽然在使用<code>cropdetect</code>滤镜时，指定了输出文件，但这个文件展示出来的画面还是保留着黑色区域的）。</p><p>使用得到的裁剪区域，裁剪掉画面边缘的黑色区域：</p><p><code>ffmpeg -i 1.mp4 -vf crop=720:256:0:232 -y 2.mp4</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第07章-填充画面</title>
    <link href="/2021/11/11/ffmpeg-cli/%E7%AC%AC07%E7%AB%A0-%E5%A1%AB%E5%85%85%E7%94%BB%E9%9D%A2/"/>
    <url>/2021/11/11/ffmpeg-cli/%E7%AC%AC07%E7%AB%A0-%E5%A1%AB%E5%85%85%E7%94%BB%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="填充画面"><a href="#填充画面" class="headerlink" title="填充画面"></a>填充画面</h1><p>填充画面，指的是在画面边缘添加额外的区域。</p><h2 id="pad-滤镜"><a href="#pad-滤镜" class="headerlink" title="pad 滤镜"></a>pad 滤镜</h2><p>填充画面需要用到<code>pad</code>滤镜。关于该滤镜的具体选项，可以通过<code>ffmpeg -h filter=pad</code>进行查看。</p><p>比如，在画面周围填充<code>40</code>像素，并把填充区域的颜色设置为粉红色：</p><p><code>ffmpeg -i 1.mp4 -vf &quot;pad=w=iw+40:h=ih+40:x=(ow-iw)/2:y=(oh-ih)/2:color=pink&quot; 2.mp4</code></p><p>注意，由于在滤镜选项中使用了表达式，所以需要为滤镜部分添加引号。表达式中的的<code>iw</code>、<code>ih</code>、<code>ow</code>、<code>oh</code>为滤镜内置变量，分别表示<code>输入宽度</code>、<code>输入高度</code>、<code>输出宽度</code>、<code>输出高度</code>。</p><p><img src="/images/media/85c1972105a007fed781510ab94146ab.png" alt="85c1972105a007fed781510ab94146ab"></p><p><img src="/images/media/efc737a13ec90f6fbf882ed40f93babc.png" alt="efc737a13ec90f6fbf882ed40f93babc"></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第06章-缩放画面</title>
    <link href="/2021/11/10/ffmpeg-cli/%E7%AC%AC06%E7%AB%A0-%E7%BC%A9%E6%94%BE%E7%94%BB%E9%9D%A2/"/>
    <url>/2021/11/10/ffmpeg-cli/%E7%AC%AC06%E7%AB%A0-%E7%BC%A9%E6%94%BE%E7%94%BB%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="缩放画面"><a href="#缩放画面" class="headerlink" title="缩放画面"></a>缩放画面</h1><p>缩放画面，可以使用<code>-s</code>选项，也可以使用相关的滤镜。</p><h2 id="s-选项"><a href="#s-选项" class="headerlink" title="-s 选项"></a>-s 选项</h2><p><code>-s</code>选项，用于指定画面宽高。</p><p>比如，使用文件<code>1.mp4</code>生成画面宽高为<code>320x240</code>的文件<code>2.mp4</code>：</p><p><code>ffmpeg -i 1.mp4 -s 320x240 2.mp4</code></p><h2 id="相关滤镜"><a href="#相关滤镜" class="headerlink" title="相关滤镜"></a>相关滤镜</h2><p>可对视频画面进行缩放的滤镜有：</p><ul><li><code>epx</code></li><li><code>hqx</code></li><li><code>scale</code></li><li><code>scale2ref</code></li><li><code>super2xsai</code></li><li><code>xbr</code></li></ul><p>使用<code>epx</code>滤镜，将视频画面宽高缩放为原来的<code>2</code>倍：</p><p><code>ffmpeg -i 1.mp4 -vf epx=n=2 2.mp4</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第05章-滤镜</title>
    <link href="/2021/11/09/ffmpeg-cli/%E7%AC%AC05%E7%AB%A0-%E6%BB%A4%E9%95%9C/"/>
    <url>/2021/11/09/ffmpeg-cli/%E7%AC%AC05%E7%AB%A0-%E6%BB%A4%E9%95%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="滤镜"><a href="#滤镜" class="headerlink" title="滤镜"></a>滤镜</h1><p>滤镜，位于输入之后、输出之前，视频滤镜使用<code>-vf</code>选项，音频滤镜则使用<code>-af</code>选项，复杂滤镜则可使用<code>-filter_complex</code>选项或<code>-lavfi</code>选项。</p><p>比如，使用<code>boxblur</code>滤镜，对画面进行模糊处理：</p><p><code>ffmpeg -f lavfi -i mandelbrot -vf boxblur=lr=8:cr=8 -f opengl &#39;&#39;</code></p><p>滤镜可能有很多参数，在为滤镜设置参数时，滤镜名后面需要有<code>=</code>，这个<code>=</code>后面跟随的就是参数名及其值，参数名与值之间也用<code>=</code>连接，不同的参数之间需要用<code>:</code>分割，以上面的命令为例，<code>boxblur=lr=8:cr=8</code>就是为<code>boxblur</code>设置了<code>lr</code>和<code>cr</code>两个参数。</p><p>当然，也可以省略参数名及其后面的<code>=</code>，此时，值会按顺序一一对应到参数上。</p><p><strong>语法规则：</strong></p><p><code>滤镜名=参数名1=值:参数名2=值:...参数名n=值</code></p><p><code>滤镜名=值:值:...值</code></p><h2 id="滤镜链"><a href="#滤镜链" class="headerlink" title="滤镜链"></a>滤镜链</h2><p>将多个滤镜通过<code>,</code>进行分割，就形成了滤镜链。</p><p><strong>语法规则：</strong><code>滤镜链=&quot;滤镜1,滤镜2,滤镜3;...滤镜n&quot;</code></p><h2 id="滤镜图"><a href="#滤镜图" class="headerlink" title="滤镜图"></a>滤镜图</h2><p>将多个滤镜链（注意，不是滤镜）通过<code>;</code>进行分割，就形成了滤镜图。</p><p><strong>语法规则：</strong><code>滤镜图=&quot;滤镜链1;滤镜链2;滤镜链3;...滤镜链n&quot;</code></p><h2 id="查看滤镜参数"><a href="#查看滤镜参数" class="headerlink" title="查看滤镜参数"></a>查看滤镜参数</h2><p>语法：<code>ffmpeg -h filter=滤镜名称</code></p><p>具体的示例：<code>ffmpeg -h filter=boxblur</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第04章-播放音视频文件</title>
    <link href="/2021/11/08/ffmpeg-cli/%E7%AC%AC04%E7%AB%A0-%E6%92%AD%E6%94%BE%E9%9F%B3%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/"/>
    <url>/2021/11/08/ffmpeg-cli/%E7%AC%AC04%E7%AB%A0-%E6%92%AD%E6%94%BE%E9%9F%B3%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="播放音视频"><a href="#播放音视频" class="headerlink" title="播放音视频"></a>播放音视频</h1><h2 id="使用ffmpeg命令播放声音"><a href="#使用ffmpeg命令播放声音" class="headerlink" title="使用ffmpeg命令播放声音"></a>使用ffmpeg命令播放声音</h2><p><code>ffmpeg -i 1.mp4 -f audiotoolbox &#39;&#39;</code></p><h2 id="使用ffmpeg命令播放视频"><a href="#使用ffmpeg命令播放视频" class="headerlink" title="使用ffmpeg命令播放视频"></a>使用ffmpeg命令播放视频</h2><p>使用<code>SDL</code>输出设备展示视频画面：</p><p><code>ffmpeg -i 1.mp4 -pix_fmt yuv420p -f sdl &#39;&#39;</code></p><p>使用<code>OpenGL</code>输出设备展示视频画面：</p><p><code>ffmpeg -i 1.mp4 -f opengl &#39;&#39;</code></p><h2 id="使用ffplay命令播放音视频"><a href="#使用ffplay命令播放音视频" class="headerlink" title="使用ffplay命令播放音视频"></a>使用ffplay命令播放音视频</h2><p>使用<code>ffmpeg</code>命令进行播放时，有一个很大的缺陷，就是声音和画面无法同时进行，<code>ffplay</code>命令就可以解决这个问题。</p><p><code>ffplay 1.mp4</code>或<code>ffplay -i 1.mp4</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第03章-播放测试音视频</title>
    <link href="/2021/11/07/ffmpeg-cli/%E7%AC%AC03%E7%AB%A0-%E6%92%AD%E6%94%BE%E6%B5%8B%E8%AF%95%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    <url>/2021/11/07/ffmpeg-cli/%E7%AC%AC03%E7%AB%A0-%E6%92%AD%E6%94%BE%E6%B5%8B%E8%AF%95%E9%9F%B3%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h1 id="播放测试音视频"><a href="#播放测试音视频" class="headerlink" title="播放测试音视频"></a>播放测试音视频</h1><h2 id="直接播放用于测试的音频（不保存为文件）"><a href="#直接播放用于测试的音频（不保存为文件）" class="headerlink" title="直接播放用于测试的音频（不保存为文件）"></a>直接播放用于测试的音频（不保存为文件）</h2><p><code>ffmpeg -f lavfi -i anoisesrc -f audiotoolbox &#39;&#39;</code></p><h2 id="直接播放用于测试的视频（不保存为文件）"><a href="#直接播放用于测试的视频（不保存为文件）" class="headerlink" title="直接播放用于测试的视频（不保存为文件）"></a>直接播放用于测试的视频（不保存为文件）</h2><p>使用<code>SDL</code>输出设备展示画面：</p><p><code>ffmpeg -f lavfi -i mandelbrot -pix_fmt yuv420p -f sdl &#39;&#39;</code></p><p><strong><code>SDL</code>输出设备只支持<code>yuv420p</code>像素格式，如果视频使用的像素格式不是<code>yuv420p</code>，那么就必须加入<code>-pix_fmt yuv420p</code>，否则将无法播放。因此，强烈建议，当使用<code>SDL</code>输出设备时，无论是什么视频，都在命令中加入<code>-pix_fmt yuv420p</code>，以保证可播放。</strong></p><p>使用<code>OpenGL</code>输出设备展示画面：</p><p><code>ffmpeg -f lavfi -i mandelbrot -f opengl &#39;&#39;</code></p><p><strong>注意</strong>，在上面的几个命令中，我们将输出文件设置为了<code>&#39;&#39;</code>（空字符串），这在<code>Linux</code>、<code>macOS</code>中是允许的；但在<code>Windows</code>中，输出文件不能是空字符串，但可以是空白字符串：<code>ffmpeg -f lavfi -i mandelbrot -pix_fmt yuv420p -f sdl &#39; &#39;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第02章-生成测试音视频</title>
    <link href="/2021/11/06/ffmpeg-cli/%E7%AC%AC02%E7%AB%A0-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    <url>/2021/11/06/ffmpeg-cli/%E7%AC%AC02%E7%AB%A0-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E9%9F%B3%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h1 id="生成测试音视频"><a href="#生成测试音视频" class="headerlink" title="生成测试音视频"></a>生成测试音视频</h1><p>要生成用于测试的音频文件或视频文件，我们需要使用<code>libavfilter</code>虚拟输入设备，也就是<code>lavfi</code>，当使用它时，输入文件（也就是<code>-i</code>选项）需要是一个<code>source</code>滤镜或<code>sink</code>滤镜。查看有哪些<code>source</code>滤镜或<code>sink</code>滤镜，可以通过<code>ffmpeg -filters</code>进行查询。</p><p>例如，下面这些滤镜可以用来生成用于测试的音频：</p><p><img src="/images/media/16345638372063.png" alt="-w1310"></p><p><code>ffmpeg -f lavfi -i anoisesrc anoisesrc.mp3</code></p><p>下面这些滤镜可以用来生成用于测试的视频：</p><p><img src="/images/media/16345638372064.png" alt="16345638372064"></p><p><code>ffmpeg -f lavfi -i mandelbrot mandelbrot.mp4</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第01章-帮助</title>
    <link href="/2021/11/05/ffmpeg-cli/%E7%AC%AC01%E7%AB%A0-%E5%B8%AE%E5%8A%A9/"/>
    <url>/2021/11/05/ffmpeg-cli/%E7%AC%AC01%E7%AB%A0-%E5%B8%AE%E5%8A%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="查看帮助信息-amp-查看具备的特性-amp-查看某个特性中包含的选项"><a href="#查看帮助信息-amp-查看具备的特性-amp-查看某个特性中包含的选项" class="headerlink" title="查看帮助信息 &amp; 查看具备的特性 &amp; 查看某个特性中包含的选项"></a>查看帮助信息 &amp; 查看具备的特性 &amp; 查看某个特性中包含的选项</h1><h2 id="查看帮助信息"><a href="#查看帮助信息" class="headerlink" title="查看帮助信息"></a>查看帮助信息</h2><p>查看基本的帮助信息：<code>ffmpeg -h</code></p><p>查看较长的帮助信息：<code>ffmpeg -h long</code></p><p>查看全面的帮助信息：<code>ffmpeg -h full</code></p><h2 id="查看具备的特性"><a href="#查看具备的特性" class="headerlink" title="查看具备的特性"></a>查看具备的特性</h2><table><thead><tr><th>具体的命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ffmpeg -decoders</code></td><td>查看具备的解码器</td></tr><tr><td><code>ffmpeg -encoders</code></td><td>查看具备的编码器</td></tr><tr><td><code>ffmpeg -demuxers</code></td><td>查看具备的解复用器</td></tr><tr><td><code>ffmpeg -muxers</code></td><td>查看具备的复用器</td></tr><tr><td><code>ffmpeg -filters</code></td><td>查看具备的滤镜</td></tr><tr><td><code>ffmpeg -bsfs</code></td><td>查看具备的比特流滤镜</td></tr><tr><td><code>ffmpeg -protocols</code></td><td>查看具备的协议</td></tr><tr><td><code>ffmpeg -formats</code></td><td>查看具备的音视频格式</td></tr><tr><td><code>ffmpeg -pix_fmts</code></td><td>查看具备的像素格式</td></tr><tr><td><code>ffmpeg -sample_fmts</code></td><td>查看具备的音频采样格式</td></tr><tr><td><code>ffmpeg -layouts</code></td><td>查看具备的声道布局</td></tr><tr><td><code>ffmpeg -devices</code></td><td>查看具备的设备</td></tr><tr><td><code>ffmpeg -codecs</code></td><td>查看具备的编解码器</td></tr><tr><td><code>ffmpeg -colors</code></td><td>查看具备的颜色</td></tr><tr><td><code>ffmpeg -hwaccels</code></td><td>查看具备的硬件加速方式</td></tr></tbody></table><h2 id="查看包含的选项"><a href="#查看包含的选项" class="headerlink" title="查看包含的选项"></a>查看包含的选项</h2><p>针对<code>decoder</code>、<code>encoder</code>、<code>demuxer</code>、<code>muxer</code>、<code>filter</code>、<code>bsf</code>、<code>protocol</code>，可以使用以下命令查看它们有哪些选项：</p><table><thead><tr><th>命令语法</th><th>示例</th></tr></thead><tbody><tr><td><code>ffmpeg -h decoder=解码器名称</code></td><td><code>ffmpeg -h decoder=flv</code></td></tr><tr><td><code>ffmpeg -h encoder=编码器名称</code></td><td><code>ffmpeg -h encoder=mpeg4</code></td></tr><tr><td><code>ffmpeg -h demuxer=解复用器名称</code></td><td><code>ffmpeg -h demuxer=mp4</code></td></tr><tr><td><code>ffmpeg -h muxer=复用器名称</code></td><td><code>ffmpeg -h muxer=mov</code></td></tr><tr><td><code>ffmpeg -h filter=滤镜名称</code></td><td><code>ffmpeg -h filter=smptebars</code></td></tr><tr><td><code>ffmpeg -h bsf=比特流滤镜名称</code></td><td><code>ffmpeg -h bsf=h264_metadata</code></td></tr><tr><td><code>ffmpeg -h protocol=协议名称</code></td><td><code>ffmpeg -h protocol=rtmp</code></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg-CLI</tag>
      
      <tag>FFmpeg命令行工具</tag>
      
      <tag>流媒体</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端控制转义序列</title>
    <link href="/2021/10/24/%E7%BB%88%E7%AB%AF%E6%8E%A7%E5%88%B6%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97/"/>
    <url>/2021/10/24/%E7%BB%88%E7%AB%AF%E6%8E%A7%E5%88%B6%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://www2.ccs.neu.edu/research/gpc/VonaUtils/vona/terminal/vtansi.htm">ANSI&#x2F;VT100 Terminal Control Escape Sequences</a></p></blockquote><h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> VT100_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_H</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * reference: https://www2.ccs.neu.edu/research/gpc/VonaUtils/vona/terminal/vtansi.htm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_CURSOR_UP_ONE_ROW   <span class="hljs-string">&quot;\033[A&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_ERASE_END_OF_LINE   <span class="hljs-string">&quot;\033[K&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_ERASE_START_OF_LINE <span class="hljs-string">&quot;\033[1K&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_ERASE_LINE          <span class="hljs-string">&quot;\033[2K&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_BLACK      <span class="hljs-string">&quot;\033[30m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_RED        <span class="hljs-string">&quot;\033[31m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_GREEN      <span class="hljs-string">&quot;\033[32m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_YELLOW     <span class="hljs-string">&quot;\033[33m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_BLUE       <span class="hljs-string">&quot;\033[34m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_MAGENTA    <span class="hljs-string">&quot;\033[35m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_CYAN       <span class="hljs-string">&quot;\033[36m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_FG_COLOR_WHITE      <span class="hljs-string">&quot;\033[37m&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_BLACK      <span class="hljs-string">&quot;\033[40m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_RED        <span class="hljs-string">&quot;\033[41m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_GREEN      <span class="hljs-string">&quot;\033[42m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_YELLOW     <span class="hljs-string">&quot;\033[43m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_BLUE       <span class="hljs-string">&quot;\033[44m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_MAGENTA    <span class="hljs-string">&quot;\033[45m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_CYAN       <span class="hljs-string">&quot;\033[46m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_BG_COLOR_WHITE      <span class="hljs-string">&quot;\033[47m&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VT100_RESET_ALL_ATTRS     <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//VT100_H</span></span><br></code></pre></td></tr></table></figure><h3 id="在终端中展示任务处理进度"><a href="#在终端中展示任务处理进度" class="headerlink" title="在终端中展示任务处理进度"></a>在终端中展示任务处理进度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;VT100.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NB_TASKS (200) <span class="hljs-comment">// 任务数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NB_HYPHEN (50) <span class="hljs-comment">// 进度条长度</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *argv[])</span> &#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">rqtp</span> =</span> &#123;<br>            .tv_sec = <span class="hljs-number">0</span>,<br>            .tv_nsec = <span class="hljs-number">100000000L</span>, <span class="hljs-comment">// 0.1 秒</span><br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= NB_TASKS; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;In progress: [&quot;</span>);<br>        <span class="hljs-type">int</span> progress = i * <span class="hljs-number">100</span> / NB_TASKS;<br>        <span class="hljs-type">int</span> n = progress * NB_HYPHEN / <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-built_in">printf</span>(VT100_FG_COLOR_GREEN <span class="hljs-string">&quot;#&quot;</span> VT100_RESET_ALL_ATTRS);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &lt; NB_HYPHEN; ++j) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;] &quot;</span> VT100_FG_COLOR_RED <span class="hljs-string">&quot;%3d%%&quot;</span> VT100_RESET_ALL_ATTRS <span class="hljs-string">&quot;\r\n&quot;</span>, progress);<br><br>        <span class="hljs-keyword">if</span> (NB_TASKS == i) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Task completed!\r\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        nanosleep(&amp;rqtp, <span class="hljs-literal">NULL</span>);<br><br>        <span class="hljs-built_in">printf</span>(VT100_CURSOR_UP_ONE_ROW VT100_ERASE_LINE);<br><br>        fflush(<span class="hljs-built_in">stdout</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>细说如何完美实现macOS中的神奇效果</title>
    <link href="/2021/07/27/%E7%BB%86%E8%AF%B4%E5%A6%82%E4%BD%95%E5%AE%8C%E7%BE%8E%E5%AE%9E%E7%8E%B0macOS%E4%B8%AD%E7%9A%84%E7%A5%9E%E5%A5%87%E6%95%88%E6%9E%9C/"/>
    <url>/2021/07/27/%E7%BB%86%E8%AF%B4%E5%A6%82%E4%BD%95%E5%AE%8C%E7%BE%8E%E5%AE%9E%E7%8E%B0macOS%E4%B8%AD%E7%9A%84%E7%A5%9E%E5%A5%87%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="细说如何完美实现macOS中的神奇效果"><a href="#细说如何完美实现macOS中的神奇效果" class="headerlink" title="细说如何完美实现macOS中的神奇效果"></a>细说如何完美实现macOS中的神奇效果</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>神奇效果运行时，窗口的底部先逐渐收窄，收窄到一定程度后，窗口开始向下吸收。</p><h3 id="底部收窄"><a href="#底部收窄" class="headerlink" title="底部收窄"></a>底部收窄</h3><p><img src="/images/media/2021/07/607201103.jpg" alt="16381910486690.jpg"></p><p>在这个过程中，左右两侧会出现曲线，随着时间的推移，曲线的形变程度越来越大，直到最终停止形变。窗口始终被限制在两侧曲线之间。</p><h3 id="向下吸收"><a href="#向下吸收" class="headerlink" title="向下吸收"></a>向下吸收</h3><p><img src="/images/media/2021/07/2880517622.jpg" alt="16381911701492.jpg"></p><p>在这个过程中，窗口向下进行运动，逐渐消失。和底部收窄一样，窗口也是始终被限制在两侧曲线之间。</p><h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><p>底部收窄的过程，是两侧曲线的演变过程。两侧的曲线可以用正弦曲线或余弦曲线表示。这里只拿正弦曲线进行说明。</p><h3 id="周期函数回顾"><a href="#周期函数回顾" class="headerlink" title="周期函数回顾"></a>周期函数回顾</h3><p>先回顾一下在中学时期所学的周期函数，对于<code>A * sin(B * (x + C)) + D</code>来说，可以得出以下信息：</p><ul><li>振幅为<code>A</code></li><li>周期为<code>2π / B</code></li><li>相移为<code>−C</code></li><li>垂直移位为<code>D</code></li><li>值域为<code>[D - A, D + A]</code></li></ul><p>根据上面的内容，对于值域为<code>[MIN, MAX]</code>的周期函数，我们很容易得到以下公式：</p><ul><li><code>D - A = MIN</code></li><li><code>D + A = MAX</code></li></ul><p><code>sin(x)</code>的曲线：</p><p><img src="/images/media/2021/07/719375303.jpg"></p><h3 id="推导所需周期函数"><a href="#推导所需周期函数" class="headerlink" title="推导所需周期函数"></a>推导所需周期函数</h3><p>为了方便理解，先把<strong>神奇效果</strong>放到坐标系中，这里使用纹理坐标。</p><p><img src="/images/media/2021/07/514640614.jpg"></p><p>很明显，<code>p1</code>和<code>p2</code>这两个点的<code>x</code>坐标值就是曲线在<code>x</code>轴上的最小值与最大值。为了让曲线不断演变，就需要将<code>p1</code>点的位置固定在<code>(0, 1)</code>，而让<code>p2</code>点的<code>x</code>坐标一直向右移动，其<code>y</code>坐标保持为<code>0</code>，也就是说，我们需要通过这两个点的<code>x</code>坐标值（对应周期函数值域的最小值与最大值），得到对应的曲线。</p><p>可以看出：</p><ol><li><code>x</code>从最小值变成最大值的过程中，<code>y</code>只改变了<code>1</code></li><li><code>y</code>为<code>0</code>时，曲线的<code>x</code>值最大</li><li><code>y</code>为<code>1</code>时，曲线的<code>x</code>值最小</li></ol><p>因此，我们所需要的是一个周期为<code>2</code>（最小值变成最大值，需要半个周期）、相移为<code>-0.5</code>（周期除以4，然后减去对称轴的x，最后取负）、值域最小值为<code>0</code>的周期函数（此时的<code>A</code>和<code>D</code>相同）：</p><p><code>A * sin(π * x + π * 0.5) + A</code>或<code>D * sin(π * x + π * 0.5) + D</code></p><p>比如：</p><p><img src="/images/media/2021/07/3521273609.jpg"></p><p>当然，上面得到的函数，其<code>y</code>值是根据<code>x</code>值的变化而变化的，而<strong>神奇效果</strong>中使用的函数，其<code>x</code>值是根据<code>y</code>值的变化而变化的（当然，也可以将<code>程序坞</code>放置到左侧或右侧，这样就是<code>y</code>值根据<code>x</code>值的变化而变化）。</p><p>修改一下周期函数，将<code>x</code>修改为<code>y</code>：</p><p><code>A * sin(π * y + π * 0.5) + A</code>或<code>D * sin(π * y + π * 0.5) + D</code></p><p>然后，可以得到类似这样的曲线：</p><p><img src="/images/media/2021/07/2552768460.jpg"></p><p>当使用不同的值域最大值（也就是<code>D + A</code>，因为此时的<code>A</code>和<code>D</code>相同，最大值也是<code>2 * D</code>或<code>2 * A</code>）时，可以得到不同的曲线：</p><p><img src="/images/media/2021/07/2830519433.gif"></p><p>同理，我们可以得到右侧曲线所对应的周期函数：</p><p><code>A * sin(π * y - π * 0.5) + D</code></p><p>此时，<code>D + A = 1</code>。当使用不同的值域最小值（也就是<code>D - A</code>）时，也可以得到不同的曲线：</p><p><img src="/images/media/2021/07/1226697885.gif"></p><p>得到左右两侧曲线对应的函数后，就能很方便地实现神奇效果中的底部收缩了。</p><h3 id="底部收缩"><a href="#底部收缩" class="headerlink" title="底部收缩"></a>底部收缩</h3><p>假如底部收缩的持续时间为<code>curve_animation_duration</code>，左侧曲线最终的值域最大值为<code>left_max_end</code>，右侧曲线最终的值域最小值为<code>right_min_end</code>，那么，根据时间（<code>u_time</code>）的不断增加，可以得到曲线演变的进度：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">float</span> curve_animation_progress = clamp(u_time / curve_animation_duration, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>根据曲线演变进度，可以得到当前左侧曲线的值域最大值和当前右侧曲线的值域最小值：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">float left_max <span class="hljs-operator">=</span> curve_animation_progress * left_max_end<span class="hljs-comment">;</span><br>float right_min <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span> - curve_animation_progress * (<span class="hljs-number">1.0</span> - right_min_end)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>进而计算出左右曲线各自的<code>A</code>、<code>D</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 左侧曲线：A * sin(π * y + π * 0.5) + D</span><br><span class="hljs-comment">// D - A = 0</span><br><span class="hljs-comment">// D + A = max</span><br><span class="hljs-type">float</span> leftD = left_max / <span class="hljs-number">2.0</span>;<br><span class="hljs-type">float</span> leftA = leftD;<br><span class="hljs-type">float</span> left = leftA * <span class="hljs-built_in">sin</span>(pi * v_texcoord.y + pi * <span class="hljs-number">0.5</span>) + leftD;<br><br><span class="hljs-comment">// 右侧曲线：A * sin(π * y + π * 0.5) + D</span><br><span class="hljs-comment">// D - A = min</span><br><span class="hljs-comment">// D + A = 1</span><br><span class="hljs-type">float</span> rightD = (right_min + <span class="hljs-number">1.0</span>) / <span class="hljs-number">2.0</span>;<br><span class="hljs-type">float</span> rightA = <span class="hljs-number">1.0</span> - rightD;<br><span class="hljs-type">float</span> right = rightA * <span class="hljs-built_in">sin</span>(pi * v_texcoord.y - pi * <span class="hljs-number">0.5</span>) + rightD;<br></code></pre></td></tr></table></figure><p>使用这样的纹理图片：</p><p><img src="/images/media/2021/07/3990431119.png"></p><p>对其进行采样：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">gl_FragColor = texture2<span class="hljs-constructor">D(<span class="hljs-params">u_texture_0</span>, <span class="hljs-params">vec2</span>((<span class="hljs-params">v_texcoord</span>.<span class="hljs-params">x</span> - <span class="hljs-params">left</span>)</span><span class="hljs-operator"> / </span>(right - left), v_texcoord.y));<br><span class="hljs-comment">// 左右透明</span><br><span class="hljs-keyword">if</span> (v_texcoord.x &lt; left<span class="hljs-operator"> || </span>v_texcoord.x &gt; right) &#123;<br>    gl_FragColor = vec4(<span class="hljs-number">0.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>就可以得到这样的效果：</p><p><img src="/images/media/2021/07/3621187676.gif"></p><h3 id="向下吸收-1"><a href="#向下吸收-1" class="headerlink" title="向下吸收"></a>向下吸收</h3><p>假如向下吸收的持续时间为<code>translation_animation_duration</code>，那么向下吸收的进度就是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">float</span> translation_animation_progress = clamp((u_time - curve_animation_duration) / translation_animation_duration, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>向下移动：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-built_in">texture2D</span>(u_texture_0, <span class="hljs-type">vec2</span>((v_texcoord.x - left) / (right - left), v_texcoord.y + translation_animation_progress));<br><span class="hljs-comment">// 左右透明</span><br><span class="hljs-keyword">if</span> (v_texcoord.x &lt; left || v_texcoord.x &gt; right) &#123;<br>    <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-type">vec4</span>(<span class="hljs-number">0.0</span>);<br>&#125;<br><span class="hljs-comment">// 顶部透明</span><br><span class="hljs-keyword">if</span> (v_texcoord.y + translation_animation_progress &gt; <span class="hljs-number">1.0</span>) &#123;<br>    <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-type">vec4</span>(<span class="hljs-number">0.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最终效果：</p><p><img src="/images/media/2021/07/2575071596.gif"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p><strong>神奇效果</strong>还可以通过修改顶点来实现，不过，这种方式需要较多的顶点，才能让曲线足够光滑。</p><p>而通过修改采样时所使用的纹理坐标实现的<strong>神奇效果</strong>，不并需要那么多顶点。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>OpenGL</tag>
      
      <tag>GLSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QJson</title>
    <link href="/2020/07/02/QJson/"/>
    <url>/2020/07/02/QJson/</url>
    
    <content type="html"><![CDATA[<h1 id="QJson"><a href="#QJson" class="headerlink" title="QJson"></a>QJson</h1><p>在项目中使用<code>QJson</code>，最简单的方式就是将源码加入到项目中，本篇内容不讲这个，讲下在项目中使用<code>QJson</code>动态库。</p><p>步骤：</p><ol><li>下载<code>QJson</code>：<a href="https://github.com/flavio/qjson">https://github.com/flavio/qjson</a></li><li>使用<code>Qt Creator</code>编译<code>QJson</code></li><li>添加<code>QJson</code>头文件、动态库，并配置项目</li></ol><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>构建配置：</p><p><img src="/images/media/2020/07/4060856450.png" alt="build_run.png"></p><p>生成的动态库：</p><p><img src="/images/media/2020/07/955780053.png" alt="QJson_lib.png"></p><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>将<code>QJson</code>头文件、动态库添加到项目目录中：</p><p><img src="/images/media/2020/07/806181586.png" alt="QJson_tree.png"></p><p>修改项目配置文件<code>.pro</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">INCLUDEPATH += \<br>    $<span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/qjson/i</span>nclude<br><br>unix:LIBS += \<br>    -L$<span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/qjson/</span>lib \<br>    -lqjson-qt5<br></code></pre></td></tr></table></figure><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><h3 id="将JSON数据转换为QVariant"><a href="#将JSON数据转换为QVariant" class="headerlink" title="将JSON数据转换为QVariant"></a>将JSON数据转换为QVariant</h3><p><code>QJson::Parser::parse</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">QJson::<span class="hljs-keyword">Parser</span> <span class="hljs-keyword">parser</span>;<br><span class="hljs-type">bool</span> ok = <span class="hljs-keyword">false</span>;<br><br>QVariant variant = <span class="hljs-keyword">parser</span>.parse(jsonByteArray, &amp;ok);<br></code></pre></td></tr></table></figure><h3 id="将QVariant转换为JSON数据"><a href="#将QVariant转换为JSON数据" class="headerlink" title="将QVariant转换为JSON数据"></a>将QVariant转换为JSON数据</h3><p><code>QJson::Serializer::serialize</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QJson::Serializer serializer;<br><span class="hljs-type">bool</span> ok = <span class="hljs-literal">false</span>;<br><br>QByteArray jsonByteArray = serializer.<span class="hljs-built_in">serialize</span>(variant, &amp;ok);<br></code></pre></td></tr></table></figure><h3 id="将自定义模型转换为QVariant"><a href="#将自定义模型转换为QVariant" class="headerlink" title="将自定义模型转换为QVariant"></a>将自定义模型转换为QVariant</h3><p><code>QJson::QObjectHelper::qobject2qvariant</code></p><h3 id="将QVariant转换为自定义模型"><a href="#将QVariant转换为自定义模型" class="headerlink" title="将QVariant转换为自定义模型"></a>将QVariant转换为自定义模型</h3><p><code>QJson::QObjectHelper::qvariant2qobject</code></p><blockquote><p>要实现自定义模型与QVariant的互相转换，需要在自定义模型头文件中使用<code>Q_ENUMS</code>及<code>Q_PROPERTY</code></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GLKit实战 第03话 变换</title>
    <link href="/2020/01/30/GLKit%E5%AE%9E%E6%88%98%20%E7%AC%AC03%E8%AF%9D%20%E5%8F%98%E6%8D%A2/"/>
    <url>/2020/01/30/GLKit%E5%AE%9E%E6%88%98%20%E7%AC%AC03%E8%AF%9D%20%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>在第02话中，已经绘制出来了一个三角形，那么可能就会有以下的疑问：</p><ol><li>为什么三角形中相互垂直的两条边，长度不一致？</li><li>如何才能实现三角形中相互垂直的两条边长度一致？</li></ol><p>关于这些疑问，均受到顶点位置、模型视图矩阵、投影矩阵、视口的影响，因此，在解决问题之前，会对相关的理论知识进行说明。</p><blockquote><p>注：已将清除色设置为白色，glClearColor(1.0f, 1.0f, 1.0f, 1.0f);</p></blockquote><p>先上一张插图，展示的是第02话中绘制的三角形：</p><p>在这张插图中，已标注了x、y轴，两条垂直的边a和b，以及三角形顶点位置的坐标。</p><p><img src="/images/media/2020/01/475900835.png"></p><h2 id="坐标系统"><a href="#坐标系统" class="headerlink" title="坐标系统"></a>坐标系统</h2><p>我们使用的坐标系统是默认的笛卡尔坐标系统，它有如下特点：</p><ol><li>包含x、y、z三个坐标轴，且两两之间相互垂直。</li><li>x为横坐标轴，其正方向为从左到右。</li><li>y为纵坐标轴，其正方向为从下到上。</li><li>z为垂直于屏幕的坐标轴，其正方向为从屏幕下方到屏幕上方，指向用户。</li></ol><h2 id="视景体"><a href="#视景体" class="headerlink" title="视景体"></a>视景体</h2><p>视景体是一个六面体，用于框定最终可以渲染到屏幕上的物体。在后面的<code>投影变换</code>中，会更具体地进行说明。</p><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>视口是屏幕窗口中的某个区域，用于绘制视景体中的物体，也就是说，视景体最终会被映射到屏幕窗口中的某个区域，而这个区域，就是视口。</p><p>在视口中，坐标系统还有另外两个特点：</p><ol><li>在x、y、z三个方向上，范围均为[-1, 1]（注意，是闭区间，没有具体的单位，因此可以将其想象为毫米、分米、千米等）。</li><li>原点，也即坐标为(0, 0, 0)的位置，位于视口的中心。</li></ol><p>结合上面的插图，可能会问，原点不是位于屏幕的中心吗？下面就回答这个问题：</p><p>通常情况下，视口大小等同于窗口大小，而默认情况下，窗口大小又等同于屏幕大小（以像素为单位）。</p><p>上面的插图，就是视口大小等同于窗口大小，因此难免会有疑惑。</p><p>视口的位置及大小，可通过<code>glViewport</code>函数进行修改。</p><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>在物体呈现到屏幕的过程中，需要经历视图变换、模型变换、投影变换、视口变换。</p><p>视图变换相当于相机对准某个场景的过程，调整的是相机的位置及其对准的方向。</p><p>模型变换相当于对场景中的物体进行摆放的过程，调整的是场景中物体的位置、旋转角度等。</p><p>投影变换相当于调整相机镜头焦距并由胶卷将场景记录下来的过程，调整的是视角的大小、景深的大小。</p><p>视口变换相当于确定相片的最终大小的过程，最终打印出来的相片，可能是1吋的，也可能是8吋的。</p><p>视图变换、模型变换、投影变换，可以通过<code>GLKBaseEffect</code>的<code>transform</code>属性进行控制，更具体些，<code>transform</code>中的<code>modelviewMatrix</code>控制的是视图变换和模型变换，<code>projectionMatrix</code>控制的是投影变换。</p><p><img src="/images/media/2020/01/663457194.png" alt="GLKBaseEffect_transform.png"><br><img src="/images/media/2020/01/4068067736.png" alt="Transform_modelview_projection_matrix.png"></p><h3 id="模型视图变换"><a href="#模型视图变换" class="headerlink" title="模型视图变换"></a>模型视图变换</h3><p>用于将位置坐标从世界空间转换到视觉空间。</p><p><code>GLKBaseEffect</code>中<code>transform</code>的<code>modelviewMatrix</code>，默认是一个单位矩阵，也就意味着，观察点位于世界空间坐标原点，指向z轴的负方向，以y轴的正方向为朝上的方向。</p><p>默认情况下的视觉空间：</p><p><img src="/images/media/2020/01/2246313229.png"></p><p>通过<code>GLKMatrix4MakeLookAt</code>函数，可以直观地设置用于进行模型视图变换的矩阵。它用于设置观察点的位置、指定朝向哪个位置进行观看，以及朝上的方向。</p><p>函数原型如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">GLKMatrix4 GLKMatrix4MakeLookAt(<br>    <span class="hljs-built_in">float</span> eyeX, <span class="hljs-built_in">float</span> eyeY, <span class="hljs-built_in">float</span> eyeZ, <br>    <span class="hljs-built_in">float</span> centerX, <span class="hljs-built_in">float</span> centerY, <span class="hljs-built_in">float</span> centerZ, <br>    <span class="hljs-built_in">float</span> upX, <span class="hljs-built_in">float</span> upY, <span class="hljs-built_in">float</span> upZ<br>);<br></code></pre></td></tr></table></figure><p><code>eyeX</code>、<code>eyeY</code>、<code>eyeZ</code>，用于指定观察点的位置。</p><p><code>centerX</code>、<code>centerY</code>、<code>centerZ</code>，用于指定对准哪个位置进行观察，由于有了观察点的位置，因此也就指明了观察的朝向方向，也即沿着由<code>(eyeX, eyeY, eyeZ)</code>和<code>(centerX、centerY、centerZ)</code>所形成的直线进行观察，方向为从<code>(eyeX, eyeY, eyeZ)</code>到<code>(centerX、centerY、centerZ)</code>的方向。</p><p><code>upX</code>、<code>upY</code>、<code>upZ</code>，用于指定观察点朝上的方向。</p><p>注意，所指定的观察点的位置，是模型视图变换进行之前的位置，当变换结束后，观察点依旧位于原点（变换前后，所使用的空间，是不一样的）。</p><p>可以回顾一下中学物理知识，运动是相对的，当你朝着某个物体前进时，也就意味着物体朝向你前进。</p><p>由<code>GLKMatrix4MakeLookAt</code>生成的矩阵，最终是作用于物体的，并不是作用于观察点的。比如，<code>GLKMatrix4MakeLookAt(1, 0, 2, 1, 0, 0, 0, 1, 0)</code>，指定观察点位于<code>(1, 0, 2)</code>，被观看的位置是<code>(1, 0, 0)</code>，也就意味着，依旧是朝向z轴负方向进行观看，它所生成的矩阵如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span> 0<br><span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span> <span class="hljs-number"> 0 </span><span class="hljs-number"> 0 </span><br><span class="hljs-number"> 0 </span><span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span><br>-1 <span class="hljs-number"> 0 </span> -2  1<br></code></pre></td></tr></table></figure><p>应该已经注意到，第1列最后一行是<code>-1</code>，第3列最后一行是<code>-2</code>，它们分别表示，物体需要朝着x轴负方向平移1个单位，物体需要朝着z轴负方向平移2个单位。</p><p>如下图所示：</p><p><img src="/images/media/2020/01/2569996829.png"></p><p>很明显，那个立方体，朝着z轴负方向平移了2个单位，朝着x轴负方向平移了1个单位（此时的视觉空间，其坐标轴为图中的红色坐标轴）</p><h3 id="投影变换"><a href="#投影变换" class="headerlink" title="投影变换"></a>投影变换</h3><p>用于将位置坐标从视觉空间转换到投影空间。</p><p>通过投影矩阵，可以定义一个由6个平面包围着的空间区域，这就是视景体，位于视景体之外的部分，最终将会被忽略掉，不会呈现到最终的画面中。</p><p>投影可分为两种：</p><ol><li>正投影</li><li>透视投影</li></ol><h4 id="正投影"><a href="#正投影" class="headerlink" title="正投影"></a>正投影</h4><p>在正投影下，视景体是一个长方体，相交的平面是相互垂直的，相互平行的两个面是大小一致的，也就是说，视景体是正交平行的。当同一个物体完全处于视景体内，无论它位于哪个位置，最终看到的效果，物体大小都会完全一致。</p><p>正投影视景体：</p><p><img src="/images/media/2020/01/2339849155.png"></p><p>通过<code>GLKMatrix4MakeOrtho</code>函数，可以直观地设置用于正投影的矩阵。</p><p>函数原型：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">GLKMatrix4 GLKMatrix4MakeOrtho(<br>    <span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>, <span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>, <br>    <span class="hljs-attribute">float</span> <span class="hljs-attribute">bottom</span>, <span class="hljs-attribute">float</span> <span class="hljs-attribute">top</span>, <br>    <span class="hljs-attribute">float</span> nearZ, <span class="hljs-attribute">float</span> farZ<br>);<br></code></pre></td></tr></table></figure><p>这些参数，针对的是视觉空间。</p><p><code>left</code>、<code>right</code>指定视景体的左右范围，也就是左右两侧的平面在x轴上的位置。</p><p><code>top</code>、<code>bottom</code>指定视景体的上下范围，也就是上下两侧的平面在y轴上的位置。</p><p><code>nearZ</code>、<code>farZ</code>指定视景体的前后范围，也就是近平面、远平面在z轴上的位置。</p><p><code>GLKBaseEffect</code>中<code>transform</code>的<code>projectionMatrix</code>，默认是一个单位矩阵，因此也就会形成正投影，其左右上下前后范围分别是-1、1、1、-1、1、-1。</p><h4 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h4><p>类似于视觉感官，对于同一个物体，会产生近大远小的效果。当某个物体距离近平面较近、较远时，最终呈现的大小是不一样的，较近的会大一些，而较远的会小一些。</p><p>透视投影视景体（近平面与远平面是平行的，近平面的长宽小于远平面的长宽）：</p><p><img src="/images/media/2020/01/1505385922.png"></p><p>前面已经提到，<code>GLKBaseEffect</code>中<code>transform</code>的<code>projectionMatrix</code>，默认是一个单位矩阵，会形成正投影，如果想要产生透视投影，就需要改变<code>projectionMatrix</code>。</p><p>通过<code>GLKMatrix4MakeFrustum</code>、<code>GLKMatrix4MakePerspective</code>，可以直观地设置透视投影矩阵。</p><p>函数原型如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">GLKMatrix4 GLKMatrix4MakeFrustum(<br>    <span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>, <span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>, <br>    <span class="hljs-attribute">float</span> <span class="hljs-attribute">bottom</span>, <span class="hljs-attribute">float</span> <span class="hljs-attribute">top</span>, <br>    <span class="hljs-attribute">float</span> nearZ, <span class="hljs-attribute">float</span> farZ<br>);<br>GLKMatrix4 GLKMatrix4MakePerspective(<br>    <span class="hljs-attribute">float</span> fovyRadians, <span class="hljs-attribute">float</span> aspect, <br>    <span class="hljs-attribute">float</span> nearZ, <span class="hljs-attribute">float</span> farZ<br>);<br></code></pre></td></tr></table></figure><p>这些参数，针对的也是视觉空间。</p><p><strong>GLKMatrix4MakeFrustum：</strong></p><p><code>left</code>、<code>right</code>指定视景体近平面的左右范围，也就是近平面左右两侧在x轴上的位置。</p><p><code>top</code>、<code>bottom</code>指定视景体近平面的上下范围，也就是近平面上下两侧在y轴上的位置。</p><p><code>nearZ</code>指定视景体近平面与观察点之间的距离。</p><p><code>farZ</code>指定视景体远平面与观察点之间的距离。</p><p>其中，<code>nearZ</code>、<code>farZ</code>必须为正值，且<code>farZ</code>必须大于<code>nearZ</code>（实际上，可以小于<code>nearZ</code>，只要不相等就行。属于<code>GLKit</code>代码实现中的小瑕疵）。</p><p>虽然参数很好理解，但比起<code>GLKMatrix4MakePerspective</code>，在使用时，<code>GLKMatrix4MakeFrustum</code>并没有很直观，因此，在大多数情况下，使用的都是<code>GLKMatrix4MakePerspective</code>。</p><p><strong>GLKMatrix4MakePerspective：</strong></p><p><code>fovyRadians</code>指定在yz平面（由y轴和z轴所形成的平面）上的视野角度，单位为弧度。</p><p><code>aspect</code>指定视景体近平面的宽高比。</p><p><code>nearZ</code>、<code>farZ</code>，与<code>GLKMatrix4MakeFrustum</code>中的一样。</p><p>它所产生的视景体，总是上下对称、左右对称的（对称面分别为xz平面、yz平面）。因此，当需要产生上下不对称或左右不对称的视景体时，使用<code>GLKMatrix4MakeFrustum</code>会更便利。</p><h3 id="视口变换"><a href="#视口变换" class="headerlink" title="视口变换"></a>视口变换</h3><p>经过投影变换后，为了让物体展示到窗口之中，还需要进行视口变换。</p><p>之前讲视口时，已经提到过，其坐标系统的范围，在三个方向上均为[-1, 1]。</p><p>视口变换就是把视景体内的物体，映射到视口的过程。无论近平面有多大，经过映射后，其上的位置最终都会被限制在[-1, 1]之中。</p><p>将视景体映射到方形的视口中（插图中左侧的，是透过视景体近平面所看到的效果）：</p><p><img src="/images/media/2020/01/887370646.png"></p><p>将视景体映射到扁平的视口中，很明显，最终的效果发生了形变（插图中左侧的，是透过视景体近平面所看到的效果）：</p><p><img src="/images/media/2020/01/2585428102.png"></p><h2 id="处理疑惑"><a href="#处理疑惑" class="headerlink" title="处理疑惑"></a>处理疑惑</h2><p>结合第02话中的代码，以及上面的理论知识，就很容易理解，为什么三角形中相互垂直的两条边，长度是不一致的。</p><p>由于默认情况下，<code>GLKBaseEffect</code>中<code>transform</code>的<code>projectionMatrix</code>，是一个单位矩阵，会形成正投影，视景体的范围，在[-1, 1]之间。</p><p>第02话中的代码没有设置<code>projectionMatrix</code>，也就是使用的是默认值。</p><p>默认情况下，视口的大小，就是窗口的大小。在第02话中的代码中，没有通过调用<code>glViewport</code>来调整视口，因此视口也就是全屏的，其宽度与高度是不一致的。</p><p>因此形成了下面的映射：</p><p><img src="/images/media/2020/01/2701494795.png"></p><p>为了让最终的两条边的长度一致，可以采取以下处理方式（可任选其一）：</p><ol><li>直接调整顶点的位置。</li><li>调整模型视图矩阵，可以间接调整顶点的位置。</li><li>调整投影矩阵，让视景体近平面的宽高比，与视口的宽高比一致。</li><li>调整视口，使其与视景体近平面的宽高比一致。</li></ol><p>因为有4种选择，因此，先定义几个枚举值，以及一个属性，用于标记所采用的是哪种选择。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">typedef NS_ENUM(NSUInteger, TransformFlag) &#123;<br><span class="hljs-built_in">    TransformFlagDefault,</span><br><span class="hljs-built_in">    TransformFlagVertices,</span><br><span class="hljs-built_in">    TransformFlagModelviewMatrix,</span><br><span class="hljs-built_in">    TransformFlagProjectionMatrix,</span><br><span class="hljs-built_in">    TransformFlagViewport,</span><br><span class="hljs-built_in">    </span><br><span class="hljs-built_in">    TransformFlagNum,</span><br>&#125;<span class="hljs-comment">;</span><br><br>@property (nonatomic, assign) TransformFlag transformFlag<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="直接调整顶点位置"><a href="#直接调整顶点位置" class="headerlink" title="直接调整顶点位置"></a>直接调整顶点位置</h3><p>通过调整顶点位置，让经过投影变换（默认情况下是正投影）后的三角形：</p><ul><li>在竖直方向上扁一些（适用于视口宽度不大于高度的情况）</li><li>在水平方向上瘦一些（适用于视口宽度不小于高度的情况）</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">- (GLKVector3)_adjustPosition:(GLKVector3)position size:(CGSize)size &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-constructor">MIN(<span class="hljs-params">size</span>.<span class="hljs-params">width</span>, <span class="hljs-params">size</span>.<span class="hljs-params">height</span>)</span> &lt;= DBL_EPSILON) &#123;<br>        return position;<br>    &#125;<br>    <span class="hljs-built_in">float</span> aspect = size.width<span class="hljs-operator"> / </span>size.height;<br>    <span class="hljs-keyword">if</span> (aspect &lt; <span class="hljs-number">1</span>) &#123;<br>        return <span class="hljs-constructor">GLKVector3Make(<span class="hljs-params">position</span>.<span class="hljs-params">x</span>, <span class="hljs-params">position</span>.<span class="hljs-params">y</span> <span class="hljs-operator">*</span> <span class="hljs-params">aspect</span>, <span class="hljs-params">position</span>.<span class="hljs-params">z</span>)</span>;<br>    &#125;<br>    return <span class="hljs-constructor">GLKVector3Make(<span class="hljs-params">position</span>.<span class="hljs-params">x</span> <span class="hljs-operator">/</span> <span class="hljs-params">aspect</span>, <span class="hljs-params">position</span>.<span class="hljs-params">y</span>, <span class="hljs-params">position</span>.<span class="hljs-params">z</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/media/2020/01/3058349665.png"></p><p>插图中，红色虚线圈定的区域，就是修改了顶点位置后，所产生的三角形。</p><h3 id="调整模型视图矩阵"><a href="#调整模型视图矩阵" class="headerlink" title="调整模型视图矩阵"></a>调整模型视图矩阵</h3><p>直接调整顶点位置，需要对每个顶点进行手动调整，十分笨拙，如果顶点有很多，就更麻烦了。为了方便，可以通过调整<code>modelviewMatrix</code>达到间接调整顶点位置的目的：</p><ul><li>在竖直方向上缩小一些（适用于视口宽度不大于高度的情况）</li><li>在水平方向上缩小一些（适用于视口宽度不小于高度的情况）</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino">- (<span class="hljs-type">void</span>)_adjustModelviewMatrixIfNeeded:(CGSize)size &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">MIN</span>(size.width, size.height) &lt;= DBL_EPSILON) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (TransformFlagModelviewMatrix == self.transformFlag) &#123;<br>        <span class="hljs-type">float</span> aspect = size.width / size.height;<br>        <span class="hljs-keyword">if</span> (aspect &lt; <span class="hljs-number">1</span>) &#123;<br>            self.effect.transform.modelviewMatrix = <span class="hljs-built_in">GLKMatrix4Scale</span>(GLKMatrix4Identity, <span class="hljs-number">1</span>, aspect, <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            self.effect.transform.modelviewMatrix = <span class="hljs-built_in">GLKMatrix4Scale</span>(GLKMatrix4Identity, <span class="hljs-number">1</span> / aspect, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// reset to default value</span><br>        self.effect.transform.modelviewMatrix = GLKMatrix4Identity;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调整投影矩阵"><a href="#调整投影矩阵" class="headerlink" title="调整投影矩阵"></a>调整投影矩阵</h3><p>调整投影矩阵，让视景体近平面的宽高比，与视口的宽高比一致。</p><p>如果要使用正投影，那么需要：</p><ul><li>调整视景体的上下范围（适用于视口宽度不大于高度的情况）</li><li>调整视景体的左右范围（适用于视口宽度不小于高度的情况）</li></ul><p>如果要使用透视投影，就需要：</p><p>当使用<code>GLKMatrix4MakeFrustum</code>时，需要调整的东西和正投影一样，也是上下左右的范围。</p><p>当使用<code>GLKMatrix4MakePerspective</code>时，只需要调整宽高比。</p><p>当然，在调整视景体时，注意一定要确定物体处于视景体中，否则最终的画面可能会空空如也，因此，也可能需要调整<code>modelviewMatrix</code>。</p><p>为了简单起见，在代码中依旧使用正投影：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span> (TransformFlagProjectionMatrix == self.transformFlag) &#123;<br>    <span class="hljs-keyword">float</span> <span class="hljs-class"><span class="hljs-keyword">aspect</span> </span>= size.width / size.height;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-class"><span class="hljs-keyword">aspect</span> &lt; 1) </span>&#123;<br>        <span class="hljs-keyword">float</span> bottom = <span class="hljs-number">-1</span> / <span class="hljs-class"><span class="hljs-keyword">aspect</span></span>;<br>        <span class="hljs-keyword">float</span> top = <span class="hljs-number">1</span> / <span class="hljs-class"><span class="hljs-keyword">aspect</span></span>;<br>        self.effect.transform.projectionMatrix = GLKMatrix4MakeOrtho(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, bottom, top, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">float</span> left = <span class="hljs-number">-1</span> * <span class="hljs-class"><span class="hljs-keyword">aspect</span></span>;<br>        <span class="hljs-keyword">float</span> right = <span class="hljs-number">1</span> * <span class="hljs-class"><span class="hljs-keyword">aspect</span></span>;<br>        self.effect.transform.projectionMatrix = GLKMatrix4MakeOrtho(left, right, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// reset to default value</span><br>    self.effect.transform.projectionMatrix = GLKMatrix4Identity;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/media/2020/01/3288557059.png"></p><p>插图中，红色虚线圈定的区域，就是新设定的视景体近平面，它的宽高比，与视口的宽高比相同。</p><h3 id="调整视口"><a href="#调整视口" class="headerlink" title="调整视口"></a>调整视口</h3><p>调整视口，使其与视景体近平面的宽高比一致。</p><p>默认情况下，用的投影矩阵是单位矩阵，因此视景体近平面的宽高比为1（正投影视景体，范围为[-1, 1]，这已经在之前提到过）。</p><p>因此，只需将视口的宽高调整为大小一致即可：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">UIScreen *screen = <span class="hljs-literal">[UIS<span class="hljs-identifier">creen</span> <span class="hljs-identifier">mainScreen</span>]</span>;<br>CGFloat scale = <span class="hljs-literal">[<span class="hljs-identifier">screen</span> <span class="hljs-identifier">respondsToSelector</span>:@<span class="hljs-identifier">selector</span>(<span class="hljs-identifier">nativeScale</span>)]</span> ? screen.nativeScale : screen.scale;<br>CGFloat widthInPixel = size.width<span class="hljs-operator"> * </span>scale;<br>CGFloat heightInPixel = size.height<span class="hljs-operator"> * </span>scale;<br>    <br><span class="hljs-keyword">if</span> (TransformFlagViewport<span class="hljs-operator"> == </span>self.transformFlag) &#123;<br>    CGFloat wh = <span class="hljs-constructor">MIN(<span class="hljs-params">widthInPixel</span>, <span class="hljs-params">heightInPixel</span>)</span>;<br>    CGFloat x = (widthInPixel - wh)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>;<br>    CGFloat y = (heightInPixel - wh)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>;<br>    gl<span class="hljs-constructor">Viewport(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>, <span class="hljs-params">wh</span> , <span class="hljs-params">wh</span>)</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// reset to default value</span><br>    gl<span class="hljs-constructor">Viewport(0, 0, <span class="hljs-params">widthInPixel</span> , <span class="hljs-params">heightInPixel</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/media/2020/01/3081780709.png"></p><p>插图中，红色虚线圈定的区域，就是新设定的视口，它处于屏幕的中间区域，宽高相等。</p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/images/media/2020/01/1863876180.gif" alt="竖屏.gif"><br><img src="/images/media/2020/01/1610347264.gif" alt="横屏.gif"></p><h3 id="对比4种处理方式"><a href="#对比4种处理方式" class="headerlink" title="对比4种处理方式"></a>对比4种处理方式</h3><p>直接调整顶点位置，前面已经说过，会显得十分笨拙，几乎不会选择这种处理方式。</p><p>考虑到要充分利用窗口空间，将视口调整为窗口上的一小部分，并不是最佳选择，因为这样的话，窗口的其他区域就不会展示内容了，因此，保持视口占用整个窗口即可。</p><p>修改模型视图矩阵、投影矩阵，才是最佳的处理方式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>GLKit</tag>
      
      <tag>OpenGL ES</tag>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GLKit实战 第02话 三角形</title>
    <link href="/2020/01/29/GLKit%E5%AE%9E%E6%88%98%20%E7%AC%AC02%E8%AF%9D%20%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <url>/2020/01/29/GLKit%E5%AE%9E%E6%88%98%20%E7%AC%AC02%E8%AF%9D%20%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="整体步骤"><a href="#整体步骤" class="headerlink" title="整体步骤"></a>整体步骤</h2><p>绘制出一个图形，大体需要以下步骤：</p><ol><li>创建上下文，并将其指定为当前的上下文</li><li>创建<code>GLKBaseEffect</code>对象，并对其进行相应的配置</li><li>创建并绑定<code>VAO</code>(<code>vertex array object</code>，顶点数组对象)</li><li>创建并绑定<code>VBO</code>(<code>vertex buffer object</code>，顶点缓冲区对象)</li><li>设置顶点数据</li><li>启用顶点属性，并告知其如何使用顶点数据</li><li>在进行每一帧的绘制时，先同步状态，也即调用<code>GLKBaseEffect</code>的<code>prepareToDraw</code>方法</li><li>调用<code>glDraw***</code>函数进行绘制</li></ol><p>其中，第3步，是被强烈建议使用的，这样可以提高性能，当然，也可以将其忽略。第4、5、6步，可以看作是一大步骤，它们必须都存在。</p><h2 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h2><h3 id="先期准备"><a href="#先期准备" class="headerlink" title="先期准备"></a>先期准备</h3><p>首先，会继承<code>GLKViewController</code>，并实现<code>- (void)glkView:(GLKView *)view drawInRect:(CGRect)rect</code>方法。</p><p>根据上面的步骤，必须有顶点数据才行，因此，先定义一个结构体，用来描述顶点，其中的<code>position</code>，代表了顶点的位置，它属于顶点的一个属性：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vertex</span> &#123;<br>    GLKVector3 position;<br>&#125; Vertex;<br></code></pre></td></tr></table></figure><p>因为是绘制三角形，至少需要3个顶点，声明一个成员，用来存放顶点数据：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Vertex _vertices[<span class="hljs-number">3</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>在视图加载完成后，创建出上下文对象，并将其指定为当前的上下文：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">EAGLContext *glCtx = <span class="hljs-comment">[<span class="hljs-comment">[EAGLContext alloc]</span> initWithAPI:kEAGLRenderingAPIOpenGLES2]</span>;<br><span class="hljs-comment">[EAGLContext setCurrentContext:glCtx]</span>;<br></code></pre></td></tr></table></figure><p><strong>切记</strong>！！！也必须将其赋给<code>GLKView</code>的<code>context</code>属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">glView.context</span> = glCtx<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="GLKBaseEffect"><a href="#GLKBaseEffect" class="headerlink" title="GLKBaseEffect"></a>GLKBaseEffect</h3><p>考虑到目前的顶点只有位置数据，因此绘制出来的三角形将会是单色的。</p><p>当<code>useConstantColor</code>被设置为<code>GL_TRUE</code>时，<code>constantColor</code>将会被用作每个顶点的颜色。当<code>useConstantColor</code>被设置为<code>GL_FALSE</code>时，则表明需要启用顶点颜色属性，并为每个顶点提供颜色数据。</p><p><img src="/images/media/2020/01/3907266037.jpg" alt="GLKBaseEffect.h.jpg"></p><p>默认情况下，<code>useConstantColor</code>为<code>GL_TRUE</code>，<code>constantColor</code>为白色。为了明确，显式地为它们进行赋值。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">self.effect</span> = [[GLKBaseEffect alloc] init]<span class="hljs-comment">;</span><br><span class="hljs-attr">self.effect.useConstantColor</span> = GL_<span class="hljs-literal">TRUE</span><span class="hljs-comment">;</span><br><span class="hljs-attr">self.effect.constantColor</span> = GLKVector4Make(<span class="hljs-number">1.0</span>f, <span class="hljs-number">1.0</span>f, <span class="hljs-number">1.0</span>f, <span class="hljs-number">1.0</span>f)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="创建VBO，设置顶点数据"><a href="#创建VBO，设置顶点数据" class="headerlink" title="创建VBO，设置顶点数据"></a>创建VBO，设置顶点数据</h3><p>这一部分，将第4、5、6步放在一起。</p><p><strong>创建VBO：</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">glGenBuffers(<span class="hljs-number">1</span>, <span class="hljs-symbol">&amp;_vbo</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>绑定VBO：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">gl<span class="hljs-constructor">BindBuffer(GL_ARRAY_BUFFER, <span class="hljs-params">_vbo</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>设置顶点数据：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_vertices</span>[<span class="hljs-number">0</span>].position = GLKVector3Make( <span class="hljs-number">0</span>.<span class="hljs-number">5</span>f,  <span class="hljs-number">0</span>.<span class="hljs-number">5</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f);<br><span class="hljs-attribute">_vertices</span>[<span class="hljs-number">1</span>].position = GLKVector3Make(-<span class="hljs-number">0</span>.<span class="hljs-number">5</span>f,  <span class="hljs-number">0</span>.<span class="hljs-number">5</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f);<br><span class="hljs-attribute">_vertices</span>[<span class="hljs-number">2</span>].position = GLKVector3Make(-<span class="hljs-number">0</span>.<span class="hljs-number">5</span>f, -<span class="hljs-number">0</span>.<span class="hljs-number">5</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f);<br><span class="hljs-attribute">glBufferData</span>(GL_ARRAY_BUFFER, sizeof(_vertices), _vertices, GL_STATIC_DRAW);<br></code></pre></td></tr></table></figure><p><strong>启用顶点的位置属性：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">glEnableVertexAttribArray</span>(GLKVertexAttribPosition);<br></code></pre></td></tr></table></figure><p><strong>告知顶点的位置属性，应该如何使用顶点数据：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">glVertexAttribPointer</span><span class="hljs-params">(GLKVertexAttribPosition, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, sizeof(Vertex)</span></span>, NULL + <span class="hljs-built_in">offsetof</span>(Vertex, <span class="hljs-attribute">position</span>));<br></code></pre></td></tr></table></figure><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>在绘制之前，可以设置一下清除色，也即背景颜色，默认情况下，为黑色。虽然绘制的三角形使用的是白色，背景色和三角形的颜色对比明显，可以忽略其设置，但，为了更明确，还是设置一下比较好。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">glClearColor</span>(<span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>f);<br></code></pre></td></tr></table></figure><p>在<code>- (void)glkView:(GLKView *)view drawInRect:(CGRect)rect</code>方法中，先应用背景色，也即清除颜色缓冲区：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br></code></pre></td></tr></table></figure><p>然后，同步状态，并绘制三角形：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[self.effect prepareToDraw]</span>;<br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>这样，一个单色的三角形就出来了。</p><p><img src="/images/media/2020/01/2726257236.png" alt="Pure Triangle.png"></p><h3 id="彩色三角形"><a href="#彩色三角形" class="headerlink" title="彩色三角形"></a>彩色三角形</h3><p>根据上文内容，可以知道，为了让三角形是彩色的，就需要启用顶点颜色属性，并为顶点提供不同的颜色数据。</p><p><strong>修改<code>GLKBaseEffect</code>的配置：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">self.effect.useConstantColor</span> = GL_<span class="hljs-literal">FALSE</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>删除<code>self.effect.constantColor = GLKVector4Make(1.0f, 1.0f, 1.0f, 1.0f);</code>。</p><p>其实，完全不用修改配置信息，因为，当启用顶点颜色属性，并提供颜色数据后，<code>GLKBaseEffect</code>中颜色相关的配置将会被忽略，也就是会失效。</p><p><strong>修改<code>Vertex</code>结构体：</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct <span class="hljs-type">Vertex</span> &#123;<br>    <span class="hljs-type">GLKVector3</span> position;<br>    <span class="hljs-type">GLKVector4</span> color;<br>&#125; <span class="hljs-type">Vertex</span>;<br></code></pre></td></tr></table></figure><p>加入了<code>color</code>字段，用于表示顶点颜色。</p><p><strong>配置顶点颜色数据：</strong></p><p>在调用<code>glBufferData</code>之前，加入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_vertices</span>[<span class="hljs-number">0</span>].color = GLKVector4Make(<span class="hljs-number">1</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>f);<br><span class="hljs-attribute">_vertices</span>[<span class="hljs-number">1</span>].color = GLKVector4Make(<span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>f);<br><span class="hljs-attribute">_vertices</span>[<span class="hljs-number">2</span>].color = GLKVector4Make(<span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>f, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>f);<br></code></pre></td></tr></table></figure><p><strong>启用顶点颜色属性：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">glEnableVertexAttribArray</span>(GLKVertexAttribColor);<br></code></pre></td></tr></table></figure><p><strong>告知顶点的颜色属性，应该如何使用顶点数据：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">glVertexAttribPointer</span><span class="hljs-params">(GLKVertexAttribColor, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, sizeof(Vertex)</span></span>, NULL + <span class="hljs-built_in">offsetof</span>(Vertex, <span class="hljs-attribute">color</span>));<br></code></pre></td></tr></table></figure><p>这样，一个彩色的三角形就完成了：</p><p><img src="/images/media/2020/01/933914324.png" alt="Colorful Triangle.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>GLKit</tag>
      
      <tag>OpenGL ES</tag>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GLKit实战 第01话 引言</title>
    <link href="/2020/01/28/GLKit%E5%AE%9E%E6%88%98%20%E7%AC%AC01%E8%AF%9D%20%E5%BC%95%E8%A8%80/"/>
    <url>/2020/01/28/GLKit%E5%AE%9E%E6%88%98%20%E7%AC%AC01%E8%AF%9D%20%E5%BC%95%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="GLKit是什么？"><a href="#GLKit是什么？" class="headerlink" title="GLKit是什么？"></a>GLKit是什么？</h2><p>在iOS 5之前，开发OpenGL ES程序，需要编写大量的底层代码，极大影响开发效率。为了加快OpenGL ES应用程序的开发，自iOS 5起，苹果提供了一个名为GLKit的框架。</p><p>当创建新的基于着色器的应用程序时，或者对已存在的、且依赖于固定渲染管线（早期版本OpenGL ES所提供的功能）的应用程序进行移植时，GLKit所提供的函数及类，可以大幅减少工作量。</p><h2 id="GLKit有哪些特性？"><a href="#GLKit有哪些特性？" class="headerlink" title="GLKit有哪些特性？"></a>GLKit有哪些特性？</h2><p>GLKit提供的功能，可以分为4个方面：</p><ul><li><strong>纹理加载</strong>。可以轻松加载不同来源的纹理，亦可进行后台异步加载。</li><li><strong>数学库</strong>。提供常用的向量、四元组、矩阵操作。其实现已经被充分优化，可以提供极好的性能。</li><li><strong>特效</strong>。为常见的着色器特效提供标准实现。当配置特效并关联顶点数据时，特效会创建并加载合适的着色器。</li><li><strong>视图及视图控制器</strong>。提供OpenGL ES视图及相应视图控制器的标准实现。为创建OpenGL ES应用程序减少了大量代码。</li></ul><h3 id="GLKit内置的3种特效"><a href="#GLKit内置的3种特效" class="headerlink" title="GLKit内置的3种特效"></a>GLKit内置的3种特效</h3><ul><li><strong>GLKBaseEffect</strong>。实现了OpenGL ES 1.1阴影及光照模型的一个重要子集。</li><li><strong>GLKReflectionMapEffect</strong>。扩展了GLKBaseEffect，支持反射贴图。</li><li><strong>GLKSkyboxEffect</strong>。实现了天空盒特效。</li></ul><h2 id="为什么还要讲GLKit？"><a href="#为什么还要讲GLKit？" class="headerlink" title="为什么还要讲GLKit？"></a>为什么还要讲GLKit？</h2><p>这个问题，可以扩大为“为什么还要讲OpenGL或OpenGL ES？”。</p><p>早在2014年，苹果就推出了Metal，在WWDC 2018上，苹果表示将抛弃OpenGL，具体情况如下：</p><ul><li>自macOS 10.14，弃用OpenGL和OpenCL。<a href="https://developer.apple.com/documentation/macos_release_notes/macos_mojave_10_14_release_notes">macOS Mojave 10.14 Release Notes</a></li><li>自iOS 12，弃用OpenGL ES。<a href="https://developer.apple.com/videos/play/wwdc2018/604/">WWDC 2018 Metal for OpenGL Developers</a></li></ul><p><img src="/images/media/2020/01/2396043222.png" alt="OpenGL APIs are deprecated.png"></p><p><strong>苹果都这么用力在推Metal，为什么还要学OpenGL或OpenGL ES呢？</strong></p><ul><li>首先，OpenGL、OpenGL ES是跨平台的，Metal只能在苹果平台上使用。</li><li>其次，目前多数的移动端图形应用，使用的依旧是OpenGL ES。</li><li>最后，模型视图矩阵、投影矩阵、图形渲染管线、着色器等相关知识，是通用的，并不影响其他图形框架（Metal、Vulkan、DirectX）的学习，一旦掌握了这些通用知识，也能够轻松驾驭其他图形框架。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>GLKit</tag>
      
      <tag>OpenGL ES</tag>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git相关问题</title>
    <link href="/2019/11/02/Git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2019/11/02/Git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="git-status中文文件名乱码问题"><a href="#git-status中文文件名乱码问题" class="headerlink" title="git status中文文件名乱码问题"></a>git status中文文件名乱码问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status<br>On branch master<br>Initial commit<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br><br><span class="hljs-string">&quot;\345\237\272\345\234\260.txt&quot;</span><br><br>nothing added to commit but untracked files present (use <span class="hljs-string">&quot;git add&quot;</span> to track)<br></code></pre></td></tr></table></figure><p>解决办法：</p><ul><li>命令行中执行：<code>git config --global core.quotepath false</code></li><li>直接修改<code>~/.gitconfig</code>文件，在<code>[core]</code>区加入<code>quotepath = false</code>：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br><span class="hljs-attr">excludesfile</span> = /Users/xxx/.gitignore_global<br><span class="hljs-attr">quotepath</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>针对<code>http</code>、<code>https</code>协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -c http.proxy=http://127.0.0.1:1087 https://chromium.googlesource.com/libyuv/libyuv<br></code></pre></td></tr></table></figure><p>全局配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:1087&#x27;</span><br><br>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:1087&#x27;</span><br><br>git config --global http.proxy <span class="hljs-string">&#x27;http://127.0.0.1:12333&#x27;</span><br><br>git config --global https.proxy <span class="hljs-string">&#x27;http://127.0.0.1:12333&#x27;</span><br></code></pre></td></tr></table></figure><p>针对<code>git</code>协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config core.gitProxy  <span class="hljs-string">&#x27;socks5://192.168.7.1:1080&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="不再对某文件进行版本控制"><a href="#不再对某文件进行版本控制" class="headerlink" title="不再对某文件进行版本控制"></a>不再对某文件进行版本控制</h2><blockquote><p>不再对曾经被push到代码仓库中的某文件进行版本控制</p></blockquote><p><code>git filter-branch --index-filter &quot;git rm -rf --cached --ignore-unmatch $&#123;path_to_file&#125;&quot; HEAD</code></p><p>其中的<code>$&#123;path_to_file&#125;</code>，为指定的某个文件（版本库相对路径）</p><h2 id="补丁文件"><a href="#补丁文件" class="headerlink" title="补丁文件"></a>补丁文件</h2><h3 id="生成patch"><a href="#生成patch" class="headerlink" title="生成patch"></a>生成<code>patch</code></h3><p>不包括 <code>qaz</code> 这个 <code>commit</code>：</p><p><code>git format-patch --output-directory=/x/y/z qaz..wsx</code></p><h3 id="应用patch"><a href="#应用patch" class="headerlink" title="应用patch"></a>应用<code>patch</code></h3><p><code>git am xyz.patch</code></p><p>如果打补丁失败，可以使用三路合并，手动处理冲突：</p><p><code>git am -3 xyz.patch</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode集成CMake</title>
    <link href="/2019/08/07/VSCode%E9%9B%86%E6%88%90CMake/"/>
    <url>/2019/08/07/VSCode%E9%9B%86%E6%88%90CMake/</url>
    
    <content type="html"><![CDATA[<h1 id="VSCode集成CMake"><a href="#VSCode集成CMake" class="headerlink" title="VSCode集成CMake"></a>VSCode集成CMake</h1><h2 id="安装CMake"><a href="#安装CMake" class="headerlink" title="安装CMake"></a>安装CMake</h2><p>建议通过源码进行安装：<a href="https://cmake.org/download/">https://cmake.org/download/</a>，不赘述。</p><h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><p>选中“扩展”标签，搜索并安装以下扩展：</p><p><img src="/images/media/2019/08/932918862.jpg" alt="15627736459572.jpg"></p><ul><li>C&#x2F;C++ 扩展，是微软提供的用于支持C、C++文件及其项目的扩展，提供自动完成等功能。</li><li>CMake 扩展，用于在编写 CMakeLists.txt 文件时，提供自动完成等功能。</li><li>CMake Tools 扩展，用于快速搭建、编译、运行 CMake 项目。</li></ul><h2 id="快速搭建项目"><a href="#快速搭建项目" class="headerlink" title="快速搭建项目"></a>快速搭建项目</h2><p>打开“命令面板”</p><p><img src="/images/media/2019/08/3076375297.jpg" alt="15627740999868.jpg"></p><p>输入<code>cmakequic</code>，查找到<code>CMake: Quick Start</code>，然后按回车键，</p><p><img src="/images/media/2019/08/3545079605.jpg" alt="15627742272992.jpg"></p><p>输入项目名称，按回车键</p><p><img src="/images/media/2019/08/2203365637.jpg" alt="15627743951537.jpg"></p><p>选择<code>创建库文件</code>或<code>可执行文件</code>，按回车键，创建项目</p><p><img src="/images/media/2019/08/1991906493.jpg" alt="15627744671998.jpg"></p><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>打开“命令面板”，查找<code>CMake: Build</code>，并按回车键。</p><p><img src="/images/media/2019/08/827812364.jpg" alt="15627748144807.jpg"></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p><em>可以跳转“构建项目”那一个步骤，因为“运行项目”这一步骤，会自动对项目进行构建。</em></p><p>打开“命令面板”，查找<code>CMake: Execute the ...</code>，并按回车键。</p><p><img src="/images/media/2019/08/2980832335.jpg" alt="15627746620075.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>IDE</tag>
      
      <tag>VSCode</tag>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL - 安装</title>
    <link href="/2019/02/11/SDL%20-%20%E5%AE%89%E8%A3%85/"/>
    <url>/2019/02/11/SDL%20-%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="SDL-安装"><a href="#SDL-安装" class="headerlink" title="SDL 安装"></a>SDL 安装</h2><p>安装方式有以下几种：</p><ol><li>源码</li><li><code>Homebrew</code></li><li><code>Advanced Packaging Tool</code></li><li><code>Yellow dog Updater, Modified</code></li></ol><h3 id="通过源码进行安装"><a href="#通过源码进行安装" class="headerlink" title="通过源码进行安装"></a>通过源码进行安装</h3><p>下载相关的源码压缩包，解压，在终端中切换到源码目录，执行以下命令：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">./configure<br><span class="hljs-built_in">make</span><br>sudo <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><blockquote><p><code>SDL2</code>的源码中，也提供了<code>cmake</code>的安装方式，可通过<code>cmake -G</code>生成不同的构建系统</p></blockquote><h3 id="通过Homebrew进行安装"><a href="#通过Homebrew进行安装" class="headerlink" title="通过Homebrew进行安装"></a>通过<code>Homebrew</code>进行安装</h3><p>此方式针对<code>macOS</code>。</p><p>首先，需要保证系统已安装<code>Homebrew</code>，如未安装，可在<a href="https://brew.sh/">https://brew.sh/</a>这里找到安装方法。</p><p>安装成功后，就可以通过<code>brew</code>命令安装<code>SDL2</code>了。</p><p><img src="/images/media/2019/02/1913067101.png" alt="brew-install-sdl2.png"></p><h3 id="通过Advanced-Packaging-Tool进行安装"><a href="#通过Advanced-Packaging-Tool进行安装" class="headerlink" title="通过Advanced Packaging Tool进行安装"></a>通过<code>Advanced Packaging Tool</code>进行安装</h3><p>也即<code>apt</code>。</p><p>此方式针对<code>Debian</code>及基于<code>Debian</code>的<code>Ubuntu</code>、<code>Deepin</code>。</p><p>通过<code>apt-get</code>命令，安装相关的<code>dev</code>包。</p><p><img src="/images/media/2019/02/1909622182.jpg" alt="apt-get-install-sdl2.jpg"></p><h3 id="通过Yellow-dog-Updater-Modified进行安装"><a href="#通过Yellow-dog-Updater-Modified进行安装" class="headerlink" title="通过Yellow dog Updater, Modified进行安装"></a>通过<code>Yellow dog Updater, Modified</code>进行安装</h3><p>也即<code>yum</code>。</p><p>此方式针对<code>Fedora</code>及<code>CentOS</code>。</p><p>通过<code>yum</code>命令，安装相关的包。</p><p>比如：<code>yum install SDL2-devel</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL - 初识</title>
    <link href="/2019/02/10/SDL%20-%20%E5%88%9D%E8%AF%86/"/>
    <url>/2019/02/10/SDL%20-%20%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="SDL-初识"><a href="#SDL-初识" class="headerlink" title="SDL 初识"></a>SDL 初识</h2><p><img src="/images/media/2019/02/3341670092.jpg" alt="sdl_logo_640w.jpg"></p><p><code>SDL</code>的全称是<code>Simple Directmedia Layer</code>，它是一个跨平台的开发库，通过<code>OpenGL</code>及<code>Direct3D</code>，可以提供针对音频、键盘、鼠标、游戏杆及图形硬件的低级访问，在开发视频播放软件、模拟器及游戏时，都可以使用它。</p><p>官方支持以下平台：</p><ul><li><code>Windows</code></li><li><code>macOS</code></li><li><code>Linux</code></li><li><code>iOS</code></li><li><code>Android</code></li></ul><blockquote><p>也可以在源代码中找到对其它平台的支持</p></blockquote><p><code>SDL</code>是由<code>C</code>语言编写的。</p><p><code>SDL</code>官网： <a href="https://www.libsdl.org/index.php">https://www.libsdl.org/index.php</a>，在这里，可以找到源代码下载链接，目前，最新版本是<code>2.0.x</code>，与<code>1.0.x</code>版本有较大的不同，因此，为了区别这两个版本，多用<code>SDL</code>代表<code>1.0.x</code>版本，用<code>SDL2</code>或<code>SDL 2</code>代表<code>2.0.x</code>版本。</p><blockquote><p>目前，多数的开发，是基于<code>2.0.x</code>版本进行的。</p></blockquote><h2 id="SDL-扩展库"><a href="#SDL-扩展库" class="headerlink" title="SDL 扩展库"></a>SDL 扩展库</h2><p>扩展库相关链接：<a href="https://libsdl.org/projects/">https://libsdl.org/projects/</a></p><p>常用的有：</p><ul><li><code>SDL_image</code></li><li><code>SDL_mixer</code></li><li><code>SDL_net</code></li><li><code>SDL_ttf</code></li></ul><p><img src="/images/media/2019/02/3890319693.jpg" alt="SDL ext libs.jpg"></p><p>除了其官网提供的以上4个扩展库，另外还有一个名为<code>SDL2_gfx</code>的扩展库，可以在<a href="https://sourceforge.net/projects/sdl2gfx/">https://sourceforge.net/projects/sdl2gfx/</a>这里下载其源代码。</p><h3 id="SDL-image"><a href="#SDL-image" class="headerlink" title="SDL_image"></a>SDL_image</h3><p>它是一个图像文件加载库。可通过加载图像，生成<code>SDL surface</code>及<code>SDL texture</code>，支持以下格式：</p><ul><li><code>BMP</code></li><li><code>GIF</code></li><li><code>JPEG</code></li><li><code>LBM</code></li><li><code>PCX</code></li><li><code>PNG</code></li><li><code>PNM</code></li><li><code>SVG</code></li><li><code>TGA</code></li><li><code>TIFF</code></li><li><code>WEBP</code></li><li><code>XCF</code></li><li><code>XPM</code></li><li><code>XV</code></li></ul><h3 id="SDL-mixer"><a href="#SDL-mixer" class="headerlink" title="SDL_mixer"></a>SDL_mixer</h3><p>它是一个多通道混音库。支持同时播放任意数量的16位立体声通道，也支持由<code>FLAC</code>、<code>MikMod MOD</code>、<code>Timidity MIDI</code>、<code>Ogg Vorbis</code>、<code>SMPEG MP3</code>这些库所混合的单声道音乐。</p><h3 id="SDL-net"><a href="#SDL-net" class="headerlink" title="SDL_net"></a>SDL_net</h3><p>它是一个小的跨平台网络库，含有聊天客户端及聊天服务器端示例程序。聊天客户端使用了<a href="https://libsdl.org/projects/GUIlib/">GUIlib</a>库。</p><p>与<code>SDL_image</code>、<code>SDL_mixer</code>、<code>SDL_ttf</code>相比，它并没有那么常用，因为有比它更强大、更好用的跨平台网络库，比如<code>libuv</code>、<code>libev</code>、<code>libevent</code>。</p><h3 id="SDL-ttf"><a href="#SDL-ttf" class="headerlink" title="SDL_ttf"></a>SDL_ttf</h3><p>通过它，就可以在程序中使用<code>TrueType</code>字体。</p><h3 id="SDL2-gfx"><a href="#SDL2-gfx" class="headerlink" title="SDL2_gfx"></a>SDL2_gfx</h3><p>它包含20多种图元（直线、方框、圆、多边形等等）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过FFmpeg命令进行RTMP推流</title>
    <link href="/2018/11/17/%E9%80%9A%E8%BF%87FFmpeg%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8CRTMP%E6%8E%A8%E6%B5%81/"/>
    <url>/2018/11/17/%E9%80%9A%E8%BF%87FFmpeg%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8CRTMP%E6%8E%A8%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>启动<code>SRS</code>服务器</li><li>使用<code>FFmpeg</code>推流</li><li>使用<code>VLC</code>拉流播放</li></ol><h3 id="启动SRS"><a href="#启动SRS" class="headerlink" title="启动SRS"></a>启动<code>SRS</code></h3><ol><li>切换到<code>srs</code>的<code>trunk</code>目录</li><li>执行<code>./scripts/run.sh</code></li><li>根据提示，修改<code>/etc/hosts</code>文件</li></ol><p>或者，</p><ol><li>切换到<code>srs</code>的<code>trunk</code>目录</li><li>执行<code>./objs/srs -c ./conf/rtmp.conf</code></li></ol><h3 id="推流脚本-示例"><a href="#推流脚本-示例" class="headerlink" title="推流脚本(示例)"></a>推流脚本(示例)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span>((;;)); <span class="hljs-keyword">do</span> \<br>    ffmpeg -re -i input.mp4 -c copy -f flv -y rtmp://172.16.146.11:1935/live/apple; \<br>    <span class="hljs-built_in">sleep</span> 1; \<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="后台执行推流脚本"><a href="#后台执行推流脚本" class="headerlink" title="后台执行推流脚本"></a>后台执行推流脚本</h3><p><code>nohup bash push_rtmp.sh &amp;&gt;/dev/null &amp;</code></p><p>此处使用<code>bash push_rtmp.sh</code>而不是<code>./push_rtmp.sh</code>的原因是：默认的<code>shell</code>可能不是<code>bash</code>。</p><h3 id="HTTP-FLV"><a href="#HTTP-FLV" class="headerlink" title="HTTP FLV"></a>HTTP FLV</h3><p>当使用<code>./objs/srs -c ./conf/http.flv.live.conf</code>启动时，可以使用浏览器打开直播流。</p><p>推流：</p><p><code>ffmpeg -re -i input.mp4 -c copy -f flv -y rtmp://172.16.146.11:1935/live/apple</code></p><p>在浏览器中播放：</p><p><code>http://172.16.146.11:8080/live/apple.flv</code></p><p><img src="/images/media/2022/08/356843461.jpg"></p><h3 id="HTTP-HLS"><a href="#HTTP-HLS" class="headerlink" title="HTTP HLS"></a>HTTP HLS</h3><p>当使用<code>./objs/srs -c ./conf/http.hls.conf</code>启动时，可以使用浏览器打开直播流。</p><p>推流：</p><p><code>ffmpeg -re -i input.mp4 -c copy -f flv -y rtmp://172.16.146.11:1935/live/apple</code></p><p>在浏览器中播放：</p><p><code>http://172.16.146.11:8080/live/apple.m3u8</code></p><p><img src="/images/media/2022/08/3970746741.jpg"></p><p><img src="/images/media/2022/08/1321296148.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>流媒体</tag>
      
      <tag>RTMP</tag>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某月的天数</title>
    <link href="/2018/08/26/%E6%9F%90%E6%9C%88%E7%9A%84%E5%A4%A9%E6%95%B0/"/>
    <url>/2018/08/26/%E6%9F%90%E6%9C%88%E7%9A%84%E5%A4%A9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>计算某年某月份中的天数，对于多数人来说，都是很简单的事情。但能否把程序写得足够简洁，就是另外一回事了。</p><p>先给出最终的代码：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing">#include &lt;stdbool.<span class="hljs-property">h</span>&gt;<br>#include &lt;<span class="hljs-keyword">assert</span>.<span class="hljs-property">h</span>&gt;<br><br>_Bool <span class="hljs-title function_">isLeapYear</span>(<span class="hljs-type">int</span> <span class="hljs-built_in">year</span>) &#123;<br>    <span class="hljs-title function_">return</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">year</span> % <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-number">0</span> != <span class="hljs-built_in">year</span> % <span class="hljs-number">100</span>) || (<span class="hljs-number">0</span> == <span class="hljs-built_in">year</span> % <span class="hljs-number">400</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numberOfDaysInMonth</span>(<span class="hljs-type">int</span> <span class="hljs-built_in">month</span>, <span class="hljs-type">int</span> <span class="hljs-built_in">year</span>) &#123;<br>    <span class="hljs-title function_">assert</span>(<span class="hljs-number">0</span> &lt; <span class="hljs-built_in">month</span> &amp;&amp; <span class="hljs-built_in">month</span> &lt; <span class="hljs-number">13</span>);<br>    <span class="hljs-title function_">return</span> (<span class="hljs-number">2</span> == <span class="hljs-built_in">month</span>) ? (<span class="hljs-number">28</span> + <span class="hljs-title function_">isLeapYear</span>(<span class="hljs-built_in">year</span>)) : (<span class="hljs-number">31</span> - (<span class="hljs-built_in">month</span> - <span class="hljs-number">1</span>) % <span class="hljs-number">7</span> % <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你已经知道上述代码是如何得来的，就不必再往下看了。</p><p>为什么可以这样写？</p><p>先来看一下这个表格：</p><table><thead><tr><th>month</th><th>天数</th></tr></thead><tbody><tr><td>1</td><td>31</td></tr><tr><td>2</td><td>28或29</td></tr><tr><td>3</td><td>31</td></tr><tr><td>4</td><td>30</td></tr><tr><td>5</td><td>31</td></tr><tr><td>6</td><td>30</td></tr><tr><td>7</td><td>31</td></tr><tr><td>8</td><td>31</td></tr><tr><td>9</td><td>30</td></tr><tr><td>10</td><td>31</td></tr><tr><td>11</td><td>30</td></tr><tr><td>12</td><td>31</td></tr></tbody></table><p>然后对这个表格中的数据进行调整：</p><table><thead><tr><th>month</th><th>天数</th></tr></thead><tbody><tr><td>1</td><td>31     -&gt; 31</td></tr><tr><td>2</td><td>28或29 -&gt; 30</td></tr><tr><td>3</td><td>31     -&gt; 31</td></tr><tr><td>4</td><td>30     -&gt; 30</td></tr><tr><td>5</td><td>31     -&gt; 31</td></tr><tr><td>6</td><td>30     -&gt; 30</td></tr><tr><td>7</td><td>31     -&gt; 31</td></tr><tr><td>8</td><td>31     -&gt; 31</td></tr><tr><td>9</td><td>30     -&gt; 30</td></tr><tr><td>10</td><td>31     -&gt; 31</td></tr><tr><td>11</td><td>30     -&gt; 30</td></tr><tr><td>12</td><td>31     -&gt; 31</td></tr></tbody></table><p>也就是<strong>将2月份的天数，调整为了30天</strong>。</p><p>再调整：</p><table><thead><tr><th>month</th><th>天数</th><th>month</th><th>天数</th></tr></thead><tbody><tr><td>1</td><td>31     -&gt; 31</td><td>8</td><td>31     -&gt; 31</td></tr><tr><td>2</td><td>28或29 -&gt; 30</td><td>9</td><td>30     -&gt; 30</td></tr><tr><td>3</td><td>31     -&gt; 31</td><td>10</td><td>31     -&gt; 31</td></tr><tr><td>4</td><td>30     -&gt; 30</td><td>11</td><td>30     -&gt; 30</td></tr><tr><td>5</td><td>31     -&gt; 31</td><td>12</td><td>31     -&gt; 31</td></tr><tr><td>6</td><td>30     -&gt; 30</td><td></td><td></td></tr><tr><td>7</td><td>31     -&gt; 31</td><td></td><td></td></tr></tbody></table><p><strong>这样，是不是看出点儿规律了？</strong></p><p><strong>规律：</strong>天数31与30是交替出现的（1到7月，8到12月），也就是说，存在ABABAB这样的模式。<strong>此处，暂且认为2月份的天数就是30天，最后会对其进行特殊处理。</strong></p><p>现在，对月份进行取模，也让其出现上述规律，这样，最后就可以简单地通过加减运算得到正确的结果。</p><p>由于是每隔7个数，就会重现规律，因此需要先对7进行取模：</p><table><thead><tr><th>month</th><th>month % 7</th><th>month</th><th>month % 7</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>8</td><td>1</td></tr><tr><td>2</td><td>2</td><td>9</td><td>2</td></tr><tr><td>3</td><td>3</td><td>10</td><td>3</td></tr><tr><td>4</td><td>4</td><td>11</td><td>4</td></tr><tr><td>5</td><td>5</td><td>12</td><td>5</td></tr><tr><td>6</td><td>6</td><td></td><td></td></tr><tr><td>7</td><td>0</td><td></td><td></td></tr></tbody></table><p>到这里，会发现，对于6、7月，<code>month % 7</code>的结果都是偶数，为了最终得到ABABAB这样的规律，取模的结果必须是奇数偶数交替出现才可以。</p><p>因此，需要调整一下，将<code>month % 7</code>调整为<code>(month - 1) % 7</code>：</p><table><thead><tr><th>month</th><th>(month - 1) % 7</th><th>天数</th><th>month</th><th>(month - 1) % 7</th><th>天数</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>31</td><td>8</td><td>0</td><td>31</td></tr><tr><td>2</td><td>1</td><td>30</td><td>9</td><td>1</td><td>30</td></tr><tr><td>3</td><td>2</td><td>31</td><td>10</td><td>2</td><td>31</td></tr><tr><td>4</td><td>3</td><td>30</td><td>11</td><td>3</td><td>30</td></tr><tr><td>5</td><td>4</td><td>31</td><td>12</td><td>4</td><td>31</td></tr><tr><td>6</td><td>5</td><td>30</td><td></td><td></td><td></td></tr><tr><td>7</td><td>6</td><td>31</td><td></td><td></td><td></td></tr></tbody></table><p>再用<code>(month - 1) % 7</code>的结果对2取模：</p><table><thead><tr><th>month</th><th>(month - 1) % 7 % 2</th><th>天数</th><th>month</th><th>(month - 1) % 7 % 2</th><th>天数</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>31</td><td>8</td><td>0</td><td>31</td></tr><tr><td>2</td><td>1</td><td>30</td><td>9</td><td>1</td><td>30</td></tr><tr><td>3</td><td>0</td><td>31</td><td>10</td><td>0</td><td>31</td></tr><tr><td>4</td><td>1</td><td>30</td><td>11</td><td>1</td><td>30</td></tr><tr><td>5</td><td>0</td><td>31</td><td>12</td><td>0</td><td>31</td></tr><tr><td>6</td><td>1</td><td>30</td><td></td><td></td><td></td></tr><tr><td>7</td><td>0</td><td>31</td><td></td><td></td><td></td></tr></tbody></table><p>这样，就可以使用<code>31 - (month - 1) % 7 % 2</code>计算出某月的天数。</p><p>对2月份进行处理后，最终就是<code>(2 == month) ? (28 + isLeapYear(year)) : (31 - (month - 1) % 7 % 2)</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UIImage与CVPixelBuffer互转</title>
    <link href="/2018/06/23/UIImage%E4%B8%8ECVPixelBuffer%E4%BA%92%E8%BD%AC/"/>
    <url>/2018/06/23/UIImage%E4%B8%8ECVPixelBuffer%E4%BA%92%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="UIImage与CVPixelBuffer互转"><a href="#UIImage与CVPixelBuffer互转" class="headerlink" title="UIImage与CVPixelBuffer互转"></a>UIImage与CVPixelBuffer互转</h1><h2 id="UIImage转CVPixelBuffer"><a href="#UIImage转CVPixelBuffer" class="headerlink" title="UIImage转CVPixelBuffer"></a>UIImage转CVPixelBuffer</h2><p>有两种方式可供选择：</p><ol><li><code>CoreGraphics</code>中的相关函数</li><li><code>CoreImage</code>中的相关方法</li></ol><h3 id="CoreGraphics"><a href="#CoreGraphics" class="headerlink" title="CoreGraphics"></a>CoreGraphics</h3><p>步骤：</p><ol><li>创建一个<code>CVPixelBuffer</code>（<code>pixelBuf</code>）</li><li>获取<code>CVPixelBuffer</code>基址（<code>baseAddress</code>）</li><li>选择一个适当的<code>CGColorSpace</code>（<code>colorSpace</code>）</li><li>根据<code>baseAddress</code>和<code>colorSpace</code>，以及其它所需数据，创建一个<code>CGBitmapContext</code>（<code>bitmapCtx</code>）</li><li>将<code>UIImage</code>中的<code>CGImage</code>绘制到<code>bitmapCtx</code>上</li></ol><p>通过上述步骤，就可以将图像渲染到<code>pixelBuf</code>中。</p><h3 id="CoreImage"><a href="#CoreImage" class="headerlink" title="CoreImage"></a>CoreImage</h3><p>步骤：</p><ol><li>创建一个<code>CVPixelBuffer</code>（<code>pixelBuf</code>）</li><li>创建一个<code>CIContext</code>（<code>ctx</code>）</li><li>使用<code>ctx</code>将<code>UIImage</code>中的<code>CIImage</code>渲染到<code>pixelBuf</code>中（<code>- render:toCVPixelBuffer:</code>方法）</li></ol><h2 id="CVPixelBuffer转UIImage"><a href="#CVPixelBuffer转UIImage" class="headerlink" title="CVPixelBuffer转UIImage"></a>CVPixelBuffer转UIImage</h2><p>同样存在两种可供选择的方式：</p><ol><li><code>VideoToolbox</code>中的相关函数</li><li><code>CoreImage</code>中的相关方法</li></ol><h3 id="VideoToolbox"><a href="#VideoToolbox" class="headerlink" title="VideoToolbox"></a>VideoToolbox</h3><p>步骤：</p><ol><li>从<code>CVPixelBuffer</code>得到<code>CGImage</code>（<code>VTCreateCGImageFromCVPixelBuffer</code>函数）</li><li>由<code>CGImage</code>创建出<code>UIImage</code></li></ol><h3 id="CoreImage-1"><a href="#CoreImage-1" class="headerlink" title="CoreImage"></a>CoreImage</h3><p>步骤：</p><ol><li>从<code>CVPixelBuffer</code>得到<code>CIImage</code>（<code>CIImage</code>类方法：<code>+ imageWithCVImageBuffer:</code>与<code>+ imageWithCVPixelBuffer:</code>）</li><li>由<code>CIImage</code>创建出<code>UIImage</code></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>流媒体</tag>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YUV</title>
    <link href="/2018/06/23/YUV/"/>
    <url>/2018/06/23/YUV/</url>
    
    <content type="html"><![CDATA[<h1 id="YUV"><a href="#YUV" class="headerlink" title="YUV"></a>YUV</h1><p><code>YUV</code>是电视广播视频信号的原生格式，其亮度信息(<code>Y</code>)与色度信息(<code>U</code>和<code>V</code>或<code>Cb</code>和<code>Cr</code>)是分离的。</p><p>之所以会存在<code>YUV</code>，是因为早期的黑白电视只能传输亮度信息（也就是说，当只有<code>Y</code>分量时，图像就会显示为黑白的）。为了与现有的视频接收设备兼容，专门增加了一个新的色差信号。</p><p>在<code>YUV</code>格式下，<code>U</code>和<code>V</code>分量的分辨率通常低于<code>Y</code>分量，它是利用了人眼视觉系统特性，相比于色度信息，人眼对亮度信息更加敏感。相比于<code>RGB</code>格式，<code>YUV</code>更加节省存储空间与传输带宽。</p><p>有人会把<code>YUV</code>看作是色彩空间，这是不对的，它只是将<code>RGB</code>颜色编码为亮度值和色度值，它所关联的底层色彩空间，与<code>RGB</code>颜色所关联的底层色彩空间是相同的。</p><h2 id="采样模式"><a href="#采样模式" class="headerlink" title="采样模式"></a>采样模式</h2><p>通常，视频是支持多种<code>YUV</code>采样模式的。</p><p>典型的采样模式有：</p><ul><li><code>4:4:4</code></li><li><code>4:2:2</code></li><li><code>4:2:0</code></li></ul><p>其中，<code>4:2:0</code>采样模式是最流行的，广泛用于视频流领域，比如视频会议、数字电视、网络直播。其余两者用于高画质再现。</p><p>上述比例（假定为<code>Q:A:Z</code>）中的每个数字，表示的是水平方向上的相对采样率：</p><ul><li><code>Q</code>：每一行中<code>Y</code>分量的相对采样个数</li><li><code>A</code>：奇数行中<code>U</code>和<code>V</code>分量的相对采样个数</li><li><code>Z</code>：偶数行中<code>U</code>和<code>V</code>分量的相对采样个数</li></ul><p>以<code>4:2:0</code>采样模式为例，在奇数行中，每4个<code>Y</code>分量，就会采样2个<code>U</code>分量和2个<code>V</code>分量；在偶数行中，每4个<code>Y</code>分量，并不会对<code>U</code>分量和<code>V</code>分量进行采样，此时，会与前面的奇数行共用之前采样的2个<code>U</code>分量和2个<code>V</code>分量。</p><p>为了更加形象化，以双平面的<code>4:2:0</code>为例，当以这种形式存储图像数据时，会先用一个平面来存储<code>Y</code>分量，再用另外一个平面来存储<code>U</code>分量和<code>U</code>分量，如下图所示：</p><p><img src="/images/media/2018/06/556228608.png" alt="YUV420P.png"></p><p>进行采样时：</p><ul><li>Y00、Y01、Y02、Y03和Y10、Y11、Y12、Y13，共用U00、V00、U01、V01</li><li>Y04、Y05、Y06、Y07和Y14、Y15、Y16、Y17，共用U02、V02、U03、V03</li><li>Y20、Y21、Y22、Y23和Y30、Y31、Y32、Y33，共用U10、V10、U11、V11</li><li>Y24、Y25、Y26、Y27和Y34、Y35、Y36、Y37，共用U12、V12、U13、V13</li></ul><p><img src="/images/media/2018/06/3403042220.png" alt="YUV420P-Sampling.png"></p><p>在屏幕上显示<code>YUV</code>之前，需要转换为<code>RGB</code>，采样并将<code>RGB</code>图像的每个像素中的每个分量计算出来，最终得到<code>RGB</code>图像。</p>]]></content>
    
    
    
    <tags>
      
      <tag>流媒体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Four Character Code</title>
    <link href="/2018/06/22/Four%20Character%20Code/"/>
    <url>/2018/06/22/Four%20Character%20Code/</url>
    
    <content type="html"><![CDATA[<h1 id="Four-Character-Code"><a href="#Four-Character-Code" class="headerlink" title="Four Character Code"></a>Four Character Code</h1><p><code>Four Character Code</code>简称<code>FourCC</code>，是由4个单字节字符构成的代码。</p><p>常被用于定义一些音频格式、图像或像素格式。</p><h2 id="Apple-平台"><a href="#Apple-平台" class="headerlink" title="Apple 平台"></a>Apple 平台</h2><p>在<code>MacTypes.h</code>头文件中，有以下<code>typedef</code>：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-keyword">if</span> __LP64__</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>                    <span class="hljs-built_in">UInt32</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>                   <span class="hljs-built_in">UInt32</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">UInt32</span>                          FourCharCode;<br><span class="hljs-keyword">typedef</span> FourCharCode                    OSType;<br></code></pre></td></tr></table></figure><p>可以看到，<code>OSType</code>、<code>FourCharCode</code>、<code>UInt32</code>三个类型是相同的。</p><p>在<code>CoreAudio</code>中，有这样一个<code>typedef</code>：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    @typedef        AudioFormatID</span><br><span class="hljs-comment">    @abstract       A four char code indicating the general kind of data in the stream.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">UInt32</span>  AudioFormatID;<br></code></pre></td></tr></table></figure><p>很明显，<code>AudioFormatID</code>与<code>FourCharCode</code>是等同的。</p><p>另外，也定义了一些类型为<code>AudioFormatID</code>的枚举值，比如：</p><ul><li><code>kAudioFormatLinearPCM = &#39;lpcm&#39;</code></li><li><code>kAudioFormatMPEG4AAC = &#39;aac &#39;</code></li><li><code>kAudioFormatMPEGLayer3 = &#39;.mp3&#39;</code></li></ul><p>可以看出，它们的类型也就是<code>FourCharCode</code>。</p><p>在<code>CoreVideo</code>中，有一些以<code>kCVPixelFormatType_</code>开头的枚举值，比如：</p><ul><li><code>kCVPixelFormatType_32BGRA = &#39;BGRA&#39;</code></li><li><code>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange = &#39;420v&#39;</code></li><li><code>kCVPixelFormatType_420YpCbCr8BiPlanarFullRange = &#39;420f&#39;</code></li></ul><p>它们的类型为<code>OSType</code>，也即<code>FourCharCode</code>。</p><p>为了将这些<code>FourCC</code>转换为<code>C字符串</code>（<code>&#39;BGRA&#39;</code>转换为<code>&quot;BGRA&quot;</code>），可以使用这样的宏：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lisp">#define DGAppleFourCCToString(<span class="hljs-name">__FOURCC__</span>) ((<span class="hljs-name">char</span> [<span class="hljs-number">5</span>])\<br>&#123;\<br>    (((<span class="hljs-name">__FOURCC__</span>) &amp; <span class="hljs-number">0</span>xFF000000) &gt;&gt; <span class="hljs-number">24</span>), \<br>    (((<span class="hljs-name">__FOURCC__</span>) &amp; <span class="hljs-number">0</span>x00FF0000) &gt;&gt; <span class="hljs-number">16</span>), \<br>    (((<span class="hljs-name">__FOURCC__</span>) &amp; <span class="hljs-number">0</span>x0000FF00) &gt;&gt; <span class="hljs-number">8</span>), \<br>     ((<span class="hljs-name">__FOURCC__</span>) &amp; <span class="hljs-number">0</span>x000000FF), \<br>    <span class="hljs-number">0</span>\<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h2><p>在<code>V4L2</code>中，具体是在<code>videodev2.h</code>头文件中，定义了一些以<code>V4L2_PIX_FMT_</code>开头的宏，比如：</p><ul><li><code>V4L2_PIX_FMT_BGR32</code></li><li><code>V4L2_PIX_FMT_YUV420</code></li><li><code>V4L2_PIX_FMT_NV12</code></li></ul><p>这些宏都使用了<code>v4l2_fourcc</code>这个宏，其定义如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">/*  Four-character-code (FOURCC) */</span><br><span class="hljs-attr">#define v4</span>l<span class="hljs-number">2</span>_fourcc<span class="hljs-comment">(a, b, c, d)</span>\<br><span class="hljs-comment">((__u32)</span><span class="hljs-comment">(a)</span> | <span class="hljs-comment">((__u32)</span><span class="hljs-comment">(b)</span> &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-comment">((__u32)</span><span class="hljs-comment">(c)</span> &lt;&lt; <span class="hljs-number">16</span>) | <span class="hljs-comment">((__u32)</span><span class="hljs-comment">(d)</span> &lt;&lt; <span class="hljs-number">24</span>))<br></code></pre></td></tr></table></figure><p><img src="/images/media/2018/06/1599061828.png" alt="V4L2-FourCC.png"></p><p>这些<code>FourCC</code>的形式，与<code>Apple</code>中的形式，是不相同的：一种是<code>((__u32)(a) | ((__u32)(b) &lt;&lt; 8) | ((__u32)(c) &lt;&lt; 16) | ((__u32)(d) &lt;&lt; 24))</code>，而另一种是<code>&#39;abcd&#39;</code>。</p><p>为了将<code>V4L2</code>中的<code>FourCC</code>转换为<code>C字符串</code>（<code>v4l2_fourcc(&#39;B&#39;, &#39;G&#39;, &#39;R&#39;, &#39;A&#39;)</code>转换为<code>&quot;BGRA&quot;</code>），可以使用这样的宏：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lisp">#define DGV4L2FourCC2String(<span class="hljs-name">__FOURCC__</span>) ((<span class="hljs-name">char</span> [<span class="hljs-number">5</span>])\<br>&#123;\<br>     (<span class="hljs-name">__FOURCC__</span>)        &amp; <span class="hljs-number">0</span>xFF,\<br>    ((<span class="hljs-name">__FOURCC__</span>) &gt;&gt;  <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0</span>xFF,\<br>    ((<span class="hljs-name">__FOURCC__</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0</span>xFF,\<br>    ((<span class="hljs-name">__FOURCC__</span>) &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0</span>xFF,\<br>    <span class="hljs-number">0</span>\<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>FourCC</tag>
      
      <tag>流媒体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建iOS静态库及动态库</title>
    <link href="/2018/04/15/%E6%9E%84%E5%BB%BAiOS%E9%9D%99%E6%80%81%E5%BA%93%E5%8F%8A%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <url>/2018/04/15/%E6%9E%84%E5%BB%BAiOS%E9%9D%99%E6%80%81%E5%BA%93%E5%8F%8A%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常，需要配置<code>host</code>，以及所使用的<code>SDK</code>所在的目录、<code>C</code>编译器路径、<code>C++</code>编译器路径。</p><p><code>host</code>通常使用<code>--host</code>选项进行指定。</p><p><code>SDK</code>通常使用<code>--with-sysroot</code>选项或<code>--sysroot</code>选项进行指定。</p><p><code>C</code>编译器可使用<code>xcrun -f clang</code>取得。</p><p><code>C++</code>编译器可使用<code>xcrun -f clang++</code>取得。</p><p><code>--prefix</code>选项指定构建输出目录。</p><p><code>--disable-shared</code>及<code>--enable-static</code>选项指定生成静态库。</p><p><code>--enable-shared</code>及<code>--disable-static</code>选项指定生成动态库。</p><p>具体选项可在各第三方库根目录下执行<code>./configure --help</code>进行查看。</p><h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><ul><li>对于<code>arm64</code>架构，<code>host</code>为<code>aarch64-apple-darwin</code></li><li>对于<code>armv6</code>、<code>armv7</code>、<code>armv7s</code>架构，<code>host</code>为<code>arm-apple-darwin</code></li><li>对于<code>i386</code>架构，<code>host</code>为<code>i386-apple-darwin</code></li><li>对于<code>x86_64</code>架构，<code>host</code>为<code>x86_64-apple-darwin</code></li></ul><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><ul><li>对于<code>arm</code>架构，可使用<code>xcrun --show-sdk-path --sdk iphoneos</code>取得</li><li>对于<code>i386</code>、<code>x86_64</code>架构，可使用<code>xcrun --show-sdk-path --sdk iphonesimulator</code>取得</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在编译时，也可能需要修改如下环境变量，如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CC</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$CLANG</span> -arch <span class="hljs-variable">$a</span> -isysroot <span class="hljs-variable">$SDK</span>&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CXX</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$CLANG_XX</span> -arch <span class="hljs-variable">$a</span> -isysroot <span class="hljs-variable">$SDK</span>&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CXXFLAGS</span>=<span class="hljs-string">&quot;-arch <span class="hljs-variable">$a</span> -isysroot <span class="hljs-variable">$SDK</span>&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;-arch <span class="hljs-variable">$a</span> -isysroot <span class="hljs-variable">$SDK</span>&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LDFLAGS</span>=<span class="hljs-string">&quot;-isysroot <span class="hljs-variable">$SDK</span>&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LIBS</span>=<span class="hljs-string">&quot;-L<span class="hljs-variable">$SDK</span>/usr/lib&quot;</span><br></code></pre></td></tr></table></figure><p>其中，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CLANG</span>=<span class="hljs-string">&quot;`xcrun -f clang`&quot;</span><br><span class="hljs-attr">CLANG_XX</span>=<span class="hljs-string">&quot;`xcrun -f clang++`&quot;</span><br><span class="hljs-attr">SDK</span>=<span class="hljs-string">&quot;`xcrun --show-sdk-path --sdk iphoneXXX`&quot;</span><br></code></pre></td></tr></table></figure><h2 id="将多个只支持单个CPU架构的库文件合并为通用库文件"><a href="#将多个只支持单个CPU架构的库文件合并为通用库文件" class="headerlink" title="将多个只支持单个CPU架构的库文件合并为通用库文件"></a>将多个只支持单个CPU架构的库文件合并为通用库文件</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">lipo <span class="hljs-keyword">lib</span>-armv7s.a <span class="hljs-keyword">lib</span>-arm64.a -<span class="hljs-keyword">create</span> -<span class="hljs-keyword">output</span> <span class="hljs-keyword">lib</span>-fat.a<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">lipo <span class="hljs-keyword">lib</span>-armv7s.dylib <span class="hljs-keyword">lib</span>-arm64.dylib -<span class="hljs-keyword">create</span> -<span class="hljs-keyword">output</span> <span class="hljs-keyword">lib</span>-fat.dylib<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WKWebView长按图片识别二维码</title>
    <link href="/2017/03/21/WKWebView%E9%95%BF%E6%8C%89%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <url>/2017/03/21/WKWebView%E9%95%BF%E6%8C%89%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在默认情况下，长按<code>WKWebView</code>中的图片，会弹出<code>image save sheet</code>：</p><p><img src="/images/media/2017/03/1301846825.png" alt="image save sheet"></p><p>关于这个<code>image save sheet</code>，在官方文档中可以得到印证：</p><p><code>Safari Web Content Guide</code> -&gt; <code>Handling Events</code> -&gt; <code>One-Finger Events</code>章节中有这样一句话：<code>However, if the user touches and holds an image, the image save sheet appears instead of an information bubble.</code></p><p>此处使用的是<code>WKWebView</code>，但为什么要提到<code>Safari</code>相关的内容？原因很简单，<code>iOS</code>中的<code>Safari</code>应用、<code>SFSafariViewController</code>、<code>WKWebView</code>，底层使用的是相同的东西。</p><p>在<code>Handling Events</code>这一章中，有提及一些具体的事件、如何阻止事件的默认行为，以及支持的事件类型。</p><p>参考链接：<a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#">Safari Web Content Guide 之 Handling Events</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>为了实现长按图片识别二维码这样的功能，就必须将系统默认的<code>image save sheet</code>屏蔽掉。</p><p>思路如下：</p><ol><li>在网页<code>DOM</code>加载完成后，注入<code>JS</code>脚本</li><li>在<code>JS</code>脚本中，找到所有的<code>image</code>元素，并为它们添加<code>touch</code>相关的事件</li><li>长按后阻止其默认行为，获取<code>image</code>元素的<code>src</code>，将结果传递给<code>native</code>进行处理：下载图片，并识别，判断其是否包含二维码</li><li>如果包含二维码，则弹出相关的提示</li></ol><p><strong>注意事项</strong>：</p><p>上面说的是<code>touch</code>相关的事件，了解前端的开发者应该会知道<code>mouse</code>相关的事件，这两者在手机端上的表现，还是有区别的：当使用<code>mouse</code>相关的事件时，如果手指一直按在屏幕上时，会导致无法触发函数的执行，只有松开手指后才会触发，而<code>touch</code>相关的事件，则不会出现这样的情况。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现预期的效果，会用到<code>jQuery</code>、处理<code>JS</code>回调的<code>WKScriptMessageHandler</code>。</p><h3 id="约定ScriptMessageHandler名称"><a href="#约定ScriptMessageHandler名称" class="headerlink" title="约定ScriptMessageHandler名称"></a>约定ScriptMessageHandler名称</h3><p>这里约定其名称为<code>webImgLongPressHandler</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> scriptMessageHandlerName: <span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;webImgLongPressHandler&quot;</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        <br>        <span class="hljs-keyword">let</span> userContentController <span class="hljs-operator">=</span> <span class="hljs-type">WKUserContentController</span>()<br>        userContentController.add(<span class="hljs-keyword">self</span>, name: scriptMessageHandlerName)<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="编写JS脚本"><a href="#编写JS脚本" class="headerlink" title="编写JS脚本"></a>编写JS脚本</h3><p>这里使用到了<code>jQuery</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> imageElements = <span class="hljs-variable language_">document</span>.<span class="hljs-property">images</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imageElements.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> imageElement = imageElements[i];<br>            <span class="hljs-keyword">var</span> intervalID = <span class="hljs-number">0</span>;<br>            imageElement.<span class="hljs-property">ontouchstart</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                <span class="hljs-comment">// 阻止默认行为</span><br>                e.<span class="hljs-title function_">preventDefault</span>();<br>                <span class="hljs-comment">// 长按时间设置为1秒</span><br>                intervalID = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<br>                    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(intervalID);<br>                        <span class="hljs-comment">// 将消息传递给native进行处理，这里使用的就是上面约定好的名称：webImgLongPressHandler</span><br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkit</span>.<span class="hljs-property">messageHandlers</span>.<span class="hljs-property">webImgLongPressHandler</span>.<span class="hljs-title function_">postMessage</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">src</span>);<br>                    &#125;,<br>                    <span class="hljs-number">1000</span><br>                );<br>            &#125;;<br>            imageElement.<span class="hljs-property">ontouchend</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(intervalID);<br>            &#125;;<br>            imageElement.<span class="hljs-property">ontouchcancel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(intervalID);<br>            &#125;<br>        &#125;;<br>    &#125;<br>);<br></code></pre></td></tr></table></figure><p>将上面的脚本存放到名为<code>image-element-long-press.js</code>的文件中。</p><p>将脚本注入到<code>WKWebView</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jqPath <span class="hljs-operator">=</span> <span class="hljs-type">Bundle</span>.main.path(forResource: <span class="hljs-string">&quot;jquery-3.1.1.min&quot;</span>, ofType: <span class="hljs-string">&quot;js&quot;</span>)<br><span class="hljs-keyword">let</span> jsPath <span class="hljs-operator">=</span> <span class="hljs-type">Bundle</span>.main.path(forResource: <span class="hljs-string">&quot;image-element-long-press&quot;</span>, ofType: <span class="hljs-string">&quot;js&quot;</span>)<br><span class="hljs-keyword">let</span> jqContent <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">String</span>.<span class="hljs-keyword">init</span>(contentsOfFile: jqPath<span class="hljs-operator">!</span>)<br><span class="hljs-keyword">let</span> jsContent <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">String</span>.<span class="hljs-keyword">init</span>(contentsOfFile: jsPath<span class="hljs-operator">!</span>)<br><span class="hljs-keyword">let</span> injectionContent <span class="hljs-operator">=</span> <span class="hljs-type">String</span>.<span class="hljs-keyword">init</span>(format: <span class="hljs-string">&quot;%@<span class="hljs-subst">\n</span>%@&quot;</span>, jqContent, jsContent)<br><br><span class="hljs-keyword">let</span> userScript <span class="hljs-operator">=</span> <span class="hljs-type">WKUserScript</span>.<span class="hljs-keyword">init</span>(source: injectionContent, injectionTime: .atDocumentEnd, forMainFrameOnly: <span class="hljs-literal">true</span>)<br>userContentController.addUserScript(userScript)<br><br><span class="hljs-keyword">let</span> config <span class="hljs-operator">=</span> <span class="hljs-type">WKWebViewConfiguration</span>.<span class="hljs-keyword">init</span>()<br>config.userContentController <span class="hljs-operator">=</span> userContentController<br><br><span class="hljs-keyword">let</span> webView <span class="hljs-operator">=</span> <span class="hljs-type">WKWebView</span>.<span class="hljs-keyword">init</span>(frame: <span class="hljs-keyword">self</span>.view.bounds, configuration: config)<br></code></pre></td></tr></table></figure><h3 id="处理识别"><a href="#处理识别" class="headerlink" title="处理识别"></a>处理识别</h3><p>当长按图片时，就会发<code>webImgLongPressHandler</code>消息，<code>native</code>收到后进行处理：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// MARK: - WKScriptMessageHandler</span><br>public func user<span class="hljs-constructor">ContentController(<span class="hljs-params">_</span> <span class="hljs-params">userContentController</span>: WKUserContentController, <span class="hljs-params">didReceive</span> <span class="hljs-params">message</span>: WKScriptMessage)</span> &#123;<br>    <span class="hljs-keyword">if</span> message.name<span class="hljs-operator"> ==  </span>self.scriptMessageHandlerName &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> urlString = message.body <span class="hljs-keyword">as</span>? String &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> url = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>init(<span class="hljs-built_in">string</span>: urlString) &#123;<br>                <span class="hljs-keyword">let</span> sessionConfig = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLSessionConfiguration</span>.</span></span>default<br>                <span class="hljs-keyword">let</span> session = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLSession</span>.</span></span>init(configuration: sessionConfig)<br>                <br>                <span class="hljs-keyword">let</span> dataTask = session.data<span class="hljs-constructor">Task(<span class="hljs-params">with</span>: <span class="hljs-params">url</span>, <span class="hljs-params">completionHandler</span>: &#123; (<span class="hljs-params">data</span>, <span class="hljs-params">response</span>, <span class="hljs-params">error</span>)</span> <span class="hljs-keyword">in</span><br>                    <span class="hljs-keyword">if</span> data != nil &#123;<br>                        <span class="hljs-keyword">let</span> img = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIImage</span>.</span></span>init(data: data!)<br>                        <span class="hljs-keyword">let</span> codes = self.<span class="hljs-constructor">QRcodesInImage(<span class="hljs-params">img</span>)</span><br>                        <span class="hljs-keyword">if</span> codes != nil<span class="hljs-operator"> &amp;&amp; </span>codes!.count &gt; <span class="hljs-number">0</span> &#123;<br>                            print(<span class="hljs-string">&quot;QRcodes: \(self.QRcodesInImage(img))&quot;</span>)<br>                            <br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DispatchQueue</span>.</span></span>main.async &#123;<br>                                <span class="hljs-comment">// 弹出提示</span><br>                                <span class="hljs-keyword">let</span> sheet = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIAlertController</span>.</span></span>init(title: nil, message: nil, preferredStyle: .actionSheet)<br>                                sheet.add<span class="hljs-constructor">Action(UIAlertAction.<span class="hljs-params">init</span>(<span class="hljs-params">title</span>: <span class="hljs-string">&quot;识别二维码&quot;</span>, <span class="hljs-params">style</span>: .<span class="hljs-params">default</span>, <span class="hljs-params">handler</span>: &#123; (<span class="hljs-params">action</span>)</span> <span class="hljs-keyword">in</span><br>                                    var urls = <span class="hljs-literal">[URL]</span><span class="hljs-literal">()</span><br>                                    <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> codes! &#123;<br>                                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> url = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>init(<span class="hljs-built_in">string</span>: code) &#123;<br>                                            <span class="hljs-keyword">if</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIApplication</span>.</span></span>shared.can<span class="hljs-constructor">OpenURL(<span class="hljs-params">url</span>)</span> &#123;<br>                                                urls.append(url)<br>                                            &#125;<br>                                        &#125;<br>                                    &#125;<br>                                    <span class="hljs-keyword">let</span> urlSheet = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIAlertController</span>.</span></span>init(title: nil, message: nil, preferredStyle: .actionSheet)<br>                                    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls &#123;<br>                                        <span class="hljs-keyword">let</span> title = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>init(format: <span class="hljs-string">&quot;打开%@&quot;</span>, url.absoluteString)<br>                                        urlSheet.add<span class="hljs-constructor">Action(UIAlertAction.<span class="hljs-params">init</span>(<span class="hljs-params">title</span>: <span class="hljs-params">title</span>, <span class="hljs-params">style</span>: .<span class="hljs-params">default</span>, <span class="hljs-params">handler</span>: &#123; (<span class="hljs-params">action</span>)</span> <span class="hljs-keyword">in</span><br>                                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIApplication</span>.</span></span>shared.<span class="hljs-keyword">open</span>(url, options: <span class="hljs-literal">[:]</span>, completionHandler: nil)<br>                                        &#125;))<br>                                    &#125;<br>                                    urlSheet.add<span class="hljs-constructor">Action(UIAlertAction.<span class="hljs-params">init</span>(<span class="hljs-params">title</span>: <span class="hljs-string">&quot;取消&quot;</span>, <span class="hljs-params">style</span>: .<span class="hljs-params">cancel</span>, <span class="hljs-params">handler</span>: &#123; (<span class="hljs-params">action</span>)</span> <span class="hljs-keyword">in</span><br>                                        <br>                                    &#125;))<br>                                    self.present(urlSheet, animated: <span class="hljs-literal">true</span>, completion: nil)<br>                                &#125;))<br>                                sheet.add<span class="hljs-constructor">Action(UIAlertAction.<span class="hljs-params">init</span>(<span class="hljs-params">title</span>: <span class="hljs-string">&quot;取消&quot;</span>, <span class="hljs-params">style</span>: .<span class="hljs-params">cancel</span>, <span class="hljs-params">handler</span>: &#123; (<span class="hljs-params">action</span>)</span> <span class="hljs-keyword">in</span><br>                                    <br>                                &#125;))<br>                                self.present(sheet, animated: <span class="hljs-literal">true</span>, completion: nil)<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;)<br>                dataTask.resume<span class="hljs-literal">()</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处使用<code>ZBarSDK</code>进行二维码的识别（使用系统提供的<code>API</code>时，对于一张图片上有多个二维码的情况，虽然<code>CIDetector</code>的<code>featuresInImage</code>方法返回的是数组，但在测试时，调整了参数，返回的数组一直只包含一个元素）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">QRcodesInImage</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">image</span>: <span class="hljs-type">UIImage</span>?) -&gt; <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;? &#123;<br>    <span class="hljs-keyword">if</span> image <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> scanner <span class="hljs-operator">=</span> <span class="hljs-type">ZBarImageScanner</span>()<br>    <span class="hljs-keyword">let</span> barImg <span class="hljs-operator">=</span> <span class="hljs-type">ZBarImage</span>.<span class="hljs-keyword">init</span>(cgImage: image<span class="hljs-operator">!</span>.cgImage)<br>    <span class="hljs-keyword">let</span> count <span class="hljs-operator">=</span> scanner.scanImage(barImg)<br>    <span class="hljs-keyword">if</span> count <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> codes <span class="hljs-operator">=</span> [<span class="hljs-type">String</span>]()<br>    <span class="hljs-keyword">let</span> symbolSet <span class="hljs-operator">=</span> scanner.results<br>    <span class="hljs-keyword">var</span> symbol: <span class="hljs-type">OpaquePointer</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> symbolSet<span class="hljs-operator">!</span>.count &#123;<br>        <span class="hljs-keyword">if</span> i <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            symbol <span class="hljs-operator">=</span> zbar_symbol_set_first_symbol(symbolSet<span class="hljs-operator">!</span>.zbarSymbolSet)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> symbol <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            symbol <span class="hljs-operator">=</span> zbar_symbol_next(symbol)<br>        &#125;<br>        <span class="hljs-keyword">if</span> symbol <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> zbar_symbol_get_data(symbol)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> code <span class="hljs-operator">=</span> <span class="hljs-type">String</span>.<span class="hljs-keyword">init</span>(utf8String: data<span class="hljs-operator">!</span>) &#123;<br>                codes.append(code)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> codes.count <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">?</span> codes : <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="webkit-touch-callout"><a href="#webkit-touch-callout" class="headerlink" title="-webkit-touch-callout"></a>-webkit-touch-callout</h3><p>在阻止默认行为时，上面的示例中使用的是<code>preventDefault()</code>函数。也有另外一个选择，就是使用<code>-webkit-touch-callout</code>。</p><p>参见苹果官方文档：</p><p><code>Safari CSS Reference</code> -&gt; <code>Supported CSS Properties</code> -&gt; <code>User Interface</code></p><p>链接：<a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_touch_callout">Safari CSS Reference: -webkit-touch-callout</a></p><p>其它参考：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-touch-callout">mozilla: -webkit-touch-callout 中文版</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-touch-callout">mozilla: -webkit-touch-callout 英文版</a></li></ul><p>语法可参考：</p><ul><li><a href="http://www.w3school.com.cn/jsref/dom_obj_style.asp">w3school Style 对象</a></li></ul><p>也就是：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&quot;id&quot;</span>)<span class="hljs-selector-class">.style</span>.property=<span class="hljs-string">&quot;值&quot;</span><br></code></pre></td></tr></table></figure><p><code>backgroundColor</code>与<code>background-color</code>是对应的，类似地，应是<code>webkitTouchCallout</code>与<code>-webkit-touch-callout</code>相对应。</p><p>使用时，将其设置为<code>none</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">imageElement.style.webkitTouchCallout</span> = <span class="hljs-string">&quot;none&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，<code>preventDefault()</code>与<code>-webkit-touch-callout</code>，在效果上是有区别的。</p><p>二者都可以阻止默认的<code>save image sheet</code>。</p><p>不同点如下：</p><ul><li><p>图片上产生的事件使用<code>preventDefault()</code>后，就无法选择该图片元素，无法通过双击该图片缩放网页</p></li><li><p>将图片的样式中的<code>-webkit-touch-callout</code>设置为<code>none</code>，可以选择该图片元素，可以通过双击该图片缩放网页</p></li></ul><p>个人觉得，在这种需求下，长按后界面中出现<code>复制</code>等<code>Menu</code>是不太好看的，因此建议使用<code>preventDefault()</code>。</p><blockquote><p>附上代码链接：<br><a href="https://github.com/Daniate/WKWebViewQRcode">https://github.com/Daniate/WKWebViewQRcode</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读取jar包内的资源文件</title>
    <link href="/2017/03/18/%E8%AF%BB%E5%8F%96jar%E5%8C%85%E5%86%85%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <url>/2017/03/18/%E8%AF%BB%E5%8F%96jar%E5%8C%85%E5%86%85%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>当<code>Java</code>项目被打为可执行的<code>jar</code>包后，执行<code>jar</code>包时，如果读取相关的资源文件失败，可以按以下示例对源代码进行修改（既可以在<code>IDE</code>中运行项目时正确读取，也可以在执行<code>jar</code>包时正确读取）：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Properties prop = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br>String resourceName = <span class="hljs-string">&quot;com/daniate/resource/configInPkg.properties&quot;</span>;<br><span class="hljs-comment">//String resourceName = &quot;configOutsidePkg.properties&quot;;</span><br>&#123;<br>    <span class="hljs-comment">// 最前面无斜杠</span><br>    InputStream input = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ClassLoader()</span>.get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-params">resourceName</span>)</span>;<br>    prop.load(input);<br>&#125;<br>&#123;<br>    <span class="hljs-comment">// 最前面无斜杠</span><br>    InputStream input = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ClassLoader()</span>.get<span class="hljs-constructor">Resource(<span class="hljs-params">resourceName</span>)</span>.<span class="hljs-keyword">open</span><span class="hljs-constructor">Stream()</span>;<br>    prop.load(input);<br>&#125;<br>&#123;<br>    <span class="hljs-comment">// 最前面有斜杠</span><br>    InputStream input = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-params">resourceName</span>)</span>;<br>    prop.load(input);<br>&#125;<br>&#123;<br>    <span class="hljs-comment">// 最前面有斜杠</span><br>    InputStream input = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Resource(<span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-params">resourceName</span>)</span>.<span class="hljs-keyword">open</span><span class="hljs-constructor">Stream()</span>;<br>    prop.load(input);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的四种写法任选其一。</p><p>如果使用了<code>getClassLoader()</code>，在调用<code>getResourceAsStream</code>或<code>getResource</code>时，传入的参数就不能以<code>/</code>开始；反之，必须以<code>/</code>开始。</p><p>关于读取失败，可能是以下写法引起的（虽然在<code>IDE</code>中运行项目时，这些写法是可以读取到资源文件的）：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打成jar包后运行： Caused by:</span><br><span class="hljs-comment">     * java.io.FileNotFoundException:</span><br><span class="hljs-comment">     * file:\E:\workspace-netbeans\XX\dist\XX.jar!\configOutsidePkg.properties</span><br><span class="hljs-comment">     * (文件名、目录名或卷标语法不正确。)</span><br><span class="hljs-comment">     */</span><br>    URL url = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Resource(<span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-params">resourceName</span>)</span>;<br>    Reader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileReader(<span class="hljs-params">url</span>.<span class="hljs-params">getPath</span>()</span>);<br>    prop.load(reader);<br>&#125;<br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打成jar包后运行： Caused by:</span><br><span class="hljs-comment">     * java.lang.IllegalArgumentException: URI is not hierarchical</span><br><span class="hljs-comment">     */</span><br>    URL url = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Resource(<span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-params">resourceName</span>)</span>;<br>    Reader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileReader(<span class="hljs-params">new</span> File(<span class="hljs-params">url</span>.<span class="hljs-params">toURI</span>()</span>));<br>    prop.load(reader);<br>&#125;<br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打成jar包后运行：Caused by:</span><br><span class="hljs-comment">     * java.io.FileNotFoundException: src\config.properties</span><br><span class="hljs-comment">     * (系统找不到指定的路径。)</span><br><span class="hljs-comment">     */</span><br>    Reader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileReader(<span class="hljs-params">new</span> File(<span class="hljs-string">&quot;src/&quot;</span> + <span class="hljs-params">resourceName</span>)</span>);<br>    prop.load(reader);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NetBeans相关问题</title>
    <link href="/2017/03/12/NetBeans%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2017/03/12/NetBeans%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="标签文字过小"><a href="#标签文字过小" class="headerlink" title="标签文字过小"></a>标签文字过小</h2><p>更换了<code>4K显示器</code>后，<code>NetBeans</code>各个标签上的文字实在是太小了，即便是调整了<code>控制面板-&gt;显示-&gt;设置自定义文本大小(DPI)</code>，设置成了<code>200%</code>，也还是小得看着不舒服。</p><p>搜索了一下，找到了解决办法，记录之：</p><p>修改<code>NetBeans</code>安装目录下的<code>etc\netbeans.conf</code>，在<code>netbeans_default_options</code>对应的值中追加<code>--fontsize 24</code>（前面需要使用空格隔开），然后重启<code>NetBeans</code>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">netbeans_default_options</span>=<span class="hljs-string">&quot;-J-client -J-Xss2m -J-Xms32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.java2d.dpiaware=true -J-Dsun.zip.disableMemoryMapping=true --fontsize 24&quot;</span><br></code></pre></td></tr></table></figure><p>参见：</p><ul><li><a href="http://wiki.netbeans.org/FaqNetbeansConf">http://wiki.netbeans.org/FaqNetbeansConf</a></li><li><a href="http://wiki.netbeans.org/FaqFontSize">http://wiki.netbeans.org/FaqFontSize</a></li></ul><h2 id="在GlassFish中运行项目时，提示access-denied"><a href="#在GlassFish中运行项目时，提示access-denied" class="headerlink" title="在GlassFish中运行项目时，提示access denied"></a>在GlassFish中运行项目时，提示access denied</h2><p>具体提示如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">access</span> denied (&quot;java.net.SocketPermission&quot; &quot;localhost:1527&quot; &quot;listen,resolve&quot;)<br>java.<span class="hljs-keyword">security</span>.AccessControlException: <span class="hljs-keyword">access</span> denied (&quot;java.net.SocketPermission&quot; &quot;localhost:1527&quot; &quot;listen,resolve&quot;)<br></code></pre></td></tr></table></figure><p>解决方法：</p><p>找到<code>jre</code>目录，比如<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre</code>，进入该目录下的<code>lib/security</code>目录，找到<code>java.policy</code>并编辑（如果存在权限问题，就使用<code>sudo</code>），在<code>grant &#123;...&#125;</code>块中追加下面的内容：</p><p><code>permission java.net.SocketPermission &quot;localhost:1527&quot;, &quot;listen&quot;;</code></p><p>编辑后，内容如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs stata">grant &#123;<br>        <span class="hljs-comment">// Allows any thread to stop itself using the java.lang.Thread.stop()</span><br>        <span class="hljs-comment">// method that takes no argument.</span><br>        <span class="hljs-comment">// Note that this permission is granted by default only to remain</span><br>        <span class="hljs-comment">// backwards compatible.</span><br>        <span class="hljs-comment">// It is strongly recommended that you either remove this permission</span><br>        <span class="hljs-comment">// from this policy file or further restrict it to code sources</span><br>        <span class="hljs-comment">// that you specify, because Thread.stop() is potentially unsafe.</span><br>        <span class="hljs-comment">// See the API specification of java.lang.Thread.stop() for more</span><br>        <span class="hljs-comment">// information.</span><br>        permission java.lang.RuntimePermission <span class="hljs-string">&quot;stopThread&quot;</span>;<br><br>        <span class="hljs-comment">// allows anyone to listen on dynamic ports</span><br>        permission java.<span class="hljs-keyword">net</span>.SocketPermission <span class="hljs-string">&quot;localhost:0&quot;</span>, <span class="hljs-string">&quot;listen&quot;</span>;<br><br>        <span class="hljs-comment">// &quot;standard&quot; properies that can be read by anyone</span><br><br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.version&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vendor&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vendor.url&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.class.version&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;os.name&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;os.version&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;os.arch&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;file.separator&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;path.separator&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;line.separator&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br><br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.specification.version&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.specification.vendor&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.specification.name&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br><br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vm.specification.version&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vm.specification.vendor&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vm.specification.name&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vm.version&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vm.vendor&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br>        permission java.util.PropertyPermission <span class="hljs-string">&quot;java.vm.name&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>;<br><br>        permission java.<span class="hljs-keyword">net</span>.SocketPermission <span class="hljs-string">&quot;localhost:1527&quot;</span>, <span class="hljs-string">&quot;listen&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>参见：</p><ul><li><a href="http://stackoverflow.com/questions/21154400/unable-to-start-derby-database-from-netbeans-7-4">http://stackoverflow.com/questions/21154400/unable-to-start-derby-database-from-netbeans-7-4</a></li></ul><h2 id="正在启动-Tomcat-进程…正在等待-Tomcat…"><a href="#正在启动-Tomcat-进程…正在等待-Tomcat…" class="headerlink" title="正在启动 Tomcat 进程…正在等待 Tomcat…"></a>正在启动 Tomcat 进程…正在等待 Tomcat…</h2><p>现象：运行某个项目时，已输出<code>org.apache.catalina.startup.Catalina.start Server startup in xxx ms</code>，但也提示</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mercury">Deploying on Apache Tomcat <span class="hljs-number">8.0</span>.<span class="hljs-number">33</span><br>    profile <span class="hljs-keyword">mode</span>: <span class="hljs-built_in">false</span><br>    debug <span class="hljs-keyword">mode</span>: <span class="hljs-built_in">false</span><br>    force redeploy: <span class="hljs-built_in">true</span><br>正在启动 Tomcat 进程...<br>正在等待 Tomcat...<br>启动 Tomcat 失败。<br></code></pre></td></tr></table></figure><p>如果通过运行<code>Tomcat</code>脚本，可以启动，但又出现了上面的现象，很可能就是<code>NetBeans</code>中设置了代理：</p><p><img src="/images/media/2017/03/1566665529.png" alt="代理设置"></p><p>将其设置为<code>无代理</code>就可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>IDE</tag>
      
      <tag>NetBeans</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一处JSON处理上的小细节</title>
    <link href="/2017/03/12/%E4%B8%80%E5%A4%84JSON%E5%A4%84%E7%90%86%E4%B8%8A%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
    <url>/2017/03/12/%E4%B8%80%E5%A4%84JSON%E5%A4%84%E7%90%86%E4%B8%8A%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<p>直接说<code>JSON</code>，感觉语义不太明确，最好还是说成<code>JSON对象</code>或<code>JSON字符串</code>。</p><p>假设前端通过<code>ajax</code>回调函数接收数据，参数名为<code>data</code>：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$.post(<br>        <span class="hljs-string">&quot;/xxx/yyy.do&quot;</span>,<br>        $(<span class="hljs-string">&quot;#zzz-form&quot;</span>).serialize(),<br>        <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-comment">// to do something</span><br>        &#125;<br>);<br></code></pre></td></tr></table></figure><h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><p>当<code>Content-Type</code>被设置为<code>application/json</code>时：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">resp.setContentType(<span class="hljs-string">&quot;application/json; charset=UTF-8&quot;</span>);<br><span class="hljs-keyword">try</span> (PrintWriter <span class="hljs-keyword">out</span> = resp.getWriter()) &#123;<br>    <span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;&#123;\&quot;</span>status\<span class="hljs-string">&quot;: &quot;</span> + result.getStatus() + <span class="hljs-string">&quot;, \&quot;</span>reason\<span class="hljs-string">&quot;: \&quot;</span><span class="hljs-string">&quot; + result.getReason() + &quot;</span>\<span class="hljs-string">&quot;&#125;&quot;</span>);<br>    <span class="hljs-keyword">out</span>.flush();<br>&#125;<br></code></pre></td></tr></table></figure><p>前端收到的就是<code>JSON对象</code>，可以直接获取里面的属性：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-params">(data)</span> &#123;<br>    <span class="hljs-keyword">var</span> reason = data.reason;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON字符串"><a href="#JSON字符串" class="headerlink" title="JSON字符串"></a>JSON字符串</h2><p>当<code>Content-Type</code>不是<code>application/json</code>时，比如是<code>text/plain</code>：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">resp.setContentType(<span class="hljs-string">&quot;text/plain; charset=UTF-8&quot;</span>);<br><span class="hljs-keyword">try</span> (PrintWriter <span class="hljs-keyword">out</span> = resp.getWriter()) &#123;<br>    <span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;&#123;\&quot;</span>status\<span class="hljs-string">&quot;: &quot;</span> + result.getStatus() + <span class="hljs-string">&quot;, \&quot;</span>reason\<span class="hljs-string">&quot;: \&quot;</span><span class="hljs-string">&quot; + result.getReason() + &quot;</span>\<span class="hljs-string">&quot;&#125;&quot;</span>);<br>    <span class="hljs-keyword">out</span>.flush();<br>&#125;<br></code></pre></td></tr></table></figure><p>前端收到的就是<code>JSON字符串</code>，此时需要将其解析为<code>JSON对象</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data);<br>    <span class="hljs-keyword">var</span> reason = json.<span class="hljs-property">reason</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSLayoutAnchor</title>
    <link href="/2017/03/01/NSLayoutAnchor/"/>
    <url>/2017/03/01/NSLayoutAnchor/</url>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>苹果发布<code>iOS 6.0</code>时，为开发者提供了视图布局的利器——<code>Auto Layout</code>，用于替代<code>Frame-Based Layout</code>，以轻松方便地达到不同尺寸屏幕上界面的兼容适配。</p><p><code>Auto Layout</code>对应着一套<code>constraint-based layout system</code>（基于约束的布局系统），这套系统所使用的策略如下：</p><p><code>item1.attribute1 = multiplier × item2.attribute2 + constant</code></p><blockquote><p>上面出现的<code>=</code>，表示的是<code>等于</code>，而非<code>赋值</code>。另外，其中的<code>=</code>，也可以是<code>&gt;=</code>、<code>&lt;=</code>。</p></blockquote><p>对应地，有一个名为<code>NSLayoutConstraint</code>的类，用于构建相关的约束，其用于构建约束的方法如下：</p><ol><li><code>+ constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:</code></li><li><code>+ constraintsWithVisualFormat:options:metrics:views:</code></li></ol><p>一眼看上去，就能发现，第一个方法正好与上面提到的策略是一致的。</p><p>第二个方法，使用了所谓的<code>Visual Format Language</code>，比起第一个方法，复杂难用程度直接上升了一个台阶。比如<code>V:[topField]-10-[bottomField]</code>，其语法十分复杂，而且，改动视图对应的变量名称，也得修改这里面的内容，十分难用，因此，大多数开发者会选择使用第一种方法。</p><p>但很明显，如果视图中有很多约束，第一种方法用得多了，代码也是又臭又长，就显得不那么简洁明晰，因此也深受诟病，这就促使聪明的开发者创造出一些了不起的第三方类库，<code>SnapKit</code>出品的<a href="https://github.com/SnapKit/Masonry">Masonry</a>、<a href="https://github.com/SnapKit/SnapKit">SnapKit</a>就深受开发者的喜爱，已形成垄断，其它自动布局相关的第三方类库都在夹缝中生存。</p><h2 id="NSLayoutAnchor简述"><a href="#NSLayoutAnchor简述" class="headerlink" title="NSLayoutAnchor简述"></a><code>NSLayoutAnchor</code>简述</h2><p>苹果应该是了解到了相应的弊端，在发布<code>iOS 9.0</code>时，又提供了<code>NSLayoutAnchor</code>这样一个用于创建<code>NSLayoutConstraint</code>的工厂类。</p><p>使用<code>NSLayoutAnchor API</code>能让代码更简洁明晰，也更加易读，另外也提供了额外的类型检查，可以避免创建非法无效的约束。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// Creating constraints using NSLayoutConstraint</span><br><span class="hljs-title function_ invoke__">NSLayoutConstraint</span>(<span class="hljs-attr">item</span>: subview,<br>                   <span class="hljs-attr">attribute</span>: .Leading,<br>                   <span class="hljs-attr">relatedBy</span>: .Equal,<br>                   <span class="hljs-attr">toItem</span>: view,<br>                   <span class="hljs-attr">attribute</span>: .LeadingMargin,<br>                   <span class="hljs-attr">multiplier</span>: <span class="hljs-number">1.0</span>,<br>                   <span class="hljs-attr">constant</span>: <span class="hljs-number">0.0</span>).active = <span class="hljs-literal">true</span><br> <br><span class="hljs-title function_ invoke__">NSLayoutConstraint</span>(<span class="hljs-attr">item</span>: subview,<br>                   <span class="hljs-attr">attribute</span>: .Trailing,<br>                   <span class="hljs-attr">relatedBy</span>: .Equal,<br>                   <span class="hljs-attr">toItem</span>: view,<br>                   <span class="hljs-attr">attribute</span>: .TrailingMargin,<br>                   <span class="hljs-attr">multiplier</span>: <span class="hljs-number">1.0</span>,<br>                   <span class="hljs-attr">constant</span>: <span class="hljs-number">0.0</span>).active = <span class="hljs-literal">true</span><br> <br> <br><span class="hljs-comment">// Creating the same constraints using Layout Anchors</span><br>let margins = view.layoutMarginsGuide<br>subview.leadingAnchor.<span class="hljs-title function_ invoke__">constraintEqualToAnchor</span>(margins.leadingAnchor).active = <span class="hljs-literal">true</span><br>subview.trailingAnchor.<span class="hljs-title function_ invoke__">constraintEqualToAnchor</span>(margins.trailingAnchor).active = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>很明显，使用<code>NSLayoutAnchor API</code>确实很大程度地减少了代码量，也更加明晰。</p><blockquote><p>注意：<br>尽管提供了类型检查，但还是有可能创建出非法无效的约束。比如，由于<code>leadingAnchor</code>和<code>leftAnchor</code>都是<code>NSLayoutXAxisAnchor</code>，因此编译器允许在它们之间形成约束，但<code>Auto Layout</code>并不允许出现这样的混淆，因此，在运行时会出现崩溃。</p></blockquote><p>在使用<code>NSLayoutAnchor</code>时，并不是直接使用这个类，而是使用其具体的子类：</p><ul><li><code>NSLayoutXAxisAnchor</code>用于创建水平约束</li><li><code>NSLayoutYAxisAnchor</code>用于创建竖直约束</li><li><code>NSLayoutDimension</code>用于创建与视图宽高相关的约束</li></ul><p>在<code>UIKit/UIView.h</code>中，可以看到以下内容，很明显，都是具体的子类：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@class</span> <span class="hljs-title">NSLayoutXAxisAnchor</span>,<span class="hljs-title">NSLayoutYAxisAnchor</span>,<span class="hljs-title">NSLayoutDimension</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">UIView</span> (<span class="hljs-title">UIViewLayoutConstraintCreation</span>)</span><br><span class="hljs-comment">/* Constraint creation conveniences. See NSLayoutAnchor.h for details.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutXAxisAnchor</span> *leadingAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutXAxisAnchor</span> *trailingAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutXAxisAnchor</span> *leftAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutXAxisAnchor</span> *rightAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutYAxisAnchor</span> *topAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutYAxisAnchor</span> *bottomAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutDimension</span> *widthAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutDimension</span> *heightAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutXAxisAnchor</span> *centerXAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutYAxisAnchor</span> *centerYAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutYAxisAnchor</span> *firstBaselineAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSLayoutYAxisAnchor</span> *lastBaselineAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">9</span>_0);<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h2 id="在低版本系统中使用NSLayoutAnchor这样的API"><a href="#在低版本系统中使用NSLayoutAnchor这样的API" class="headerlink" title="在低版本系统中使用NSLayoutAnchor这样的API"></a>在低版本系统中使用<code>NSLayoutAnchor</code>这样的<code>API</code></h2><p>我仿照<code>NSLayoutAnchor API</code>写了<a href="https://github.com/Daniate/DGLayoutAnchor">DGLayoutAnchor</a>，可以在<code>iOS 6.0</code>及更高版本中使用，其使用方式与<code>NSLayoutAnchor</code>完全一模一样。</p><p>不过，得使用下面的这些锚点：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@interface</span> UIView (DGLayoutAnchor)<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_leadingAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_trailingAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_leftAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_rightAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_topAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_bottomAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutDimension   *dg_widthAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutDimension   *dg_heightAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_centerXAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_centerYAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_firstBaselineAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_lastBaselineAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_baselineAnchor;<span class="hljs-comment">// same as `dg_lastBaselineAnchor`</span><br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_leftMarginAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_rightMarginAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_topMarginAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_bottomMarginAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_leadingMarginAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_trailingMarginAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutXAxisAnchor *dg_centerXWithinMarginsAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutYAxisAnchor *dg_centerYWithinMarginsAnchor <span class="hljs-built_in">NS_AVAILABLE_IOS</span>(<span class="hljs-number">8</span>_0);<br><span class="hljs-variable">@end</span><br><br><span class="hljs-variable">@interface</span> UIViewController (DGLayoutAnchor)<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutGuideAnchor *dg_topLayoutGuideTopAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutGuideAnchor *dg_topLayoutGuideBottomAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutGuideAnchor *dg_bottomLayoutGuideTopAnchor;<br><span class="hljs-variable">@property</span> (readonly, strong) DGLayoutGuideAnchor *dg_bottomLayoutGuideBottomAnchor;<br><span class="hljs-variable">@end</span><br></code></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSLayoutConstraint</span> *lc1 = [v.dg_topAnchor equalTo:<span class="hljs-keyword">self</span>.dg_topLayoutGuideBottomAnchor constant:<span class="hljs-number">10</span>];<br><span class="hljs-built_in">NSLayoutConstraint</span> *lc2 = [v.dg_leadingAnchor equalTo:<span class="hljs-keyword">self</span>.view.dg_leadingMarginAnchor];<br><span class="hljs-built_in">NSLayoutConstraint</span> *lc3 = [<span class="hljs-keyword">self</span>.dg_bottomLayoutGuideTopAnchor equalTo:v.dg_bottomAnchor constant:<span class="hljs-number">10</span>];<br><span class="hljs-built_in">NSLayoutConstraint</span> *lc4 = [v.dg_trailingAnchor equalTo:<span class="hljs-keyword">self</span>.view.dg_trailingMarginAnchor];<br></code></pre></td></tr></table></figure><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>比起<a href="https://github.com/SnapKit/Masonry">Masonry</a>、<a href="https://github.com/SnapKit/SnapKit">SnapKit</a>，<code>NSLayoutAnchor API</code>还是有些小巫见大巫，在这两个优秀的第三方类库面前，苹果所提供的创建约束的<code>API</code>完全不能在开发者中流行起来，它们完全处在<a href="https://github.com/SnapKit/Masonry">Masonry</a>、<a href="https://github.com/SnapKit/SnapKit">SnapKit</a>大厦的地基之中，早已被开发者所唾弃、抛弃。</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dispatch semaphore</title>
    <link href="/2017/02/23/dispatch%20semaphore/"/>
    <url>/2017/02/23/dispatch%20semaphore/</url>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p><code>dispatch_semaphore_t</code>&#x2F;<code>DispatchSemaphore</code></p><p>表示计数信号量。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><code>Objective-C</code>：</p><ol><li><code>dispatch_semaphore_create</code></li><li><code>dispatch_semaphore_wait</code></li><li><code>dispatch_semaphore_signal</code></li></ol><p><code>Swift</code>：</p><ol><li><code>public init(value: Int)</code></li><li><code>public func wait()</code>、<code>public func wait(timeout: DispatchTime) -&gt; DispatchTimeoutResult</code>、<code>public func wait(wallTimeout: DispatchWallTime) -&gt; DispatchTimeoutResult</code></li><li><code>public func signal() -&gt; Int</code></li></ol><h4 id="dispatch-semaphore-create"><a href="#dispatch-semaphore-create" class="headerlink" title="dispatch_semaphore_create"></a>dispatch_semaphore_create</h4><p><code>dispatch_semaphore_t dispatch_semaphore_create(long value)</code></p><p>创建计数信号量，<code>value</code>为其起始值。不能传入小于<code>0</code>的值。如果创建失败，则返回<code>NULL</code>。</p><p>当两个线程需要协调特定事件的完成时，传入<code>0</code>。<br>传入大于<code>0</code>的值，在管理有限资源池时是非常有用的，传入的值等于资源池的大小。</p><p>当不再需要信号量时，应当调用<code>dispatch_release</code>释放信号量（<code>ARC</code>下不能使用该函数）。</p><h4 id="dispatch-semaphore-wait"><a href="#dispatch-semaphore-wait" class="headerlink" title="dispatch_semaphore_wait"></a>dispatch_semaphore_wait</h4><p><code>long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)</code></p><p>返回<code>0</code>，表示成功；否则，表示超时。</p><p>减小计数信号量。如果结果值小于<code>0</code>，这个函数在返回之前，会一直等待信号的发生。</p><h4 id="dispatch-semaphore-signal"><a href="#dispatch-semaphore-signal" class="headerlink" title="dispatch_semaphore_signal"></a>dispatch_semaphore_signal</h4><p><code>long dispatch_semaphore_signal(dispatch_semaphore_t dsema)</code></p><p>增大计数信号量。如果之前的值小于<code>0</code>，该函数会唤醒一个正在使用<code>dispatch_semaphore_wait</code>函数等待的线程。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>在上面的<code>dispatch_semaphore_create</code>解释中，已经提到过。</p><ol><li>对线程的运行进行协调</li><li>管理有限资源池</li></ol><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="协调线程"><a href="#协调线程" class="headerlink" title="协调线程"></a>协调线程</h3><p>也就是控制两个线程中特定事件的完成顺序。应用场景，比如经典的『生产-消费模型』。</p><p>在调用<code>dispatch_semaphore_create</code>函数时，必须传入<code>0</code>。</p><p>以下面的示例为基础：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        <br>        <span class="hljs-type">Thread</span>.detachNewThreadSelector(<span class="hljs-keyword">#selector</span>(_thread1(arg:)), toTarget: <span class="hljs-keyword">self</span>, with: <span class="hljs-literal">nil</span>)<br>        <span class="hljs-type">Thread</span>.detachNewThreadSelector(<span class="hljs-keyword">#selector</span>(_thread2(arg:)), toTarget: <span class="hljs-keyword">self</span>, with: <span class="hljs-literal">nil</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">_thread1</span>(<span class="hljs-params">arg</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>) &#123;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">5</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-keyword">#function</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot; <span class="hljs-subst">\(i)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">_thread2</span>(<span class="hljs-params">arg</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>) &#123;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">5</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-keyword">#function</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot; <span class="hljs-subst">\(i)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行上面的代码，结果可能如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">0</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">0</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">1</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">1</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">2</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">2</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">3</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">3</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">4</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>很明显，两个任务是交错运行的。</p><p>为了先执行完<code>_thread2</code>中的任务，再执行<code>_thread1</code>中的任务，使用信号量，就可以这样写：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <br>    <span class="hljs-keyword">let</span> sema: <span class="hljs-type">DispatchSemaphore</span> <span class="hljs-operator">=</span> <span class="hljs-type">DispatchSemaphore</span>(value: <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        <br>        <span class="hljs-type">Thread</span>.detachNewThreadSelector(<span class="hljs-keyword">#selector</span>(_thread1(arg:)), toTarget: <span class="hljs-keyword">self</span>, with: <span class="hljs-literal">nil</span>)<br>        <span class="hljs-type">Thread</span>.detachNewThreadSelector(<span class="hljs-keyword">#selector</span>(_thread2(arg:)), toTarget: <span class="hljs-keyword">self</span>, with: <span class="hljs-literal">nil</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">_thread1</span>(<span class="hljs-params">arg</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>) &#123;<br>        <span class="hljs-keyword">self</span>.sema.wait()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">5</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-keyword">#function</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot; <span class="hljs-subst">\(i)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">_thread2</span>(<span class="hljs-params">arg</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>) &#123;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">5</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-keyword">#function</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot; <span class="hljs-subst">\(i)</span>&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">self</span>.sema.signal()<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果就会是：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">0</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">1</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">2</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">3</span><br><span class="hljs-constructor">_thread2(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">4</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">0</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">1</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">2</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">3</span><br><span class="hljs-constructor">_thread1(<span class="hljs-params">arg</span>:)</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="管理资源池"><a href="#管理资源池" class="headerlink" title="管理资源池"></a>管理资源池</h3><p>也就是协调有限资源的使用。</p><p>在创建信号量时，传入的值，要与可用的资源的数量一致。</p><p>拿园区小轿车停车为例，停车位属于有限的资源。</p><p>当停车位被占用后，其它小轿车是不能再占用该停车位的。</p><p>当园区中没有可用的停车位时，其它小轿车就得等待停车位上的小轿车离开后，才能去占用那个停车位。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>: <span class="hljs-title class_">NSObject</span> &#123;<br>    <span class="hljs-keyword">let</span> identifier: <span class="hljs-type">String</span><br>    <br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">identifier</span>: <span class="hljs-type">String</span>) &#123;<br>        <span class="hljs-keyword">self</span>.identifier <span class="hljs-operator">=</span> identifier<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">var</span> description: <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">get</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;小车[<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.identifier)</span>]&#125;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 停车位</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParkingSpace</span>: <span class="hljs-title class_">NSObject</span> &#123;<br>    <span class="hljs-keyword">let</span> identifier: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> car: <span class="hljs-type">Car</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <br>    <span class="hljs-keyword">var</span> available: <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">get</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.car <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">identifier</span>: <span class="hljs-type">String</span>) &#123;<br>        <span class="hljs-keyword">self</span>.identifier <span class="hljs-operator">=</span> identifier<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">var</span> description: <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">get</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;停车位[<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.identifier)</span>]&#125;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <br>    <span class="hljs-keyword">let</span> cars: [<span class="hljs-type">Car</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">Car</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;京A 11111&quot;</span>),<br>        <span class="hljs-type">Car</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;京B 22222&quot;</span>),<br>        <span class="hljs-type">Car</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;京C 33333&quot;</span>),<br>        <span class="hljs-type">Car</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;京D 44444&quot;</span>),<br>        <span class="hljs-type">Car</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;京E 55555&quot;</span>),<br>    ]<br>    <span class="hljs-keyword">let</span> parkingSpaces: [<span class="hljs-type">ParkingSpace</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">ParkingSpace</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;001&quot;</span>),<br>        <span class="hljs-type">ParkingSpace</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;002&quot;</span>),<br>        <span class="hljs-type">ParkingSpace</span>.<span class="hljs-keyword">init</span>(identifier: <span class="hljs-string">&quot;003&quot;</span>),<br>    ]<br>    <span class="hljs-keyword">let</span> parkingSpaceSemaphore: <span class="hljs-type">DispatchSemaphore</span><br>    <span class="hljs-keyword">let</span> parkingSemaphore: <span class="hljs-type">DispatchSemaphore</span> <span class="hljs-operator">=</span> <span class="hljs-type">DispatchSemaphore</span>(value: <span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">nibName</span> <span class="hljs-params">nibNameOrNil</span>: <span class="hljs-type">String</span>?, <span class="hljs-params">bundle</span> <span class="hljs-params">nibBundleOrNil</span>: <span class="hljs-type">Bundle</span>?) &#123;<br>        <span class="hljs-keyword">self</span>.parkingSpaceSemaphore <span class="hljs-operator">=</span> <span class="hljs-type">DispatchSemaphore</span>(value: <span class="hljs-keyword">self</span>.parkingSpaces.count)<br>        <br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(nibName: nibNameOrNil, bundle: nibBundleOrNil)<br>    &#125;<br>    <br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">init?</span>(<span class="hljs-params">coder</span> <span class="hljs-params">aDecoder</span>: <span class="hljs-type">NSCoder</span>) &#123;<br>        <span class="hljs-keyword">self</span>.parkingSpaceSemaphore <span class="hljs-operator">=</span> <span class="hljs-type">DispatchSemaphore</span>(value: <span class="hljs-keyword">self</span>.parkingSpaces.count)<br>        <br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(coder: aDecoder)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        <br>        <span class="hljs-keyword">for</span> car <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.cars &#123;<br>            <span class="hljs-type">Thread</span>.detachNewThreadSelector(<span class="hljs-keyword">#selector</span>(_carParkingThread(arg:)), toTarget: <span class="hljs-keyword">self</span>, with: car)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">_carParkingThread</span>(<span class="hljs-params">arg</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> car <span class="hljs-operator">=</span> arg <span class="hljs-keyword">as?</span> <span class="hljs-type">Car</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(car)</span>要来停车啦&quot;</span>)<br>            <span class="hljs-keyword">self</span>.parkingSpaceSemaphore.wait()<br>            <span class="hljs-comment">// 由于同时可能存在多个可用的停车位，如果不加锁，查找到的停车位可能是同一个，两辆车不能同时占用同一个停车位</span><br>            <span class="hljs-keyword">self</span>.parkingSemaphore.wait()<br>            <span class="hljs-keyword">var</span> availablePSs: [<span class="hljs-type">ParkingSpace</span>] <span class="hljs-operator">=</span> []<br>            <span class="hljs-keyword">for</span> ps <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.parkingSpaces &#123;<br>                <span class="hljs-keyword">if</span> ps.available &#123;<br>                    availablePSs.append(ps)<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 由于是通过parkingSpaceSemaphore来通知有可用的停车位的，因此availablePSs中总会有元素，并不需要检查availablePSs.count是否大于0</span><br>            <span class="hljs-keyword">let</span> ps <span class="hljs-operator">=</span> availablePSs[<span class="hljs-type">Int</span>(arc4random_uniform(<span class="hljs-type">UInt32</span>(availablePSs.count)))]<br>            ps.car <span class="hljs-operator">=</span> car<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(car)</span>占用了<span class="hljs-subst">\(ps)</span>&quot;</span>)<br>            <span class="hljs-keyword">self</span>.parkingSemaphore.signal()<br>            <span class="hljs-keyword">let</span> ti <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> arc4random_uniform(<span class="hljs-number">5</span>)<br>            sleep(ti)<br>            ps.car <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>            <span class="hljs-comment">// 模拟为分钟</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(ti)</span>分钟后，<span class="hljs-subst">\(car)</span>离开了<span class="hljs-subst">\(ps)</span>&quot;</span>)<br>            <span class="hljs-keyword">self</span>.parkingSpaceSemaphore.signal()<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果可能如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;小车<span class="hljs-selector-attr">[京B 22222]</span>&#125;要来停车啦<br>&#123;小车<span class="hljs-selector-attr">[京A 11111]</span>&#125;要来停车啦<br>&#123;小车<span class="hljs-selector-attr">[京D 44444]</span>&#125;要来停车啦<br>&#123;小车<span class="hljs-selector-attr">[京C 33333]</span>&#125;要来停车啦<br>&#123;小车<span class="hljs-selector-attr">[京E 55555]</span>&#125;要来停车啦<br>&#123;小车<span class="hljs-selector-attr">[京B 22222]</span>&#125;占用了&#123;停车位<span class="hljs-selector-attr">[003]</span>&#125;<br>&#123;小车<span class="hljs-selector-attr">[京A 11111]</span>&#125;占用了&#123;停车位<span class="hljs-selector-attr">[002]</span>&#125;<br>&#123;小车<span class="hljs-selector-attr">[京D 44444]</span>&#125;占用了&#123;停车位<span class="hljs-selector-attr">[001]</span>&#125;<br><span class="hljs-number">1</span>分钟后，&#123;小车<span class="hljs-selector-attr">[京D 44444]</span>&#125;离开了&#123;停车位<span class="hljs-selector-attr">[001]</span>&#125;<br>&#123;小车<span class="hljs-selector-attr">[京C 33333]</span>&#125;占用了&#123;停车位<span class="hljs-selector-attr">[001]</span>&#125;<br><span class="hljs-number">4</span>分钟后，&#123;小车<span class="hljs-selector-attr">[京A 11111]</span>&#125;离开了&#123;停车位<span class="hljs-selector-attr">[002]</span>&#125;<br>&#123;小车<span class="hljs-selector-attr">[京E 55555]</span>&#125;占用了&#123;停车位<span class="hljs-selector-attr">[002]</span>&#125;<br><span class="hljs-number">5</span>分钟后，&#123;小车<span class="hljs-selector-attr">[京B 22222]</span>&#125;离开了&#123;停车位<span class="hljs-selector-attr">[003]</span>&#125;<br><span class="hljs-number">5</span>分钟后，&#123;小车<span class="hljs-selector-attr">[京C 33333]</span>&#125;离开了&#123;停车位<span class="hljs-selector-attr">[001]</span>&#125;<br><span class="hljs-number">3</span>分钟后，&#123;小车<span class="hljs-selector-attr">[京E 55555]</span>&#125;离开了&#123;停车位<span class="hljs-selector-attr">[002]</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7简易安装、配置、汉化GitLab社区版</title>
    <link href="/2017/01/02/CentOS%207%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%B1%89%E5%8C%96GitLab%E7%A4%BE%E5%8C%BA%E7%89%88/"/>
    <url>/2017/01/02/CentOS%207%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%B1%89%E5%8C%96GitLab%E7%A4%BE%E5%8C%BA%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p>因为是简易安装，不是使用源码进行安装，因此会使用 <code>GitLab</code>已集成的几个软件，比如，<code>Nginx</code>、<code>PostgreSQL</code>、<code>Redis</code>。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="方式一-yum安装"><a href="#方式一-yum安装" class="headerlink" title="方式一(yum安装)"></a>方式一(yum安装)</h3><p>在<a href="http://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/" title="http://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/">http://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/</a>这里，有详细的说明，不再赘述。</p><h3 id="方式二-rpm安装"><a href="#方式二-rpm安装" class="headerlink" title="方式二(rpm安装)"></a>方式二(rpm安装)</h3><p>可在下面的链接中找到相应版本的<code>rpm</code>安装包：</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" title="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></p><p>比如，要下载安装<code>gitlab-ce-8.15.1-ce.0.el7.x86_64.rpm</code>，可以使用如下命令：</p><p><code>curl -JO https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-8.15.1-ce.0.el7.x86_64.rpm</code></p><p>下载完成后，为这个<code>rpm</code>安装包添加<strong>可执行权限</strong>：</p><p><code>chmod +x gitlab-ce-8.15.1-ce.0.el7.x86_64.rpm</code></p><p>然后安装：</p><p><code>sudo rpm -i gitlab-ce-8.15.1-ce.0.el7.x86_64.rpm</code></p><p>安装结束后，可通过<code>gitlab-ctl status</code>查看其状态。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装成功后，可能需要进行一些配置，需要配置的文件就是<code>/etc/gitlab/gitlab.rb</code>。</p><p>主要是修改访问时所使用的<code>url</code>及端口号：</p><h3 id="修改url"><a href="#修改url" class="headerlink" title="修改url"></a>修改url</h3><p>将<code>external_url</code>修改为对应的域名，比如：</p><p><code>external_url &#39;http://gitlab.daniate.com&#39;</code></p><h3 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h3><p><code>GitLab</code>默认使用的是<code>8080</code>端口，如果由于其它原因（被其它软件所占用了），就需要修改端口号，比如，将端口号修改为8091：</p><p><code>unicorn[&#39;port&#39;] = 8091</code></p><p>另外，在使用浏览器访问网站时，如未指明端口号，则会使用<code>80</code>端口，如果由于其它原因（安装了<code>Apache</code>，<code>80</code>端口已经被占用），就需要修改了<code>nginx[&#39;listen_port&#39;]</code>所对应的值，在使用浏览器访问<code>GitLab</code>时，就需要指定这个端口，比如：</p><p><code>nginx[&#39;listen_port&#39;] = 8090</code></p><p>修改完成后，执行<code>sudo gitlab-ctl reconfigure</code>，让配置生效。</p><p>然后，通过<a href="http://gitlab.daniate.com:8090/" title="http://gitlab.daniate.com:8090">http://gitlab.daniate.com:8090</a>就可以访问服务器上的<code>GitLab</code>了，当然，这个<code>url</code>是我服务器上的，你得根据自己的具体情况进行配置。</p><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>将<a href="https://git.oschina.net/lalala34/gitlab.git">https://git.oschina.net/lalala34/gitlab.git</a>或<a href="https://gitlab.com/xhang/gitlab">https://gitlab.com/xhang/gitlab</a>克隆到服务器上（前提是服务器上已经安装了<code>git</code>，如未安装，请查看其它资料进行安装；另外也可以使用变通的方式，比如，先克隆到本地，生成差异文件，然后上传到服务器）：</p><p><code>git clone https://git.oschina.net/lalala34/gitlab.git</code></p><p>切换到克隆的目录下，执行<code>git branch -a</code>查看所有的分支，可以列出以下分支：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">* master<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">10</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">10</span>-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">11</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">11</span>-stable-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">12</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">12</span>-stable-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">13</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">13</span>-stable-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">14</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">14</span>-stable-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">15</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">15</span>-stable-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">8</span>-zh<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">9</span>-stable<br>  remotes<span class="hljs-regexp">/origin/</span><span class="hljs-number">8</span>-<span class="hljs-number">9</span>-zh<br>  remotes<span class="hljs-regexp">/origin/</span>HEAD -&gt; origin/master<br>  remotes<span class="hljs-regexp">/origin/m</span>aster<br></code></pre></td></tr></table></figure><p>查看当前安装的<code>GitLab</code>的版本：</p><p><code>cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</code></p><p>假如使用的就是<code>8.15.1</code>这个版本，就使用<code>8-15-stable-zh</code>这个分支进行汉化。汉化需要生成差异文件：</p><p><code>git diff origin/8-15-stable origin/8-15-stable-zh &gt; ~/gitlab-8-15-zh.diff</code></p><p>先将<code>GitLab</code>停止：</p><p><code>sudo gitlab-ctl stop</code></p><p>随后切换到<code>/opt/gitlab/embedded/service/gitlab-rails</code>目录，应用上面已生成的差异文件：</p><p><code>git apply ~/gitlab-8-15-zh.diff</code></p><p>最后，重启<code>GitLab</code>：</p><p><code>sudo gitlab-ctl start</code></p><p>再次访问，就可以看到汉化之后的<code>GitLab</code>了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>GitLab</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过xcodebuild自动构建并发布Ad Hoc测试包</title>
    <link href="/2016/11/27/%E9%80%9A%E8%BF%87xcodebuild%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E5%B8%83Ad%20Hoc%E6%B5%8B%E8%AF%95%E5%8C%85/"/>
    <url>/2016/11/27/%E9%80%9A%E8%BF%87xcodebuild%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E5%B8%83Ad%20Hoc%E6%B5%8B%E8%AF%95%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="通过xcodebuild自动构建并发布Ad-Hoc测试包"><a href="#通过xcodebuild自动构建并发布Ad-Hoc测试包" class="headerlink" title="通过xcodebuild自动构建并发布Ad Hoc测试包"></a>通过<code>xcodebuild</code>自动构建并发布<code>Ad Hoc</code>测试包</h1><p><strong>目标是通过一个shell脚本，完成构建及发布。</strong></p><h2 id="Ad-Hoc发布证书及Provisioning-Profile"><a href="#Ad-Hoc发布证书及Provisioning-Profile" class="headerlink" title="Ad Hoc发布证书及Provisioning Profile"></a><code>Ad Hoc</code>发布证书及<code>Provisioning Profile</code></h2><p>在『钥匙串访问』中执行：</p><p>证书助理-&gt;从证书颁发机构请求证书：</p><p><img src="/images/media/2016/11/3040199569.png" alt="证书助理-&gt;从证书颁发机构请求证书"></p><p>填写证书信息：</p><p>此处，为了方便识别证书，其常用名称，被设置为了”Ad Hoc”。</p><p><img src="/images/media/2016/11/2461861416.png" alt="填写证书信息"></p><p>点击『继续』按钮：</p><p>会弹出<code>certSigningRequest</code>文件的保存路径。</p><p>生成<code>certSigningRequest</code>文件后，『钥匙串访问』中会多出<strong>名为”Ad Hoc”的专用密钥</strong>和<strong>名为”Ad Hoc”的公用密钥</strong>，然后登录苹果开发者账号，进入『<code>Certificates, Identifiers &amp; Profiles</code>』，在『<code>Certificates</code>』中添加证书，在第一步中会让用户选择需要创建哪种类型的证书，这里我们需要选择『<code>Ad Hoc</code>』。</p><ul><li>如果是个人开发者账号，界面会是这样：</li></ul><p><img src="/images/media/2016/11/4138533926.png" alt="个人开发者"></p><ul><li>如果是企业开发者账号，界面会是这样：</li></ul><p><img src="/images/media/2016/11/3187604146.png" alt="企业开发者"></p><blockquote><p>注意：一个是<code>App Store and Ad Hoc</code>，一个是<code>In-House and Ad Hoc</code>。也就是说，发布到<code>App Store</code>用的证书也可用于<code>Ad Hoc</code>发布。我这里的不可用（显示为灰色），是因为之前已经创建了相关的证书。</p></blockquote><p>后面会上传之前生成的<code>certSigningRequest</code>文件，然后生成证书，下载并双击证书，证书就会与『钥匙串访问』中之前多出的<code>Ad Hoc</code>专用密钥进行配对。</p><p>接着，需要生成<code>Ad Hoc</code>所用的<code>Provisioning Profile</code>：</p><ul><li>如果是个人开发者账号，界面会是这样：</li></ul><p><img src="/images/media/2016/11/1031743633.png" alt="个人开发者"></p><ul><li>如果是企业开发者账号，界面会是这样：</li></ul><p><img src="/images/media/2016/11/2826450104.png" alt="企业开发者"></p><p>在随后的步骤中，会让选择<code>App ID</code>，对于<code>Ad Hoc</code>发布，可以使用明确的<code>App ID</code>，也可以使用包含通配符(*)的<code>App ID</code>。如果没有相应的<code>App ID</code>，可以在<code>Identifiers</code>-&gt;<code>App IDs</code>中进行添加：</p><p><img src="/images/media/2016/11/2207128354.png" alt="Snip20161122_13.png"></p><p>选择<code>App ID</code>后，会让选择<code>certificates</code>，勾选在之前生成的证书，然后就可以生成<code>Provisioning Profile</code>文件，下载并双击，系统会自动将这个文件复制到<code>~/Library/MobileDevice/Provisioning Profiles</code>目录，并为其重新命名，新名称会类似这样：<code>86ceff27-1dff-40eb-8fd7-6072af8cb03b.mobileprovision</code>，这样的名称会在<code>xcodebuild</code>命令中使用到，但不会使用到<code>.mobileprovision</code>扩展名。</p><h2 id="使用xcodebuild构建项目"><a href="#使用xcodebuild构建项目" class="headerlink" title="使用xcodebuild构建项目"></a>使用<code>xcodebuild</code>构建项目</h2><h3 id="xcodebuild简介"><a href="#xcodebuild简介" class="headerlink" title="xcodebuild简介"></a><code>xcodebuild</code>简介</h3><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p><code>xcodebuild</code>最主要的用途就是『构建<code>Xcode</code>项目及工作空间』，也有其它用途：</p><ul><li>列举信息（项目配置、SDK、<code>xcodebuild</code>版本）</li><li>导出存档（从<code>xcarchive</code>存档导出<code>ipa</code>及<code>manifest.plist</code>）</li><li>导入&#x2F;导出本地化文件（<code>localization</code>）</li></ul><blockquote><p><code>xcodebuild</code>命令的详情使用说明，请自行在命令行中执行<code>man xcodebuild</code>及<code>xcodebuild -help</code>进行查看。这里给出的用法示例，基本能够满足日常的使用。</p></blockquote><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><p>项目构建主要会使用<code>xcodebuild</code>的三种构建形式：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs inform7"># 1<br>xcodebuild <span class="hljs-comment">[-project name.xcodeproj]</span><br><span class="hljs-comment">[<span class="hljs-comment">[-target targetname]</span> ... | -alltargets]</span><br><span class="hljs-comment">[-configuration configurationname]</span><br><span class="hljs-comment">[-sdk <span class="hljs-comment">[sdkfullpath | sdkname]</span>]</span> <span class="hljs-comment">[action ...]</span><br><span class="hljs-comment">[buildsetting=value ...]</span> <span class="hljs-comment">[-userdefault=value ...]</span><br><br># 2<br>xcodebuild <span class="hljs-comment">[-project name.xcodeproj]</span> -scheme schemename<br><span class="hljs-comment">[<span class="hljs-comment">[-destination destinationspecifier]</span> ...]</span><br><span class="hljs-comment">[-destination-timeout value]</span><br><span class="hljs-comment">[-configuration configurationname]</span><br><span class="hljs-comment">[-sdk <span class="hljs-comment">[sdkfullpath | sdkname]</span>]</span> <span class="hljs-comment">[action ...]</span><br><span class="hljs-comment">[buildsetting=value ...]</span> <span class="hljs-comment">[-userdefault=value ...]</span><br><br># 3<br>xcodebuild -workspace name.xcworkspace -scheme schemename<br><span class="hljs-comment">[<span class="hljs-comment">[-destination destinationspecifier]</span> ...]</span><br><span class="hljs-comment">[-destination-timeout value]</span><br><span class="hljs-comment">[-configuration configurationname]</span><br><span class="hljs-comment">[-sdk <span class="hljs-comment">[sdkfullpath | sdkname]</span>]</span> <span class="hljs-comment">[action ...]</span><br><span class="hljs-comment">[buildsetting=value ...]</span> <span class="hljs-comment">[-userdefault=value ...]</span><br></code></pre></td></tr></table></figure><p>如果没有使用<code>workspace</code>，也就是没有使用<code>xcworkspace</code>文件，就使用前两种形式。</p><p>如果使用了<code>workspace</code>，就使用第三种形式（比如，项目使用了<code>CocoaPods</code>）。</p><h4 id="生成xcarchive存档"><a href="#生成xcarchive存档" class="headerlink" title="生成xcarchive存档"></a>生成<code>xcarchive</code>存档</h4><p>为了构建<code>xcarchive</code>，需要将<code>action</code>指定为<code>archive</code>，此时必须指定一个<code>scheme</code>，<code>scheme</code>名称可在<code>Xcode</code>菜单的<code>Product</code>-&gt;<code>Scheme</code>-&gt;<code>Manage Schemes</code>中查找到。</p><p>比如，你的项目名称为<code>Ad-Hoc-Demo</code>，Scheme为<code>Ad-Hoc-Demo-Scheme</code>且没有使用<code>workspace</code>，就可以使用如下命令，对项目进行<code>archive</code>：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">xcodebuild -project Ad-Hoc-Demo.xcodeproj -<span class="hljs-keyword">scheme </span>Ad-Hoc-Demo-<span class="hljs-keyword">Scheme </span>archive<br></code></pre></td></tr></table></figure><p>但有可能出错。因为项目的配置可能是不正确的（比如证书、<code>Provisioning Profile</code>、<code>Bundle Identifier</code>配置错误）。</p><p>有三种途径可以查看项目的配置，：</p><ol><li>直接在<code>Xcode</code>中进行查看（最直观）</li><li>在<code>XXX.xcodeproj/project.pbxproj</code>文件中进行查看</li><li>通过<code>xcodebuild</code>的<code>-showBuildSettings</code>选项进行查看（<strong>建议使用这种方式</strong>）。</li></ol><blockquote><p><strong>建议</strong>通过<code>-showBuildSettings</code>选项进行查看，主要原因是之前遇到的一个坑，我在<code>Xcode</code>中已经将证书、<code>Provisioning Profile</code>正确地设置了（对于<code>Xcode</code>来说是正确的，对于<code>xcodebuild</code>来说就不一定是正确的），但在使用<code>xcodebuild</code>时还是报出错误：<code>Provisioning profile &quot;XXXDis&quot; doesn&#39;t include signing certificate &quot;iPhone Distribution: XXX.</code>。之所以报出这样的错误，只是因为<code>Xcode</code>中的配置并没有与项目的<code>XXX.xcodeproj/project.pbxproj</code>文件中的配置完全保持一致，该文件中的<code>PROVISIONING_PROFILE_SPECIFIER</code>与<code>PROVISIONING_PROFILE</code>所对应的<code>Provisioning Profile</code>文件并不是同一个。</p></blockquote><p>为了让构建进行得更加顺利，需要指定一些<code>[buildsetting=value ...]</code>，比如，指定前面提到的<code>PROVISIONING_PROFILE_SPECIFIER</code>与<code>PROVISIONING_PROFILE</code>。</p><p><code>PROVISIONING_PROFILE_SPECIFIER</code>的值可以这样找到：<code>Xcode</code>-&gt;<code>Preferences...</code>-&gt;<code>Accounts</code>，然后选择一个<code>Apple ID</code>，再点击右下角的<code>View Details</code>，进入详情界面，其中的<code>Provisioning Profiles</code>那一列就是<code>PROVISIONING_PROFILE_SPECIFIER</code>：</p><p><img src="/images/media/2016/11/3822669573.png" alt="PROVISIONING_PROFILE_SPECIFIER"></p><p>在这个界面中，右键点击某个<code>Provisioning Profile</code>，可以看到<code>Show In Finder</code>项，选择该项，可以直接进入<code>~/Library/MobileDevice/Provisioning Profiles</code>目录。</p><p>如果<code>Provisioning Profile</code>文件名为<code>86ceff27-1dff-40eb-8fd7-6072af8cb03b.mobileprovision</code>，就将<code>PROVISIONING_PROFILE</code>的值指定为”86ceff27-1dff-40eb-8fd7-6072af8cb03b”（不带后面的<code>.mobileprovision</code>）：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">xcodebuild -project Ad-Hoc-Demo.xcodeproj -scheme Ad-Hoc-Demo-Scheme PROVISIONING_PROFILE<span class="hljs-operator">=</span><span class="hljs-string">&quot;86ceff27-1dff-40eb-8fd7-6072af8cb03b&quot;</span> PROVISIONING_PROFILE_SPECIFIER<span class="hljs-operator">=</span><span class="hljs-string">&quot;Ad Hoc&quot;</span> archive<br></code></pre></td></tr></table></figure><p>这样就可以构建出<code>xcarchive</code>存档，其默认的存放目录为<code>~/Library/Developer/Xcode/Archives</code>，我们可以修改存放目录，只需要指定<code>-archivePath</code>选项，并在其后面指定<code>xcarchive</code>存档存放路径（需要包含<code>xcarchive</code>存档的文件名）就可以了：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">xcodebuild -project Ad-Hoc-Demo.xcodeproj -scheme Ad-Hoc-Demo-Scheme PROVISIONING_PROFILE=<span class="hljs-string">&quot;86ceff27-1dff-40eb-8fd7-6072af8cb03b&quot;</span> PROVISIONING_PROFILE_SPECIFIER=<span class="hljs-string">&quot;Ad Hoc&quot;</span> <span class="hljs-params">archive</span> -<span class="hljs-params">archive</span>Path ~/Ad-Hoc-Demo.xc<span class="hljs-params">archive</span><br></code></pre></td></tr></table></figure><blockquote><p>自己指定<code>xcarchive</code>存档的存放路径，可以方便后续处理</p></blockquote><p><code>action</code>为<code>archive</code>时，<code>xcodebuild</code>默认使用的<code>Build Configuration</code>是<code>Release</code>，不过我们可以根据实际情况进行设置（比如，使用生产环境还是测试环境，因为在默认情况下，<code>Release</code>配置中是没有设置<code>DEBUG</code>宏的，有些团队会根据这个宏，去连接不同的服务器），此时，需要使用到<code>-configuration</code>选项，可以指定<code>Release</code>或<code>Debug</code>：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">xcodebuild -project Ad-Hoc-Demo.xcodeproj -scheme Ad-Hoc-Demo-Scheme PROVISIONING_PROFILE=<span class="hljs-string">&quot;86ceff27-1dff-40eb-8fd7-6072af8cb03b&quot;</span> PROVISIONING_PROFILE_SPECIFIER=<span class="hljs-string">&quot;Ad Hoc&quot;</span> <span class="hljs-params">archive</span> -<span class="hljs-params">archive</span>Path ~/Ad-Hoc-Demo.xc<span class="hljs-params">archive</span> -configuration Debug<br></code></pre></td></tr></table></figure><h4 id="导出ipa"><a href="#导出ipa" class="headerlink" title="导出ipa"></a>导出<code>ipa</code></h4><p>使用<code>-exportArchive</code>就可以从<code>xcarchive</code>存档导出<code>ipa</code>及<code>manifest.plist</code>。</p><p>不过需要指定其它3个选项，使用方式如下：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">xcodebuild -export<span class="hljs-params">Archive</span> -<span class="hljs-params">archive</span>Path xc<span class="hljs-params">archive</span>path -exportPath<br>destinationpath -exportOptionsPlist path<br></code></pre></td></tr></table></figure><h5 id="配置-exportOptionsPlist选项所需的plist文件"><a href="#配置-exportOptionsPlist选项所需的plist文件" class="headerlink" title="配置-exportOptionsPlist选项所需的plist文件"></a>配置<code>-exportOptionsPlist</code>选项所需的<code>plist</code>文件</h5><p>对于<code>-exportOptionsPlist</code>，需要创建一个<code>plist</code>文件，通过<code>xcodebuild -help</code>可以查看到该文件中可用的键及其描述，常用的有：</p><ul><li><code>compileBitcode</code></li><li><code>manifest</code></li><li><code>method</code></li><li><code>teamID</code></li><li><code>uploadBitcode</code></li><li><code>uploadSymbols</code></li></ul><p>其中，<code>manifest</code>、<code>method</code>及<code>teamID</code>是最重要的。</p><p><code>manifest</code>对应的值是一个字典，这个字典需要包含<code>appURL</code>、<code>displayImageURL</code>、<code>fullSizeImageURL</code>这三个键。通过它，就可以生成一个名为<code>manifest.plist</code>文件，通过网页下载应用程序时，会使用这个<code>manifest.plist</code>文件。</p><p><code>method</code>用于指明应该导出什么样的存档。</p><p><code>teamID</code>可以在『钥匙串访问』中查看到：</p><p><img src="/images/media/2016/11/1319231378.png" alt="teamID"></p><h5 id="导出ipa及manifest-plist"><a href="#导出ipa及manifest-plist" class="headerlink" title="导出ipa及manifest.plist"></a>导出<code>ipa</code>及<code>manifest.plist</code></h5><p>创建并配置好<code>-exportOptionsPlist</code>选项所需的<code>plist</code>文件后，就可以通过<code>xcodebuild -exportArchive</code>导出<code>ipa</code>及<code>manifest.plist</code></p><h2 id="生成下载页"><a href="#生成下载页" class="headerlink" title="生成下载页"></a>生成下载页</h2><p>在下载页面中，最重要的就是下载链接的<code>href</code>属性，该属性值的形式如下：</p><p><code>itms-services://?action=download-manifest&amp;url=xxx/manifest.plist</code></p><p>其中的<code>xxx</code>是<code>manifest.plist</code>所在<code>URL</code>的某一部分，需要根据具体情况进行设置。</p><blockquote><p>对于<code>iOS 7.1</code>及更高版本，<code>manifest.plist</code>所在<code>URL</code>必须使用<code>https</code>协议</p></blockquote><h2 id="将文件上传到服务器"><a href="#将文件上传到服务器" class="headerlink" title="将文件上传到服务器"></a>将文件上传到服务器</h2><p>只需要将下载页面、<code>manifest.plist</code>及<code>ipa</code>文件上传到服务器的某个目录下，并确保可以通过网站访问到该目录下的文件。</p><h2 id="将以上步骤整合为脚本"><a href="#将以上步骤整合为脚本" class="headerlink" title="将以上步骤整合为脚本"></a>将以上步骤整合为脚本</h2><blockquote><p>需要将脚本保存在<code>XXX.xcodeproj</code>所在目录下（记得加执行权限）</p></blockquote><p>脚本示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Created by Daniate.</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># 项目名称</span><br>PROJECT_NAME=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 请替换</span><br><span class="hljs-comment"># 工作空间名称</span><br>WS_NAME=<span class="hljs-string">&quot;xxx.xcworkspace&quot;</span> <span class="hljs-comment"># 请替换</span><br><span class="hljs-comment"># Scheme</span><br>SCHEME_NAME=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 请替换</span><br><span class="hljs-comment"># 版本号</span><br>BUNDLE_VERSION=`grep -A1 <span class="hljs-string">&#x27;CFBundleShortVersionString&#x27;</span> <span class="hljs-string">&quot;./<span class="hljs-variable">$PROJECT_NAME</span>/Info.plist&quot;</span> | grep <span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span> | awk -F <span class="hljs-string">&#x27;&lt;\/string&gt;&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment"># 当前日期时间</span><br>CURRENT_DATE_TIME=`<span class="hljs-built_in">date</span> +%Y.%m.%d.%H.%M.%S`<br><span class="hljs-comment"># 由版本号及当前日期时间组成的目录名</span><br>EXPORT_FOLDER_NAME=<span class="hljs-string">&quot;v$BUNDLE_VERSION_<span class="hljs-variable">$CURRENT_DATE_TIME</span>&quot;</span><br><span class="hljs-comment"># 文件导出目录</span><br>EXPORT_ROOT=<span class="hljs-string">&quot;./ad_hoc_production&quot;</span><br>EXPORT_FULL_FOLDER_NAME=<span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_ROOT</span>/<span class="hljs-variable">$PROJECT_NAME</span>/<span class="hljs-variable">$EXPORT_FOLDER_NAME</span>&quot;</span><br><span class="hljs-comment"># 归档路径</span><br>ARCHIVE_PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>/<span class="hljs-variable">$PROJECT_NAME</span>.xcarchive&quot;</span><br><span class="hljs-comment"># 域名或IP地址</span><br>DL_DOMAIN=<span class="hljs-string">&quot;https://xxx.cn&quot;</span> <span class="hljs-comment"># 请替换</span><br><span class="hljs-comment"># 下载页面的名称</span><br>DL_HTML=<span class="hljs-string">&quot;dl.html&quot;</span><br><span class="hljs-comment"># 下载页面所在的URL</span><br>DL_URL=<span class="hljs-string">&quot;<span class="hljs-variable">$DL_DOMAIN</span>/<span class="hljs-variable">$PROJECT_NAME</span>/<span class="hljs-variable">$EXPORT_FOLDER_NAME</span>/<span class="hljs-variable">$DL_HTML</span>&quot;</span><br><br><span class="hljs-comment"># STEP 1. 清理以前构建所留下的文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在执行 xcodebuild clean ...&quot;</span><br>xcodebuild -workspace <span class="hljs-string">&quot;<span class="hljs-variable">$WS_NAME</span>&quot;</span> -scheme <span class="hljs-string">&quot;<span class="hljs-variable">$SCHEME_NAME</span>&quot;</span> clean  1&gt;/dev/null<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;xcodebuild clean 执行完毕&quot;</span><br><br><span class="hljs-comment"># STEP 2. 构建归档</span><br>PROFILE=<span class="hljs-string">&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span> <span class="hljs-comment"># 请替换</span><br>PROFILE_SPECIFIER=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 请替换</span><br>TEAM_ID=<span class="hljs-string">&quot;xxxxxxxxxx&quot;</span> <span class="hljs-comment"># 请替换</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在执行 xcodebuild archive ...&quot;</span><br>xcodebuild -workspace <span class="hljs-string">&quot;<span class="hljs-variable">$WS_NAME</span>&quot;</span> -scheme <span class="hljs-string">&quot;<span class="hljs-variable">$SCHEME_NAME</span>&quot;</span> -configuration Release PROVISIONING_PROFILE=<span class="hljs-string">&quot;<span class="hljs-variable">$PROFILE</span>&quot;</span> PROVISIONING_PROFILE_SPECIFIER=<span class="hljs-string">&quot;<span class="hljs-variable">$PROFILE_SPECIFIER</span>&quot;</span> archive -archivePath <span class="hljs-string">&quot;<span class="hljs-variable">$ARCHIVE_PATH</span>&quot;</span>  1&gt;/dev/null<br><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$ARCHIVE_PATH</span>&quot;</span> ] <span class="hljs-comment"># 构建归档成功</span><br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行 xcodebuild archive 成功&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行 xcodebuild archive 失败&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># STEP 3. 生成 exportOptionsPlist 选项所需的 plist 文件</span><br><br>EXPORT_OPTS_PLIST_NAME=<span class="hljs-string">&quot;export_opts.plist&quot;</span><br>EXPORT_OPTS_PLIST_PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>/<span class="hljs-variable">$EXPORT_OPTS_PLIST_NAME</span>&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n\</span><br><span class="hljs-string">&lt;!DOCTYPE plist PUBLIC \&quot;-//Apple//DTD PLIST 1.0//EN\&quot; \&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd\&quot;&gt;\n\</span><br><span class="hljs-string">&lt;plist version=\&quot;1.0\&quot;&gt;\n\</span><br><span class="hljs-string">&lt;dict&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;compileBitcode&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;false/&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;method&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;string&gt;ad-hoc&lt;/string&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;teamID&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;string&gt;<span class="hljs-variable">$TEAM_ID</span>&lt;/string&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;manifest&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;dict&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;appURL&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;string&gt;<span class="hljs-variable">$DL_DOMAIN</span>/<span class="hljs-variable">$PROJECT_NAME</span>/<span class="hljs-variable">$EXPORT_FOLDER_NAME</span>/<span class="hljs-variable">$SCHEME_NAME</span>.ipa&lt;/string&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;displayImageURL&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;string&gt;<span class="hljs-variable">$DL_DOMAIN</span>/display.png&lt;/string&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;fullSizeImageURL&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;string&gt;<span class="hljs-variable">$DL_DOMAIN</span>/fullSize.png&lt;/string&gt;\n\</span><br><span class="hljs-string">&lt;/dict&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;uploadBitcode&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;false/&gt;\n\</span><br><span class="hljs-string">&lt;key&gt;uploadSymbols&lt;/key&gt;\n\</span><br><span class="hljs-string">&lt;false/&gt;\n\</span><br><span class="hljs-string">&lt;/dict&gt;\n\</span><br><span class="hljs-string">&lt;/plist&gt;&quot;</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_OPTS_PLIST_PATH</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [ -s <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_OPTS_PLIST_PATH</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;成功生成 exportOptionsPlist 选项所需的 plist 文件&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成 exportOptionsPlist 选项所需的 plist 文件失败&quot;</span><br>    <span class="hljs-built_in">rm</span> -rdf <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_ROOT</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># STEP 4. 导出 ipa、manifest.plist</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在由归档导出ipa、manifest.plist文件 ...&quot;</span><br>xcodebuild -exportArchive -archivePath <span class="hljs-string">&quot;<span class="hljs-variable">$ARCHIVE_PATH</span>&quot;</span> -exportPath <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>&quot;</span> -exportOptionsPlist <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_OPTS_PLIST_PATH</span>&quot;</span>  1&gt;/dev/null<br><br><span class="hljs-comment"># 删除归档</span><br><span class="hljs-built_in">rm</span> -rdf <span class="hljs-string">&quot;<span class="hljs-variable">$ARCHIVE_PATH</span>&quot;</span><br><span class="hljs-comment"># 删除生成的export options plist</span><br><span class="hljs-built_in">rm</span> <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_OPTS_PLIST_PATH</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [ -s <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>/<span class="hljs-variable">$SCHEME_NAME</span>.ipa&quot;</span> -a -s <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>/manifest.plist&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;成功导出 ipa、manifest.plist&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;导出 ipa、manifest.plist 失败&quot;</span><br>    <span class="hljs-built_in">rm</span> -rdf <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_ROOT</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># STEP 5. 生成  ipa 下载页面</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在生成 ipa 下载页面 ...&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n\</span><br><span class="hljs-string">&lt;html&gt;\n\</span><br><span class="hljs-string">    &lt;head&gt;\n\</span><br><span class="hljs-string">        &lt;title&gt;Ad-Hoc 内部测试&lt;/title&gt;\n\</span><br><span class="hljs-string">        &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n\</span><br><span class="hljs-string">        &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0\&quot;&gt;\n\</span><br><span class="hljs-string">        &lt;style&gt;\n\</span><br><span class="hljs-string">            p &#123;\n\</span><br><span class="hljs-string">                text-align: center;\n\</span><br><span class="hljs-string">            &#125;\n\</span><br><span class="hljs-string">        &lt;/style&gt;\n\</span><br><span class="hljs-string">    &lt;/head&gt;\n\</span><br><span class="hljs-string">    &lt;body&gt;\n\</span><br><span class="hljs-string">        &lt;p&gt;\n\</span><br><span class="hljs-string">            &lt;img src=\&quot;../../Icon.png\&quot;&gt;\n\</span><br><span class="hljs-string">        &lt;/p&gt;\n\</span><br><span class="hljs-string">        &lt;p&gt;\n\</span><br><span class="hljs-string">            <span class="hljs-variable">$PROJECT_NAME</span>\n\</span><br><span class="hljs-string">        &lt;/p&gt;\n\</span><br><span class="hljs-string">        &lt;p&gt;\n\</span><br><span class="hljs-string">            <span class="hljs-variable">$EXPORT_FOLDER_NAME</span>\n\</span><br><span class="hljs-string">        &lt;/p&gt;\n\</span><br><span class="hljs-string">        &lt;p&gt;\n\</span><br><span class="hljs-string">            &lt;a href=\&quot;itms-services://?action=download-manifest&amp;url=<span class="hljs-variable">$DL_DOMAIN</span>/<span class="hljs-variable">$PROJECT_NAME</span>/<span class="hljs-variable">$EXPORT_FOLDER_NAME</span>/manifest.plist\&quot;&gt;\n\</span><br><span class="hljs-string">                点击安装\n\</span><br><span class="hljs-string">            &lt;/a&gt;\n\</span><br><span class="hljs-string">        &lt;/p&gt;\n\</span><br><span class="hljs-string">    &lt;/body&gt;\n\</span><br><span class="hljs-string">&lt;/html&gt;&quot;</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>/<span class="hljs-variable">$DL_HTML</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [ -s <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_FULL_FOLDER_NAME</span>/<span class="hljs-variable">$DL_HTML</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;成功生成 ipa 下载页面&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成 ipa 下载页面失败&quot;</span><br>    <span class="hljs-built_in">rm</span> -rdf <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_ROOT</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在将相关文件上传至服务器 ...&quot;</span><br><br>SERVER_USER=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 服务器用户名，请替换</span><br>SERVER_IP=<span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span> <span class="hljs-comment"># 服务器IP，请替换</span><br>SERVER_FOLDER=<span class="hljs-string">&quot;~/xxx&quot;</span> <span class="hljs-comment"># 服务器某目录，请替换</span><br><br>scp -r <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_ROOT</span>/<span class="hljs-variable">$PROJECT_NAME</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SERVER_USER</span>@<span class="hljs-variable">$SERVER_IP</span>:<span class="hljs-variable">$SERVER_FOLDER</span>&quot;</span><br><br><span class="hljs-comment"># 上传完成后，删除目录</span><br><span class="hljs-built_in">rm</span> -rdf <span class="hljs-string">&quot;<span class="hljs-variable">$EXPORT_ROOT</span>&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;成功上传，请使用 iPhone Safari 打开：<span class="hljs-variable">$DL_DOMAIN</span>/<span class="hljs-variable">$PROJECT_NAME</span>/<span class="hljs-variable">$EXPORT_FOLDER_NAME</span>/<span class="hljs-variable">$DL_HTML</span> 进行下载安装&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactiveObjC-从RAC宏说起</title>
    <link href="/2016/10/31/ReactiveObjC-%E4%BB%8ERAC%E5%AE%8F%E8%AF%B4%E8%B5%B7/"/>
    <url>/2016/10/31/ReactiveObjC-%E4%BB%8ERAC%E5%AE%8F%E8%AF%B4%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<p>这里说的<code>ReactiveObjC</code>，就是<code>ReactiveCocoa</code>的<code>Objective-C</code>版本：</p><p><a href="https://github.com/ReactiveCocoa/ReactiveObjC" title="https://github.com/ReactiveCocoa/ReactiveObjC">https://github.com/ReactiveCocoa/ReactiveObjC</a></p><h2 id="从一个小例子开始"><a href="#从一个小例子开始" class="headerlink" title="从一个小例子开始"></a>从一个小例子开始</h2><p>下面的代码，实现的效果是，当<code>用户名输入框</code>及<code>密码输入框</code>都有内容时，<code>登录按钮</code>才会变得可用，否则，不可用。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSArray</span> *signals = @[<br>                     <span class="hljs-keyword">self</span>.usernameTF.rac_textSignal,<br>                     <span class="hljs-keyword">self</span>.passwordTF.rac_textSignal,<br>                     ];<br>RAC(<span class="hljs-keyword">self</span>.loginBtn, enabled) = [RACSignal combineLatest:signals reduce:^<span class="hljs-type">id</span> _Nonnull (<span class="hljs-built_in">NSString</span> *username, <span class="hljs-built_in">NSString</span> *password) &#123;<br>    username = [username stringByTrimmingCharactersInSet:[<span class="hljs-built_in">NSCharacterSet</span> whitespaceCharacterSet]];<br>    password = [password stringByTrimmingCharactersInSet:[<span class="hljs-built_in">NSCharacterSet</span> whitespaceCharacterSet]];<br>    <span class="hljs-keyword">return</span> @(username.length &gt; <span class="hljs-number">0</span> &amp;&amp; password.length &gt; <span class="hljs-number">0</span>);<br>&#125;];<br></code></pre></td></tr></table></figure><p>以上代码在经过预处理后，会被转化为：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSArray</span> *signals = @[<br>                     <span class="hljs-keyword">self</span>.usernameTF.rac_textSignal,<br>                     <span class="hljs-keyword">self</span>.passwordTF.rac_textSignal,<br>                     ];<br>[[RACSubscriptingAssignmentTrampoline alloc] initWithTarget:(<span class="hljs-keyword">self</span>.loginBtn) nilValue:(((<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>))][@(((<span class="hljs-type">void</span>)(__objc_no &amp;&amp; ((<span class="hljs-type">void</span>)<span class="hljs-keyword">self</span>.loginBtn.enabled, __objc_no)), <span class="hljs-string">&quot;enabled&quot;</span>))] = [RACSignal combineLatest:signals reduce:^<span class="hljs-type">id</span> _Nonnull (<span class="hljs-built_in">NSString</span> *username, <span class="hljs-built_in">NSString</span> *password) &#123;<br>    username = [username stringByTrimmingCharactersInSet:[<span class="hljs-built_in">NSCharacterSet</span> whitespaceCharacterSet]];<br>    password = [password stringByTrimmingCharactersInSet:[<span class="hljs-built_in">NSCharacterSet</span> whitespaceCharacterSet]];<br>    <span class="hljs-keyword">return</span> @(username.length &gt; <span class="hljs-number">0</span> &amp;&amp; password.length &gt; <span class="hljs-number">0</span>);<br>&#125;];<br></code></pre></td></tr></table></figure><p>将其中的<code>[@(((void)(__objc_no &amp;&amp; ((void)self.loginBtn.enabled, __objc_no)), &quot;enabled&quot;))]</code>简化一下，就变成了：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSArray</span> *signals = @[<br>                     <span class="hljs-keyword">self</span>.usernameTF.rac_textSignal,<br>                     <span class="hljs-keyword">self</span>.passwordTF.rac_textSignal,<br>                     ];<br>[[RACSubscriptingAssignmentTrampoline alloc] initWithTarget:(<span class="hljs-keyword">self</span>.loginBtn) nilValue:(((<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>))][<span class="hljs-string">@&quot;enabled&quot;</span>] = [RACSignal combineLatest:signals reduce:^<span class="hljs-type">id</span> _Nonnull (<span class="hljs-built_in">NSString</span> *username, <span class="hljs-built_in">NSString</span> *password) &#123;<br>    username = [username stringByTrimmingCharactersInSet:[<span class="hljs-built_in">NSCharacterSet</span> whitespaceCharacterSet]];<br>    password = [password stringByTrimmingCharactersInSet:[<span class="hljs-built_in">NSCharacterSet</span> whitespaceCharacterSet]];<br>    <span class="hljs-keyword">return</span> @(username.length &gt; <span class="hljs-number">0</span> &amp;&amp; password.length &gt; <span class="hljs-number">0</span>);<br>&#125;];<br></code></pre></td></tr></table></figure><p>上面的代码实际上就是调用<code>RACSubscriptingAssignmentTrampoline</code>中的<code>- setObject:forKeyedSubscript:</code>方法：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[[[<span class="hljs-name">RACSubscriptingAssignmentTrampoline</span> alloc] initWithTarget:(<span class="hljs-name">self.loginBtn</span>) nilValue:((<span class="hljs-name">void</span> *)<span class="hljs-number">0</span>)] setObject:[<span class="hljs-name">RACSignal</span> combineLatest:signals reduce:^id _Nonnull (<span class="hljs-name">NSString</span> *username, NSString *password) &#123;<br>    username = [<span class="hljs-name">username</span> stringByTrimmingCharactersInSet:[<span class="hljs-name">NSCharacterSet</span> whitespaceCharacterSet]]<span class="hljs-comment">;</span><br>    password = [<span class="hljs-name">password</span> stringByTrimmingCharactersInSet:[<span class="hljs-name">NSCharacterSet</span> whitespaceCharacterSet]]<span class="hljs-comment">;</span><br>    return @(<span class="hljs-name">username.length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; password.length &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>&#125;] forKeyedSubscript:@<span class="hljs-string">&quot;enabled&quot;</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>为了弄明白，上面的代码是如何展开的，就需要厘清<code>RAC</code>宏。</p><h2 id="RAC宏"><a href="#RAC宏" class="headerlink" title="RAC宏"></a>RAC宏</h2><p>在厘清<code>RAC</code>宏之前，需要先弄明白其所涉及的所有宏定义。</p><p>先来看看它们是如何被定义的。</p><h3 id="所有涉及的宏"><a href="#所有涉及的宏" class="headerlink" title="所有涉及的宏"></a>所有涉及的宏</h3><p><img src="/images/media/2016/10/1126311108.png" alt="RAC.png"></p><p>在上面的图中，可以清晰地看出每个宏的定义，及其实现所依赖的宏。『请在<code>新标签页</code>或<code>新窗口</code>中打开图像，以查看高清图』</p><h3 id="宏定义释疑"><a href="#宏定义释疑" class="headerlink" title="宏定义释疑"></a>宏定义释疑</h3><table><thead><tr><th>宏</th><th align="left">描述</th></tr></thead><tbody><tr><td><code>metamacro_concat_(A, B)</code></td><td align="left">以字符串的形式连接A与B。示例：<code>metamacro_concat_(1, 2)</code>，其结果为12</td></tr><tr><td><code>metamacro_concat(A, B)</code></td><td align="left">同上</td></tr><tr><td><code>keypath1(PATH)</code></td><td align="left">在它的实现中，逗号表达式中最前面的<code>NO</code>，会在运行时，导致<code>&amp;&amp;</code>之后的<code>((void)PATH, NO))</code>不会执行，节省了开销。示例：<code>keypath1(self.enabled)</code>，结果为<code>(((void)(NO &amp;&amp; ((void)self.enabled, NO)), strchr(# self.enabled, &#39;.&#39;) + 1))</code>，也就是<code>(((void)(NO &amp;&amp; ((void)self.enabled, NO)), strchr(&quot;self.enabled&quot;, &#39;.&#39;) + 1))</code>，<code>(((void)(NO &amp;&amp; ((void)self.enabled, NO)), &quot;.enabled&quot; + 1))</code>，<code>(NO, &quot;enabled&quot;)</code>，<code>&quot;enabled&quot;</code>。注意，这里的PATH，必须要有『.』，否则在运行的时候会导致崩溃：比如<code>keypath1(enabled)</code>，会变成<code>(((void)(NO &amp;&amp; ((void)enabled, NO)), strchr(# enabled, &#39;.&#39;) + 1))</code>，导致找不到『.』，<code>strchr(# enabled, &#39;.&#39;)</code>的结果为<code>NULL</code>，最终结果为<code>NULL + 1</code>，使用时会导致出现<code>EXC_BAD_ACCESS</code></td></tr><tr><td><code>keypath2(OBJ, PATH)</code></td><td align="left">在它的实现中，<code>OBJ.PATH</code>，会在编译期，进行相关的校验，如果<code>OBJ</code>没有对应的<code>PATH</code>，会出现编译错误；逗号表达式中最前面的<code>NO</code>，会在运行时，导致<code>&amp;&amp;</code>之后的<code>((void)OBJ.PATH, NO))</code>不会执行，节省了开销。示例：<code>keypath2(self.loginBtn, enabled)</code>，结果为<code>(((void)(NO &amp;&amp; ((void)self.loginBtn.enabled, NO)), # enabled))</code>，也就是<code>(NO, &quot;enabled&quot;)</code>，<code>&quot;enabled&quot;</code></td></tr><tr><td><code>keypath(...)</code></td><td align="left">会在编译期，对key path进行校验。返回由可变参数构成的key path。示例：<code>keypath(self.loginBtn, enabled)</code>，结果为<code>&quot;enabled&quot;</code></td></tr><tr><td><code>metamacro_at(N, ...)</code></td><td align="left">返回索引为<code>N</code>的可变参数（索引以<code>0</code>开始）。必须至少提供<code>N + 1</code>个可变参数，<code>N</code>为区间<code>[0, 20]</code>中的整数。其展开后就是<code>metamacro_atN(...)</code>，这里的<em>N</em>就是区间<code>[0, 20]</code>中的一个整数。示例：<code>metamacro_at(3, 1, 3, 5, 7)</code>，因为第一个参数为3，因此必须至少提供4个可变参数（这里的可变参数1、3、5、7，总数量为4），其中，7的索引为3，因此，结果为7。来看看为什么结果是7：把<code>metamacro_at(3, 1, 3, 5, 7)</code>展开后就是<code>metamacro_concat(metamacro_at, 3)(__VA_ARGS__)</code> ，其中<code>metamacro_concat(metamacro_at, 3)</code>的结果为<code>metamacro_at3</code>，所以结果为<code>metamacro_at3(1, 3, 5, 7)</code>。在<code>metamacros.h</code>文件中，有20个<code>metamacro_at</code>扩展，分别是<code>metamacro_at1</code>、<code>metamacro_at2</code> … <code>metamacro_at19</code>、<code>metamacro_at20</code>，它们都使用了<code>metamacro_head</code>，其定义为<code>#define metamacro_head(...) metamacro_head_(__VA_ARGS__, 0)</code>，<code>metamacro_head_</code>的定义是<code>#define metamacro_head_(FIRST, ...) FIRST</code>。再看看<code>metamacro_at3</code>的定义：<code>#define metamacro_at3(_0, _1, _2, ...) metamacro_head(__VA_ARGS__)</code>，因此将<code>metamacro_at3(1, 3, 5, 7)</code>一步步展开，就是<code>metamacro_head(7)</code>，<code>metamacro_head_(7, 0)</code>，结果就是7</td></tr><tr><td><code>metamacro_argcount(...)</code></td><td align="left">返回所传入的参数的总个数。必须至少提供1个参数。示例：<code>metamacro_argcount(1)</code>，展开后就是<code>metamacro_at(20, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)</code>，其结果为索引为20的可变参数，也就是1（注意，<code>metamacro_at</code>的第一个参数20，并不属于可变参数的一部分）</td></tr><tr><td><code>metamacro_if_eq(A, B)</code></td><td align="left">检查A、B是否相等，如果相等，就展开后面的第一个参数列表，否则就展开后面的第二个参数列表</td></tr><tr><td><code>RAC_(TARGET, KEYPATH, NILVALUE)</code></td><td align="left">展开后就是<code>[[RACSubscriptingAssignmentTrampoline alloc] initWithTarget:(TARGET) nilValue:(NILVALUE)][@keypath(TARGET, KEYPATH)]</code>。示例：<code>RAC_(self.loginBtn, enabled, nil)</code>，其结果就是<code>[[RACSubscriptingAssignmentTrampoline alloc] initWithTarget:(self.loginBtn) nilValue:(nil)][@keypath(self.loginBtn, enabled)]</code>，<code>[[RACSubscriptingAssignmentTrampoline alloc] initWithTarget:(self.loginBtn) nilValue:(nil)][@&quot;enabled&quot;]</code></td></tr><tr><td><code>RAC(TARGET, ...)</code></td><td align="left">因为其使用了<code>metamacro_if_eq</code>，因此，不是展开<code>(RAC_(TARGET, __VA_ARGS__, nil))</code>，就是展开<code>(RAC_(TARGET, __VA_ARGS__))</code>。其可变参数的个数，只能是1或2，如果是1个可变参数，就对应<code>KEYPATH</code>；如果是2个可变参数，就对应<code>KEYPATH</code>、<code>NILVALUE</code></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS中FPS的测量及其色彩表示</title>
    <link href="/2016/10/13/iOS%E4%B8%ADFPS%E7%9A%84%E6%B5%8B%E9%87%8F%E5%8F%8A%E5%85%B6%E8%89%B2%E5%BD%A9%E8%A1%A8%E7%A4%BA/"/>
    <url>/2016/10/13/iOS%E4%B8%ADFPS%E7%9A%84%E6%B5%8B%E9%87%8F%E5%8F%8A%E5%85%B6%E8%89%B2%E5%BD%A9%E8%A1%A8%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="FPS的测量"><a href="#FPS的测量" class="headerlink" title="FPS的测量"></a>FPS的测量</h2><p>对于<code>FPS</code>的测量，就是使用<code>CADisplayLink</code>计算某个时间段内某个方法的调用次数：</p><p><code>FPS = 调用次数 / 时间</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">FPSMeasurer</span> : <span class="hljs-title">NSObject</span></span><br>+ (FPSMeasurer *)measurer;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">getter</span>=isPaused) <span class="hljs-type">BOOL</span> paused;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSTimeInterval</span> reportInterval;<span class="hljs-comment">// default is 1, &gt;= 0.1</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-type">void</span> (^reportBlock)(<span class="hljs-type">double</span> fps, <span class="hljs-built_in">UIColor</span> *fpsColor);<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-string">&quot;FPSMeasurer.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-string">&lt;QuartzCore/QuartzCore.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">FPSMeasurer</span> ()</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">CADisplayLink</span> *displayLink;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSTimeInterval</span> lastTimestamp;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSUInteger</span> frames;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">FPSMeasurer</span></span><br><br><span class="hljs-keyword">static</span> FPSMeasurer *measurer = <span class="hljs-literal">nil</span>;<br><br>+ (FPSMeasurer *)measurer &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        measurer = [[<span class="hljs-variable language_">super</span> allocWithZone:<span class="hljs-literal">NULL</span>] init];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> measurer;<br>&#125;<br><br>+ (<span class="hljs-keyword">instancetype</span>)allocWithZone:(<span class="hljs-keyword">struct</span> _NSZone *)zone &#123;<br>    <span class="hljs-keyword">return</span> [FPSMeasurer measurer];<br>&#125;<br><br>- (<span class="hljs-keyword">instancetype</span>)init &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span> = [<span class="hljs-variable language_">super</span> init]) &#123;<br>        _reportInterval = <span class="hljs-number">1</span>;<br>        <br>        _displayLink = [<span class="hljs-built_in">CADisplayLink</span> displayLinkWithTarget:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(displayLinkSelector:)];<br>        [_displayLink addToRunLoop:[<span class="hljs-built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="hljs-built_in">NSRunLoopCommonModes</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-type">void</span>)displayLinkSelector:(<span class="hljs-built_in">CADisplayLink</span> *)displayLink &#123;<br>    ++<span class="hljs-keyword">self</span>.frames;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.lastTimestamp &lt; DBL_EPSILON) &#123;<br>        <span class="hljs-keyword">self</span>.lastTimestamp = displayLink.timestamp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">NSTimeInterval</span> time = displayLink.timestamp - <span class="hljs-keyword">self</span>.lastTimestamp;<br>        <span class="hljs-keyword">if</span> (time &gt;= <span class="hljs-keyword">self</span>.reportInterval) &#123;<br>            <span class="hljs-keyword">self</span>.lastTimestamp = displayLink.timestamp;<br>            <span class="hljs-built_in">NSUInteger</span> frames = <span class="hljs-keyword">self</span>.frames;<br>            <span class="hljs-keyword">self</span>.frames = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.reportBlock) &#123;<br>                <span class="hljs-type">double</span> fps = frames / time;<br>                <span class="hljs-keyword">self</span>.reportBlock(fps, [<span class="hljs-built_in">UIColor</span> colorWithHue:fps / <span class="hljs-number">180.0</span> saturation:<span class="hljs-number">1</span> brightness:<span class="hljs-number">1</span> alpha:<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-type">void</span>)setReportInterval:(<span class="hljs-built_in">NSTimeInterval</span>)reportInterval &#123;<br>    dispatch_block_t block = ^&#123;<br>        <span class="hljs-keyword">if</span> (_reportInterval != reportInterval) &#123;<br>            _reportInterval = MAX(reportInterval, <span class="hljs-number">0.1</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-built_in">NSThread</span> isMainThread]) &#123;<br>        block();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">dispatch_sync</span>(dispatch_get_main_queue(), block);<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-type">void</span>)setPaused:(<span class="hljs-type">BOOL</span>)paused &#123;<br>    dispatch_block_t block = ^&#123;<br>        <span class="hljs-keyword">if</span> (_paused != paused) &#123;<br>            _paused = paused;<br>            _displayLink.paused = paused;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-built_in">NSThread</span> isMainThread]) &#123;<br>        block();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">dispatch_sync</span>(dispatch_get_main_queue(), block);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h2 id="FPS的色彩表示"><a href="#FPS的色彩表示" class="headerlink" title="FPS的色彩表示"></a>FPS的色彩表示</h2><p>在用颜色展现<code>FPS</code>的高低时，通常是<code>红色</code>表示<code>低帧率</code>；<code>绿色</code>表示<code>高帧率</code>；橙色、黄色、黄绿色，表示高低之间的帧率。</p><p>为了将帧率转化为相应的颜色，最简单的方式就是使用<code>HSB</code>或<code>HSL</code>色彩空间。</p><p>在这两个色彩空间中，<code>H</code>都是色相，它的取值范围是<code>0°</code>到<code>360°</code>的圆心角。<code>0°</code>与<code>360°</code>对应<code>红色</code>、<code>60°</code>对应<code>黄色</code>、<code>120°</code>对应<code>绿色</code>。</p><p>在将帧率转化为颜色时，只需要改变<code>H</code>即可。</p><p>在<code>iOS</code>中，苹果提供了<code>HSB</code>色彩空间所对应的方法，<code>H</code>、<code>S</code>、<code>B</code>取值被限制在<code>[0, 1.0]</code>区间内。</p><blockquote><p>在<code>iOS 10</code>之后（含<code>iOS 10</code>），不会对<code>H</code>、<code>S</code>、<code>B</code>的取值进行限制，对于<code>[0, 1]</code>区间外的值，会使用扩展的色彩空间</p></blockquote><p>因此，在将帧率转化为颜色时，<code>H</code>的值可以用<code>FPS / 60.0 * 120.0 / 360.0</code>进行计算，也就是<code>FPS / 180.0</code>，<code>S</code>、<code>B</code>固定为<code>1.0</code>（也可以固定为与<code>1.0</code>非常相近的值）。</p><p><code>[UIColor colorWithHue:FPS / 180.0 saturation:1 brightness:1 alpha:1]</code></p><p>由于<code>HSL</code>与<code>HSB</code>有一些区别，如果使用的是<code>HSL</code>，<code>L</code>需要取值<code>0.5</code>（也可以取与<code>0.5</code>非常相近的值）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS微信分享及从Safari跳转到App</title>
    <link href="/2016/10/12/iOS%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%8F%8A%E4%BB%8ESafari%E8%B7%B3%E8%BD%AC%E5%88%B0App/"/>
    <url>/2016/10/12/iOS%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%8F%8A%E4%BB%8ESafari%E8%B7%B3%E8%BD%AC%E5%88%B0App/</url>
    
    <content type="html"><![CDATA[<h2 id="一般的操作流程"><a href="#一般的操作流程" class="headerlink" title="一般的操作流程"></a>一般的操作流程</h2><ol><li>分享链接到微信（分享到朋友圈或分享给好友）</li><li>在微信中点击该链接后，在微信中展示网页，页面中有“App内打开”按钮</li><li>点击“App内打开”按钮后，在微信内进入到另外一个网页，页面中显示：<code>“点击右上角的‘...’按钮，选择‘在Safari中打开’”</code></li><li>在<code>Safari</code>中打开后，会弹出提示：<code>“在‘xxx’中打开链接吗？”</code>，点击<code>“打开”</code>，自动跳转到应用内，并用某个页面展示内容</li></ol><h2 id="实现上述操作所包含的功能"><a href="#实现上述操作所包含的功能" class="headerlink" title="实现上述操作所包含的功能"></a>实现上述操作所包含的功能</h2><h3 id="配置Information-Property-List"><a href="#配置Information-Property-List" class="headerlink" title="配置Information Property List"></a>配置<code>Information Property List</code></h3><p>在项目的<code>Information Property List</code>文件中，进行<code>URL types</code>相关配置：</p><ul><li>微信</li><li>自定义Scheme</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>CFBundleTypeRole<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Editor<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>CFBundleURLName<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>weixin<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>CFBundleURLSchemes<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>wx......<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>CFBundleTypeRole<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Editor<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>CFBundleURLName<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>xxxName<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>CFBundleURLSchemes<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>xxxScheme<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="微信分享"><a href="#微信分享" class="headerlink" title="微信分享"></a>微信分享</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">[WXApiRequestHandler sendLinkURL:xxxURLString <br><span class="hljs-symbol">                     TagName:</span>nil<br><span class="hljs-symbol">                     Title:</span>title<br><span class="hljs-symbol">                     Description:</span>desc<br><span class="hljs-symbol">                     ThumbImage:</span>thumb<br><span class="hljs-symbol">                     InScene:</span>scene]<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><h3 id="在网页中加入相关的跳转代码"><a href="#在网页中加入相关的跳转代码" class="headerlink" title="在网页中加入相关的跳转代码"></a>在网页中加入相关的跳转代码</h3><p>在需要进行跳转的网页中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 2秒后自动跳转到xxxScheme://xxx --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;2;url=xxxScheme://xxx&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>但，这种方式会导致用户无法与页面进行交互。</p><p>如果想在用户触发网页上的某个元素时，进行跳转，就需要使用<code>Location对象</code>的<code>href属性</code>或<code>assign()方法</code>。</p><p><code>href属性</code>及<code>assign()方法</code>的相关说明，见以下链接：</p><ul><li><a href="http://www.w3school.com.cn/jsref/dom_obj_location.asp">www.w3school.com.cn</a></li><li><a href="http://www.w3schools.com/jsref/obj_location.asp">www.w3schools.com</a></li><li><a href="http://w3schools.bootcss.com/jsref/obj_location.html">w3schools.bootcss.com</a></li><li><a href="http://www.runoob.com/jsref/obj-location.html">www.runoob.com</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Protocol Buffers For Objective-C</title>
    <link href="/2016/10/11/%E4%BD%BF%E7%94%A8Protocol%20Buffers%20For%20Objective-C/"/>
    <url>/2016/10/11/%E4%BD%BF%E7%94%A8Protocol%20Buffers%20For%20Objective-C/</url>
    
    <content type="html"><![CDATA[<p>使用这个类库：<a href="https://github.com/alexeyxo/protobuf-objc">https://github.com/alexeyxo/protobuf-objc</a>，支持<code>ARC</code>。</p><h2 id="构建-Objective-C-Protocol-Buffers-编译器"><a href="#构建-Objective-C-Protocol-Buffers-编译器" class="headerlink" title="构建 Objective-C Protocol Buffers 编译器"></a>构建 Objective-C Protocol Buffers 编译器</h2><p>步骤如下：</p><ol><li>通过<code>brew -v</code>命令，检查是否已经安装了<code>Homebrew</code>。如果未安装，请执行<code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>命令进行安装</li><li>安装<code>Protocol Buffers</code>编译器及必要的工具：<code>brew install automake</code>、<code>brew install libtool</code>、<code>brew install protobuf</code></li><li>（可选操作）为<code>Protocol Buffers</code>编译器创建符号链接：<code>ln -s /usr/local/Cellar/protobuf/2.6.1/bin/protoc /usr/local/bin</code></li><li>克隆该库：<code>git clone https://github.com/alexeyxo/protobuf-objc.git</code></li><li>切换到该库所在目录：执行<code>./scripts/build.sh</code></li></ol><h2 id="编译Protocol-Buffers协议文件"><a href="#编译Protocol-Buffers协议文件" class="headerlink" title="编译Protocol Buffers协议文件"></a>编译Protocol Buffers协议文件</h2><p>所用命令：<code>protoc --plugin=/usr/local/bin/protoc-gen-objc 协议文件 --objc_out=&quot;类文件输出目录&quot;</code></p><blockquote><p>请确保<code>类文件输出目录</code>已存在。</p></blockquote><p>比如，当前目录下有一个名为<code>IMSDK.proto</code>的协议文件，通过以下命令，将生成的类文件保存到当前目录下的<code>IMSDKPBClasses</code>目录中：</p><p><code>protoc --plugin=/usr/local/bin/protoc-gen-objc ./IMSDK.proto --objc_out=&quot;./IMSDKPBClasses&quot;</code></p><p>协议文件通常以<code>proto</code>为扩展名，但也可以使用其它扩展名，不过，使用其它扩展名，默认生成的类文件的名称就会包含这个扩展名：</p><table><thead><tr><th>协议文件</th><th>生成的类文件</th></tr></thead><tbody><tr><td><code>IMSDK.proto</code></td><td><code>Imsdk.pbobjc.h</code> <code>Imsdk.pbobjc.m</code></td></tr><tr><td><code>IMSDK.txt</code></td><td><code>ImsdkTxt.pbobjc.h</code> <code>ImsdkTxt.pbobjc.m</code></td></tr></tbody></table><p>生成类文件后，需要将其添加到项目中。</p><h2 id="将类库项目添加到主项目中"><a href="#将类库项目添加到主项目中" class="headerlink" title="将类库项目添加到主项目中"></a>将类库项目添加到主项目中</h2><p>以子项目的形式将该类库中的<code>src/runtime/ProtocolBuffers.xcodeproj</code>加入到主项目中。</p><p>因为直接加入是不会将文件复制过去的，因此，最好是在主项目所在目录下创建一个新目录，并将<code>runtime</code>目录下的所有内容拷贝到这个新目录中，然后，将该新目录下的<code>ProtocolBuffers.xcodeproj</code>拖到主项目中。</p><p>例如：</p><p><img src="/images/media/2016/10/2608600065.png"></p><p><img src="/images/media/2016/10/3999673009.gif"></p><p>导入头文件：<code>#import &lt;ProtocolBuffers/ProtocolBuffers.h&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Protocol Buffers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将命令手册导出</title>
    <link href="/2016/10/11/%E5%B0%86%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C%E5%AF%BC%E5%87%BA/"/>
    <url>/2016/10/11/%E5%B0%86%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>例如，将<code>ls</code>命令的手册，导出到<code>~/man_ls.txt</code>：</p><p><code>man ls &gt; ~/man_ls.txt</code></p><p>然后，用<code>vi</code>打开<code>~/man_ls.txt</code>，内容如下：</p><p><img src="/images/media/2016/10/2301577300.png"></p><p>会发现许多重复的字符，及<code>^H</code>（使用命令行时，在某些情况下，按下回退键会生成<code>^H</code>）。</p><p>为了把这些重复的字符及<code>^H</code>过滤掉，需要通过<code>管道</code>将<code>man ls</code>的结果传递给<code>col</code>命令，进行过滤。<code>col</code>命令需要使用<code>-b</code>选项，其作用是，不输出任何退格，只打印最后一个写到每个列位置的字符。</p><p><code>man ls | col -b &gt; ~/man_ls.txt</code></p><p>再次用<code>vi</code>打开<code>~/man_ls.txt</code>，内容如下：</p><p><img src="/images/media/2016/10/143461152.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言数组与指针</title>
    <link href="/2016/10/08/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <url>/2016/10/08/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>举例，</p><p><code>int list[10] = &#123;0&#125;;</code></p><p>那么，<code>list[2]</code>的类型为整型。</p><p>但是，<code>list</code>的类型是什么呢？是表示整个数组么？很遗憾，这种说法是错误的！</p><p>为什么这个说法是错误的呢？</p><p>举个例子，如果表示的是整个数组，那么，下面的例子，就表示复制整个数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> b[<span class="hljs-number">5</span>];<br>b = a;<br></code></pre></td></tr></table></figure><p>可是，<code>b = a;</code>，这个表达式明显是非法的(这里，之所以非法，原因在<code>b</code>身上，而非在<code>a</code>身上)，所以，<code>a</code>表示的不是整个数组！</p><p>在<strong>几乎所有</strong>（注意，是几乎所有，不是一个单独的<em>所有</em>或一个单独的<em>全部</em>）使用数组名的表达式中，数组名的值是一个只读指针（也就意味着，不能修改它的值，数组名不能作为可修改的左值。数组名的值，不是数组中某个元素的值）。</p><p>为什么上面说的是<strong>几乎所有</strong>呢？</p><p><strong>当数组名作为<code>sizeof</code>操作符或单目操作符<code>&amp;</code>的操作数时，数组名并不是指针常量。</strong></p><p><code>sizeof(list)</code>，返回的是整个数组的长度，而不是指向数组的指针的长度。</p><p><code>&amp;list</code>，产生的是一个指向数组的指针，而不是一个指向指针常量值的指针。</p><p>注意上面的第二点，在多数早期版本的<code>C语言</code>实现中，并没有“数组的地址”这个概念，因此，<code>&amp;list</code>，要么是非法的，要么就等同于<code>list</code>。</p><p>除了优先级外，下标引用和间接访问是完全相同的！</p><p><code>array[subscript]</code>等同于<code>*(array + (subscript))</code>。</p><p><code>*(list + 3)</code>等同于<code>list[3]</code>。</p><p><code>(list + 3)</code>等同于<code>(3 + list)</code>，也等同于<code>3[list]</code>。</p><p>下标引用可以作用于任意的指针，而不仅仅是数组名。</p><p>下标绝不会比指针更有效率，但，指针有时会比下标更有效率（前提是，它们被正确地使用）。</p><p>指针和数组并不是相等的！</p><p>举个例子，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> *b;<br></code></pre></td></tr></table></figure><p>声明数组<code>a</code>时，编译器为<code>a</code>保留<code>5</code>个<code>int</code>所需的连续的内存空间，然后再创建数组名<code>a</code>，让<code>a</code>指向这段内存空间的起始位置。</p><p>声明指针<code>b</code>时，编译器只为指针<code>b</code>保留内存空间，此时，指针并未指向任何内存空间。</p><p>当使用数组或指针作为函数参数时，哪个更准确呢？答案是指针，因为，实参实际上是指针，而不是数组。只传递给函数一个数组名，是无法在函数内部得知数组的长度的（得知的是指针的长度），这也就反证了，实参实际上是指针，而不是数组。</p><p><code>C语言</code>中只存在一维数组，所谓的多维数组，只是多个一维数组嵌套而来的，也可以说成是<em>仿真</em>或<em>模拟</em>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScriptCore框架入门</title>
    <link href="/2016/04/01/JavaScriptCore%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <url>/2016/04/01/JavaScriptCore%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>在进入主题之前，先简单了解一下主要所涉及的类</p><h6 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h6><ul><li>JavaScript执行环境</li></ul><h6 id="JSValue"><a href="#JSValue" class="headerlink" title="JSValue"></a>JSValue</h6><ul><li>强引用JavaScript值（这些JavaScript值可以是JavaScript函数、JavaScript变量等）</li><li>绑定在一个<code>JSContext</code>上，绑定属于强引用</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ol><li>Objective-C调用JavaScript</li><li>JavaScript调用Objective-C</li><li>内存管理</li><li>线程</li><li>JavaScriptCore与WebView</li></ol><h3 id="1-Objective-C调用JavaScript"><a href="#1-Objective-C调用JavaScript" class="headerlink" title="1. Objective-C调用JavaScript"></a>1. Objective-C调用JavaScript</h3><p>Objective-C调用JavaScript函数的基本步骤：</p><ol><li>获取相关的JavaScript代码</li><li>通过<code>JSContext</code>的<code>evaluateScript:</code>方法，装载JavaScript代码</li><li>通过<code>JSContext</code>的<code>objectForKeyedSubscript:</code>方法，获取已装载的JavaScript函数，获取到的JavaScript函数也就是一个<code>JSValue</code>对象</li><li>通过<code>JSValue</code>的<code>callWithArguments:</code>方法，调用JavaScript函数</li></ol><p>下面通过示例，进行演示。</p><p><code>function.js</code>文件中的内容如下，定义了一个函数，其名称为<code>factorail</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var factorail <span class="hljs-operator">=</span> function(n) &#123;<br>    if (n &lt; <span class="hljs-number">0</span>) &#123;<br>        return<span class="hljs-comment">;</span><br>    &#125;<br>    if (n <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>) &#123;<br>        return <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    &#125;<br>    return n * factorail(n - <span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Objective-C调用JavaScript函数：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 获取`<span class="hljs-keyword">function</span>.js`文件中的JavaScript代码<br>NSString *scriptPath = [[NSBundle mainBundle] pathForResource:@<span class="hljs-string">&quot;functions&quot;</span> ofType:@<span class="hljs-string">&quot;js&quot;</span>];<br>NSString *funcScript = [NSString stringWithContentsOfFile:scriptPath encoding:NSUTF8StringEncoding error:nil];<br><span class="hljs-regexp">//</span> 创建一个JSContext<br>JSContext *ctx = [JSContext new];<br><span class="hljs-regexp">//</span> 装载JavaScript代码<br>[ctx evaluateScript:funcScript];<br><span class="hljs-regexp">//</span> 获取`factorail`JavaScript函数<br>JSValue *jsFunctionValue = ctx[@<span class="hljs-string">&quot;factorail&quot;</span>];<span class="hljs-regexp">//</span> 等同于[ctx objectForKeyedSubscript:@<span class="hljs-string">&quot;factorail&quot;</span>];<br><span class="hljs-regexp">//</span> 调用JavaScript函数，获取返回值<br>JSValue *jsReturnValue = [jsFunctionValue callWithArguments:@[@<span class="hljs-number">10</span>]];<br></code></pre></td></tr></table></figure><h3 id="2-JavaScript调用Objective-C"><a href="#2-JavaScript调用Objective-C" class="headerlink" title="2. JavaScript调用Objective-C"></a>2. JavaScript调用Objective-C</h3><p>有两种方式，可以实现JavaScript调用Objective-C。</p><ul><li>2.1. 使用Block，实现JavaScript函数</li><li>2.2. 使用<code>JSExport</code>协议，实现JavaScript对象</li></ul><h4 id="2-1-使用Block"><a href="#2-1-使用Block" class="headerlink" title="2.1. 使用Block"></a>2.1. 使用Block</h4><p>具体说，就是通过<code>JSContext</code>的<code>setObject:forKeyedSubscript:</code>方法，为指定的下标设置一个Block，这样就相当于在<code>JSContext</code>中装载了一个名称为下标名的JavaScript函数，这个函数的参数就是Block的参数，返回值类型就是Block的返回值类型。</p><p>在使用Block时，有两点需要注意：</p><ol><li>避免捕获<code>JSValue</code>：应将其作为参数传递到Block中</li><li>避免捕获<code>JSContext</code>：应在Block中使用<code>[JSContext currentContext]</code></li></ol><p>示例，在<code>JSContext</code>中装载一个名为<code>makeUIColorWithNSDictionary</code>的JavaScript函数。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-keyword">define</span> RGB_COMPONENT_RED   @<span class="hljs-string">&quot;red&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RGB_COMPONENT_GREEN @<span class="hljs-string">&quot;green&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RGB_COMPONENT_BLUE  @<span class="hljs-string">&quot;blue&quot;</span></span><br><br>JSContext *ctx = [JSContext new];<br>ctx[<span class="hljs-string">@&quot;makeUIColorWithNSDictionary&quot;</span>] = ^<span class="hljs-built_in">UIColor</span> *(<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSString</span> *, <span class="hljs-built_in">NSNumber</span> *&gt; *rgb) &#123;<br>    <span class="hljs-type">float</span> r = [rgb[RGB_COMPONENT_RED] floatValue];<br>    <span class="hljs-type">float</span> g = [rgb[RGB_COMPONENT_GREEN] floatValue];<br>    <span class="hljs-type">float</span> b = [rgb[RGB_COMPONENT_BLUE] floatValue];<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIColor</span> colorWithRed:r green:g blue:b alpha:<span class="hljs-number">1.0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>装载后，就可以调用该JavaScript函数了，因为该JavaScript函数是通过Objective-C实现的，在其它JavaScript函数中调用该JavaScript函数，就可以实现JavaScript调用Objective-C。</p><p>接着，在<code>function.js</code>文件中加入<code>colorWithRGBDictionary(rgb)</code>JavaScript函数，这个函数，调用了上面已经为<code>JSContext</code>设置的<code>makeUIColorWithNSDictionary</code>。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">colorWithRGBDictionary</span>(rgb) &#123;<br>    if (rgb) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">makeUIColorWithNSDictionary(rgb)</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> undefined;<br>&#125;<br></code></pre></td></tr></table></figure><p>其余的主要代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 获取`function.js`文件中的JavaScript代码</span><br><span class="hljs-built_in">NSString</span> *scriptPath = [[<span class="hljs-built_in">NSBundle</span> mainBundle] pathForResource:<span class="hljs-string">@&quot;functions&quot;</span> ofType:<span class="hljs-string">@&quot;js&quot;</span>];<br><span class="hljs-built_in">NSString</span> *funcScript = [<span class="hljs-built_in">NSString</span> stringWithContentsOfFile:scriptPath encoding:<span class="hljs-built_in">NSUTF8StringEncoding</span> error:<span class="hljs-literal">nil</span>];<br><span class="hljs-comment">// 装载JavaScript代码</span><br>[ctx evaluateScript:funcScript];<br><span class="hljs-comment">// 获取`function.js`文件中的`colorWithRGBDictionary`函数</span><br>JSValue *jsFunctionValue = ctx[<span class="hljs-string">@&quot;colorWithRGBDictionary&quot;</span>];<br><span class="hljs-comment">// 执行`colorWithRGBDictionary`函数</span><br><span class="hljs-built_in">NSDictionary</span> *rgb = @&#123;<br>                      RGB_COMPONENT_RED:   @(<span class="hljs-number">0.3</span>),<br>                      RGB_COMPONENT_GREEN: @(<span class="hljs-number">0.5</span>),<br>                      RGB_COMPONENT_BLUE:  @(<span class="hljs-number">0.8</span>),<br>                      &#125;;<br>JSValue *colorValue = [jsFunctionValue callWithArguments:@[rgb]];<br><span class="hljs-built_in">UIColor</span> *color = [colorValue toObject];<br></code></pre></td></tr></table></figure><h4 id="2-2-使用JSExport协议"><a href="#2-2-使用JSExport协议" class="headerlink" title="2.2. 使用JSExport协议"></a>2.2. 使用<code>JSExport</code>协议</h4><p>该方式的优点：很容易让JavaScript与Objective-C对象进行交互。</p><p><code>JSExport</code>协议的作用就是将Objective-C类、实例方法、类方法及属性暴露给JavaScript代码。</p><p>示例：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@class</span> <span class="hljs-title">MyPoint</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">MyPointExport</span> &lt;<span class="hljs-title">NSObject</span>, <span class="hljs-title">JSExport</span>&gt;</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-type">double</span> x;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-type">double</span> y;<br><br>+ (MyPoint *)makePointWithX:(<span class="hljs-type">double</span>)x y:(<span class="hljs-type">double</span>)y;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">MyPoint</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">MyPointExport</span>&gt;</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-type">double</span> x;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-type">double</span> y;<br><br>+ (MyPoint *)makePointWithX:(<span class="hljs-type">double</span>)x y:(<span class="hljs-type">double</span>)y;<br>- (<span class="hljs-type">double</span>)distanceBetweenOriginalPoint;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">MyPoint</span></span><br><br>+ (MyPoint *)makePointWithX:(<span class="hljs-type">double</span>)x y:(<span class="hljs-type">double</span>)y &#123;<br>    MyPoint *p = [MyPoint new];<br>    p.x = x;<br>    p.y = y;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br>- (<span class="hljs-built_in">NSString</span> *)description &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;&lt;%@ - %p&gt; : (x = %f, y = %f)&quot;</span>, <span class="hljs-keyword">self</span>.class, <span class="hljs-keyword">self</span>, <span class="hljs-keyword">self</span>.x, <span class="hljs-keyword">self</span>.y];<br>&#125;<br><br>- (<span class="hljs-type">double</span>)distanceBetweenOriginalPoint &#123;<br>    <span class="hljs-keyword">return</span> sqrt(pow(<span class="hljs-keyword">self</span>.x, <span class="hljs-number">2</span>) + pow(<span class="hljs-keyword">self</span>.y, <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>在上面的代码中，自定义了一个<code>MyPointExport</code>协议，该协议继承了<code>JSExport</code>协议，在这个协议中，声明了两个属性和一个方法，因此，我们可以在JavaScript代码中使用它们。</p><p>在<code>function.js</code>文件中加入<code>middlePointOfTwoPoints(p1, p2)</code>JavaScript函数，在这个函数中，调用了协议中声明的属性及方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> middle<span class="hljs-constructor">PointOfTwoPoints(<span class="hljs-params">p1</span>, <span class="hljs-params">p2</span>)</span> &#123;<br>    var x = (p1.x + p2.x)<span class="hljs-operator"> / </span><span class="hljs-number">2.0</span>;<br>    var y = (p1.y + p2.y)<span class="hljs-operator"> / </span><span class="hljs-number">2.0</span>;<br>    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Point</span>.</span></span>make<span class="hljs-constructor">PointWithXY(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的JavaScript代码中，使用了<code>Point</code>类，它是与<code>MyPoint</code>类相关联的：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">NSString</span> *scriptPath = [[<span class="hljs-symbol">NSBundle</span> mainBundle] pathForResource:@<span class="hljs-string">&quot;functions&quot;</span> ofType:@<span class="hljs-string">&quot;js&quot;</span>];<br><span class="hljs-symbol">NSString</span> *funcScript = [<span class="hljs-symbol">NSString</span> stringWithContentsOfFile:scriptPath encoding:<span class="hljs-symbol">NSUTF8StringEncoding</span> error:nil];<br><br><span class="hljs-symbol">JSContext</span> *ctx = [<span class="hljs-symbol">JSContext</span> new];<br>[ctx evaluateScript:funcScript];<br><br><span class="hljs-symbol">JSValue</span> *functionValue = ctx[@<span class="hljs-string">&quot;middlePointOfTwoPoints&quot;</span>];<br><br>ctx[@<span class="hljs-string">&quot;Point&quot;</span>] = [<span class="hljs-symbol">MyPoint</span> class];// 在调用相关<span class="hljs-symbol">JavaScript</span>函数之前，配置相关的类<br><br><span class="hljs-symbol">MyPoint</span> *p1 = [<span class="hljs-symbol">MyPoint</span> makePointWithX:<span class="hljs-number">100</span> y:<span class="hljs-number">100</span>];<br><span class="hljs-symbol">MyPoint</span> *p2 = [<span class="hljs-symbol">MyPoint</span> makePointWithX:<span class="hljs-number">300</span> y:<span class="hljs-number">300</span>];<br><br><span class="hljs-symbol">JSValue</span> *pointValue = [functionValue callWithArguments:@[p1, p2]];<br><span class="hljs-symbol">MyPoint</span> *middlePoint = [pointValue toObject];<br></code></pre></td></tr></table></figure><p>注意<code>MyPoint</code>类中的<code>distanceBetweenOriginalPoint</code>方法，因为该方法并没有在<code>MyPointExport</code>协议中进行声明，因此，在JavaScript代码中，是不能使用该方法的，否则就会产生异常。通过<code>JSContext</code>的<code>setExceptionHandler:</code>方法，可以捕获到异常：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JSContext </span>*ctx = [<span class="hljs-keyword">JSContext </span>new];<br>[ctx setExceptionHandler:^(<span class="hljs-keyword">JSContext </span>*<span class="hljs-built_in">context</span>, <span class="hljs-keyword">JSValue </span>*exception) &#123;<br>    NSLog(@<span class="hljs-string">&quot;exception: %@&quot;</span>, exception);<br>&#125;];<br></code></pre></td></tr></table></figure><h4 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3. 内存管理"></a>3. 内存管理</h4><ul><li>Objective-C使用ARC（你可能还在使用MRC）</li><li>JavaScriptCore使用垃圾回收，所有的引用都是强引用</li><li>JavaScriptCore API中的内存管理，多数是自动进行管理的</li></ul><p>不过需要特别注意两种情形：</p><ol><li>在Objective-C对象中存储JavaScript值</li><li>向Objective-C对象中添加JavaScript域</li></ol><p>如何避免循环引用：<br>先使用<code>JSManagedValue</code>对JavaScript值进行弱引用，然后再使用<code>JSVirtualMachine</code>的<code>addManagedReference:withOwner:</code>方法，将<code>JSManagedValue</code>转入“垃圾回收”引用</p><h4 id="4-线程"><a href="#4-线程" class="headerlink" title="4. 线程"></a>4. 线程</h4><p>JavaScriptCore API是线程安全的，锁粒度为<code>JSVirtualMachine</code>，因此对于并发&#x2F;并行，需要使用多个<code>JSVirtualMachine</code>。</p><p>单个进程可以包含多个<code>JSVirtualMachine</code>，单个<code>JSVirtualMachine</code>可以包含多个<code>JSContext</code>，单个<code>JSContext</code>可以包含多个<code>JSValue</code>。</p><p>处于同一个<code>JSVirtualMachine</code>中的<code>JSValue</code>，可以在该<code>JSVirtualMachine</code>中的<code>JSContext</code>之间进行传递，但不能传递到其它<code>JSVirtualMachine</code>的<code>JSContext</code>中。</p><h4 id="5-JavaScript与WebView"><a href="#5-JavaScript与WebView" class="headerlink" title="5. JavaScript与WebView"></a>5. JavaScript与WebView</h4><p>要想通过<code>JavaScriptCore</code>框架让web view中的JavaScript与Objective-C进行交互，关键点就是获取web view中的<code>JSContext</code>。</p><p>获取到<code>JSContext</code>后，就可以装载自定义对象，以及替换原有的回调函数。</p><p>对于<code>WebView</code>类，通过<code>WebFrameLoadDelegate</code>协议的<code>webView:didCreateJavaScriptContext:forFrame:</code>方法，可以获取到<code>JSContext</code>对象。</p><p>但对于<code>UIWebView</code>类，苹果官方并没有公开相关的方法。不过，可以使用下面的两种方式：</p><ul><li>使用KVC&#x2F;KVO获取web view中的<code>JSContext</code>：<a href="http://blog.impathic.com/post/64171814244/true-javascript-uiwebview-integration-in-ios7">True JavaScript UIWebView Integration In iOS 7</a></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JSContext </span>*ctx = [webView valueForKeyPath:@<span class="hljs-string">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>];<br></code></pre></td></tr></table></figure><ul><li>参照Mac OS X中<code>WebFrameLoadDelegate</code>协议的<code>webView:didCreateJavaScriptContext:forFrame:</code>方法，获取web view中的<code>JSContext</code>：<a href="https://github.com/TomSwift/UIWebView-TS_JavaScriptContext">UIWebView-TS_JavaScriptContext</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创建透明的UINavigationBar</title>
    <link href="/2015/08/04/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%80%8F%E6%98%8E%E7%9A%84UINavigationBar/"/>
    <url>/2015/08/04/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%80%8F%E6%98%8E%E7%9A%84UINavigationBar/</url>
    
    <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>使用<code>setBackgroundImage:*</code>相关方法：</p><ol><li><code>- (void)setBackgroundImage:(nullable UIImage *)backgroundImage forBarMetrics:(UIBarMetrics)barMetrics</code></li><li><code>- (void)setBackgroundImage:(nullable UIImage *)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics</code></li></ol><p>并结合使用<code>shadowImage </code>属性：</p><p><code>@property(nullable, nonatomic,strong) UIImage *shadowImage</code></p><p>通过上述方法及属性，将<code>背景图片</code>及<code>阴影图片</code>设置为<code>透明图片</code>，就能达到目的。</p><p>如果手头上没有透明图片，可以引入<code>UIImage</code>类别，通过代码，生成透明图片。例如：</p><p><code>UIImage+INB.h</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">UIImage</span> (<span class="hljs-title">INB</span>)</span><br>+ (<span class="hljs-built_in">UIImage</span> *)imageWithColor:(<span class="hljs-built_in">UIColor</span> *)color size:(<span class="hljs-built_in">CGSize</span>)size cornerRadius:(<span class="hljs-built_in">CGFloat</span>)radius;<br>+ (<span class="hljs-built_in">UIImage</span> *)imageWithColor:(<span class="hljs-built_in">UIColor</span> *)color size:(<span class="hljs-built_in">CGSize</span>)size;<br>+ (<span class="hljs-built_in">UIImage</span> *)imageWithColor:(<span class="hljs-built_in">UIColor</span> *)color;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p><code>UIImage+INB.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-string">&quot;UIImage+INB.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">UIImage</span> (<span class="hljs-title">INB</span>)</span><br>+ (<span class="hljs-built_in">UIImage</span> *)imageWithColor:(<span class="hljs-built_in">UIColor</span> *)color size:(<span class="hljs-built_in">CGSize</span>)size cornerRadius:(<span class="hljs-built_in">CGFloat</span>)radius &#123;<br>    <span class="hljs-built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="hljs-literal">NO</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">CGContextRef</span> ctx = <span class="hljs-built_in">UIGraphicsGetCurrentContext</span>();<br>    <span class="hljs-built_in">CGContextSaveGState</span>(ctx);<br>    <span class="hljs-keyword">if</span> (radius &gt; <span class="hljs-number">0.0</span>f &amp;&amp; radius &lt;= size.width &amp;&amp; radius &lt;= size.height) &#123;<br>        <span class="hljs-built_in">UIBezierPath</span> *path = [<span class="hljs-built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, size.width, size.height) cornerRadius:radius];<br>        [color setFill];<br>        [path fill];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">CGContextSetFillColorWithColor</span>(ctx, color.CGColor);<br>        <span class="hljs-built_in">CGContextFillRect</span>(ctx, <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, size.width, size.height));<br>    &#125;<br>    <span class="hljs-built_in">CGContextRestoreGState</span>(ctx);<br>    <span class="hljs-built_in">UIImage</span> *img = <span class="hljs-built_in">UIGraphicsGetImageFromCurrentImageContext</span>();<br>    <span class="hljs-built_in">UIGraphicsEndImageContext</span>();<br>    <span class="hljs-keyword">return</span> img;<br>&#125;<br><br>+ (<span class="hljs-built_in">UIImage</span> *)imageWithColor:(<span class="hljs-built_in">UIColor</span> *)color size:(<span class="hljs-built_in">CGSize</span>)size &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIImage</span> imageWithColor:color size:size cornerRadius:<span class="hljs-number">0.0</span>f];<br>&#125;<br><br>+ (<span class="hljs-built_in">UIImage</span> *)imageWithColor:(<span class="hljs-built_in">UIColor</span> *)color &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIImage</span> imageWithColor:color size:<span class="hljs-built_in">CGSizeMake</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)];<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>注意，通过上面的方法创建图片时，<code>UIKIT_EXTERN void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)</code>函数的<code>opaque</code>参数一定要设置为<code>NO</code>，只有这样，图片的<code>alpha通道</code>才会起作用，进而才能创建出透明图片。</p><p>先看看初步的代码及效果：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-variable language_">super</span> viewDidLoad];<br>    <br>    <span class="hljs-keyword">self</span>.view.backgroundColor = [<span class="hljs-built_in">UIColor</span> greenColor];<br>    <span class="hljs-built_in">UINavigationBar</span> *navBar = <span class="hljs-keyword">self</span>.navigationController.navigationBar;<br>    <span class="hljs-built_in">UIImage</span> *bgImg = [<span class="hljs-built_in">UIImage</span> imageWithColor:[<span class="hljs-built_in">UIColor</span> redColor]];<br>    [navBar setBackgroundImage:bgImg forBarMetrics:<span class="hljs-built_in">UIBarMetricsDefault</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/media/2016/11/844902505.png" alt="transparent_nav_bar_320_568_1.png"></p><p>现在将背景图片设置为透明图片：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-variable language_">super</span> viewDidLoad];<br>    <br>    <span class="hljs-keyword">self</span>.view.backgroundColor = [<span class="hljs-built_in">UIColor</span> greenColor];<br>    <span class="hljs-built_in">UINavigationBar</span> *navBar = <span class="hljs-keyword">self</span>.navigationController.navigationBar;<br>    <span class="hljs-built_in">UIColor</span> *transparentColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">UIImage</span> *transparentImg = [<span class="hljs-built_in">UIImage</span> imageWithColor:transparentColor];<br>    [navBar setBackgroundImage:transparentImg forBarMetrics:<span class="hljs-built_in">UIBarMetricsDefault</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/media/2016/11/4190340148.png" alt="transparent_nav_bar_320_568_2.png"></p><p>可以看到，<code>UINavigationBar</code>的底部会有一条<code>“黑线”</code>，这条<code>“黑线”</code>其实是一个<code>UIImageView</code>。</p><p>请看<code>Debug View Hierarchy</code>的结果：</p><p><img src="/images/media/2016/11/297146619.png" alt="transparent_nav_bar_bottom_img_view.png"></p><p>现在，只要将这条<code>“黑线”</code>去掉或隐藏掉就能达到最终的目的。做成看起来像是去掉或隐藏掉也是可以的。</p><p>方法比较多。例如使用<code>navBar.layer.masksToBounds = YES</code>，但将这种方式用在此处并不是我所建议的。确切地说，此处的<code>“黑线”</code>就是<code>shadowImage</code>所产生的效果。</p><p>修改一下代码，就可以看出来：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-variable language_">super</span> viewDidLoad];<br>    <br>    <span class="hljs-keyword">self</span>.view.backgroundColor = [<span class="hljs-built_in">UIColor</span> greenColor];<br>    <span class="hljs-built_in">UINavigationBar</span> *navBar = <span class="hljs-keyword">self</span>.navigationController.navigationBar;<br>    <span class="hljs-built_in">UIColor</span> *transparentColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">UIImage</span> *transparentImg = [<span class="hljs-built_in">UIImage</span> imageWithColor:transparentColor];<br>    [navBar setBackgroundImage:transparentImg forBarMetrics:<span class="hljs-built_in">UIBarMetricsDefault</span>];<br>    <span class="hljs-built_in">UIImage</span> *shadowImg = [<span class="hljs-built_in">UIImage</span> imageWithColor:[<span class="hljs-built_in">UIColor</span> redColor] size:<span class="hljs-built_in">CGSizeMake</span>(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>)];<br>    navBar.shadowImage = shadowImg;<br>&#125;<br></code></pre></td></tr></table></figure><p>其效果如下：</p><p><img src="/images/media/2016/11/2442880138.png" alt="transparent_nav_bar_320_568_3.png"></p><p><code>Debug View Hierarchy</code>的结果如下：</p><p><img src="/images/media/2016/11/953114406.png" alt="transparent_nav_bar_bottom_shadow_img_view.png"></p><p>明白了这一点，将<code>shadowImage</code>设置为之前所生成的<code>transparentImg</code>透明图片即可。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-variable language_">super</span> viewDidLoad];<br>    <br>    <span class="hljs-keyword">self</span>.view.backgroundColor = [<span class="hljs-built_in">UIColor</span> greenColor];<br>    <span class="hljs-built_in">UINavigationBar</span> *navBar = <span class="hljs-keyword">self</span>.navigationController.navigationBar;<br>    <span class="hljs-built_in">UIColor</span> *transparentColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">UIImage</span> *transparentImg = [<span class="hljs-built_in">UIImage</span> imageWithColor:transparentColor];<br>    [navBar setBackgroundImage:transparentImg forBarMetrics:<span class="hljs-built_in">UIBarMetricsDefault</span>];<br>    navBar.shadowImage = transparentImg;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
